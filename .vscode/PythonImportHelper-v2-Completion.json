[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "name",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "animal.dog",
        "description": "animal.dog",
        "isExtraImport": true,
        "detail": "animal.dog",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "animal.dog",
        "description": "animal.dog",
        "isExtraImport": true,
        "detail": "animal.dog",
        "documentation": {}
    },
    {
        "label": "run",
        "importPath": "animal.cat.action",
        "description": "animal.cat.action",
        "isExtraImport": true,
        "detail": "animal.cat.action",
        "documentation": {}
    },
    {
        "label": "cat_name",
        "importPath": "animal.cat.action",
        "description": "animal.cat.action",
        "isExtraImport": true,
        "detail": "animal.cat.action",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "animal",
        "description": "animal",
        "isExtraImport": true,
        "detail": "animal",
        "documentation": {}
    },
    {
        "label": "dog_action",
        "importPath": "animal",
        "description": "animal",
        "isExtraImport": true,
        "detail": "animal",
        "documentation": {}
    },
    {
        "label": "cat_action",
        "importPath": "animal",
        "description": "animal",
        "isExtraImport": true,
        "detail": "animal",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "CodeType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Manager",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "gevent",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gevent",
        "description": "gevent",
        "detail": "gevent",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "U",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "base",
        "description": "base",
        "isExtraImport": true,
        "detail": "base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "base",
        "description": "base",
        "isExtraImport": true,
        "detail": "base",
        "documentation": {}
    },
    {
        "label": "NotUserError",
        "importPath": "common.error",
        "description": "common.error",
        "isExtraImport": true,
        "detail": "common.error",
        "documentation": {}
    },
    {
        "label": "UserActiveError",
        "importPath": "common.error",
        "description": "common.error",
        "isExtraImport": true,
        "detail": "common.error",
        "documentation": {}
    },
    {
        "label": "RoleError",
        "importPath": "common.error",
        "description": "common.error",
        "isExtraImport": true,
        "detail": "common.error",
        "documentation": {}
    },
    {
        "label": "UserExitsError",
        "importPath": "common.error",
        "description": "common.error",
        "isExtraImport": true,
        "detail": "common.error",
        "documentation": {}
    },
    {
        "label": "RoleError",
        "importPath": "common.error",
        "description": "common.error",
        "isExtraImport": true,
        "detail": "common.error",
        "documentation": {}
    },
    {
        "label": "LevelError",
        "importPath": "common.error",
        "description": "common.error",
        "isExtraImport": true,
        "detail": "common.error",
        "documentation": {}
    },
    {
        "label": "NagativeNumberError",
        "importPath": "common.error",
        "description": "common.error",
        "isExtraImport": true,
        "detail": "common.error",
        "documentation": {}
    },
    {
        "label": "CountError",
        "importPath": "common.error",
        "description": "common.error",
        "isExtraImport": true,
        "detail": "common.error",
        "documentation": {}
    },
    {
        "label": "NotUserError",
        "importPath": "common.error",
        "description": "common.error",
        "isExtraImport": true,
        "detail": "common.error",
        "documentation": {}
    },
    {
        "label": "RoleError",
        "importPath": "common.error",
        "description": "common.error",
        "isExtraImport": true,
        "detail": "common.error",
        "documentation": {}
    },
    {
        "label": "UserActiveError",
        "importPath": "common.error",
        "description": "common.error",
        "isExtraImport": true,
        "detail": "common.error",
        "documentation": {}
    },
    {
        "label": "CountError",
        "importPath": "common.error",
        "description": "common.error",
        "isExtraImport": true,
        "detail": "common.error",
        "documentation": {}
    },
    {
        "label": "check_file",
        "importPath": "common.utils",
        "description": "common.utils",
        "isExtraImport": true,
        "detail": "common.utils",
        "documentation": {}
    },
    {
        "label": "timestamp_to_string",
        "importPath": "common.utils",
        "description": "common.utils",
        "isExtraImport": true,
        "detail": "common.utils",
        "documentation": {}
    },
    {
        "label": "timestamp_to_string",
        "importPath": "common.utils",
        "description": "common.utils",
        "isExtraImport": true,
        "detail": "common.utils",
        "documentation": {}
    },
    {
        "label": "ROLES",
        "importPath": "common.consts",
        "description": "common.consts",
        "isExtraImport": true,
        "detail": "common.consts",
        "documentation": {}
    },
    {
        "label": "FIRSTLEVELS",
        "importPath": "common.consts",
        "description": "common.consts",
        "isExtraImport": true,
        "detail": "common.consts",
        "documentation": {}
    },
    {
        "label": "SECONDLEVELS",
        "importPath": "common.consts",
        "description": "common.consts",
        "isExtraImport": true,
        "detail": "common.consts",
        "documentation": {}
    },
    {
        "label": "mongoengine",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mongoengine",
        "description": "mongoengine",
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "user",
        "description": "user",
        "isExtraImport": true,
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "user",
        "description": "user",
        "isExtraImport": true,
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "Hobby",
        "importPath": "user",
        "description": "user",
        "isExtraImport": true,
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "user",
        "description": "user",
        "isExtraImport": true,
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "user",
        "description": "user",
        "isExtraImport": true,
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "Hobby",
        "importPath": "user",
        "description": "user",
        "isExtraImport": true,
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "DESCENDING",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "DESCENDING",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "DESCENDING",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "DESCENDING",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "DESCENDING",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "DESCENDING",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "DESCENDING",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "DESCENDING",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "DESCENDING",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "DESCENDING",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls.conf",
        "description": "django.urls.conf",
        "isExtraImport": true,
        "detail": "django.urls.conf",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls.conf",
        "description": "django.urls.conf",
        "isExtraImport": true,
        "detail": "django.urls.conf",
        "documentation": {}
    },
    {
        "label": "hello_word",
        "importPath": "hello.views",
        "description": "hello.views",
        "isExtraImport": true,
        "detail": "hello.views",
        "documentation": {}
    },
    {
        "label": "hello_china",
        "importPath": "hello.views",
        "description": "hello.views",
        "isExtraImport": true,
        "detail": "hello.views",
        "documentation": {}
    },
    {
        "label": "hello_html",
        "importPath": "hello.views",
        "description": "hello.views",
        "isExtraImport": true,
        "detail": "hello.views",
        "documentation": {}
    },
    {
        "label": "article_list",
        "importPath": "hello.views",
        "description": "hello.views",
        "isExtraImport": true,
        "detail": "hello.views",
        "documentation": {}
    },
    {
        "label": "search",
        "importPath": "hello.views",
        "description": "hello.views",
        "isExtraImport": true,
        "detail": "hello.views",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http.response",
        "description": "django.http.response",
        "isExtraImport": true,
        "detail": "django.http.response",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week01.day01.input",
        "description": "阶段1.week01.day01.input",
        "peekOfCode": "result = input('请输入一些内容\\n')\nprint(result)",
        "detail": "阶段1.week01.day01.input",
        "documentation": {}
    },
    {
        "label": "user_name",
        "kind": 5,
        "importPath": "阶段1.week01.day01.test4-3",
        "description": "阶段1.week01.day01.test4-3",
        "peekOfCode": "user_name = '小红' # 姓名\nage = 20 #年龄\nif __name__ == \"__main__\" :\n    print('姓名：',user_name,'年龄：',age)",
        "detail": "阶段1.week01.day01.test4-3",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "阶段1.week01.day01.test4-3",
        "description": "阶段1.week01.day01.test4-3",
        "peekOfCode": "age = 20 #年龄\nif __name__ == \"__main__\" :\n    print('姓名：',user_name,'年龄：',age)",
        "detail": "阶段1.week01.day01.test4-3",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "阶段1.week01.day01.test4-8",
        "description": "阶段1.week01.day01.test4-8",
        "peekOfCode": "price = 8.9\nweight = 5\nmoney = price * weight\nprint(type(price))\nprint('香蕉总金额为：',money,'元')",
        "detail": "阶段1.week01.day01.test4-8",
        "documentation": {}
    },
    {
        "label": "weight",
        "kind": 5,
        "importPath": "阶段1.week01.day01.test4-8",
        "description": "阶段1.week01.day01.test4-8",
        "peekOfCode": "weight = 5\nmoney = price * weight\nprint(type(price))\nprint('香蕉总金额为：',money,'元')",
        "detail": "阶段1.week01.day01.test4-8",
        "documentation": {}
    },
    {
        "label": "money",
        "kind": 5,
        "importPath": "阶段1.week01.day01.test4-8",
        "description": "阶段1.week01.day01.test4-8",
        "peekOfCode": "money = price * weight\nprint(type(price))\nprint('香蕉总金额为：',money,'元')",
        "detail": "阶段1.week01.day01.test4-8",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "阶段1.week01.day01.变量",
        "description": "阶段1.week01.day01.变量",
        "peekOfCode": "name = '周'\nage = 20\nis_sleep = 'ok'\nName = 'wang'\na,b,c = 1,2,3\nprint('a=%s b=%s c= %s'%(a,b,c))",
        "detail": "阶段1.week01.day01.变量",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "阶段1.week01.day01.变量",
        "description": "阶段1.week01.day01.变量",
        "peekOfCode": "age = 20\nis_sleep = 'ok'\nName = 'wang'\na,b,c = 1,2,3\nprint('a=%s b=%s c= %s'%(a,b,c))",
        "detail": "阶段1.week01.day01.变量",
        "documentation": {}
    },
    {
        "label": "is_sleep",
        "kind": 5,
        "importPath": "阶段1.week01.day01.变量",
        "description": "阶段1.week01.day01.变量",
        "peekOfCode": "is_sleep = 'ok'\nName = 'wang'\na,b,c = 1,2,3\nprint('a=%s b=%s c= %s'%(a,b,c))",
        "detail": "阶段1.week01.day01.变量",
        "documentation": {}
    },
    {
        "label": "Name",
        "kind": 5,
        "importPath": "阶段1.week01.day01.变量",
        "description": "阶段1.week01.day01.变量",
        "peekOfCode": "Name = 'wang'\na,b,c = 1,2,3\nprint('a=%s b=%s c= %s'%(a,b,c))",
        "detail": "阶段1.week01.day01.变量",
        "documentation": {}
    },
    {
        "label": "a,b,c",
        "kind": 5,
        "importPath": "阶段1.week01.day01.变量",
        "description": "阶段1.week01.day01.变量",
        "peekOfCode": "a,b,c = 1,2,3\nprint('a=%s b=%s c= %s'%(a,b,c))",
        "detail": "阶段1.week01.day01.变量",
        "documentation": {}
    },
    {
        "label": "title",
        "kind": 5,
        "importPath": "阶段1.week01.day02.number_test",
        "description": "阶段1.week01.day02.number_test",
        "peekOfCode": "title = '小慕学校的春游'\nclass_count = 51\nboys = 28\ngirls = 23\nevery_body_pay = 35.5\nstart_time = 8.00\nbus_count = 2\nsite_every_bus = 30\ncome_park_time = 10.33\nlunch_time = 12.0",
        "detail": "阶段1.week01.day02.number_test",
        "documentation": {}
    },
    {
        "label": "class_count",
        "kind": 5,
        "importPath": "阶段1.week01.day02.number_test",
        "description": "阶段1.week01.day02.number_test",
        "peekOfCode": "class_count = 51\nboys = 28\ngirls = 23\nevery_body_pay = 35.5\nstart_time = 8.00\nbus_count = 2\nsite_every_bus = 30\ncome_park_time = 10.33\nlunch_time = 12.0\nlunch_pay = 25.5",
        "detail": "阶段1.week01.day02.number_test",
        "documentation": {}
    },
    {
        "label": "boys",
        "kind": 5,
        "importPath": "阶段1.week01.day02.number_test",
        "description": "阶段1.week01.day02.number_test",
        "peekOfCode": "boys = 28\ngirls = 23\nevery_body_pay = 35.5\nstart_time = 8.00\nbus_count = 2\nsite_every_bus = 30\ncome_park_time = 10.33\nlunch_time = 12.0\nlunch_pay = 25.5\nleave_park_time = 3.05",
        "detail": "阶段1.week01.day02.number_test",
        "documentation": {}
    },
    {
        "label": "girls",
        "kind": 5,
        "importPath": "阶段1.week01.day02.number_test",
        "description": "阶段1.week01.day02.number_test",
        "peekOfCode": "girls = 23\nevery_body_pay = 35.5\nstart_time = 8.00\nbus_count = 2\nsite_every_bus = 30\ncome_park_time = 10.33\nlunch_time = 12.0\nlunch_pay = 25.5\nleave_park_time = 3.05\nbus_pay = 5",
        "detail": "阶段1.week01.day02.number_test",
        "documentation": {}
    },
    {
        "label": "every_body_pay",
        "kind": 5,
        "importPath": "阶段1.week01.day02.number_test",
        "description": "阶段1.week01.day02.number_test",
        "peekOfCode": "every_body_pay = 35.5\nstart_time = 8.00\nbus_count = 2\nsite_every_bus = 30\ncome_park_time = 10.33\nlunch_time = 12.0\nlunch_pay = 25.5\nleave_park_time = 3.05\nbus_pay = 5\ncome_back_school_time = 5.00",
        "detail": "阶段1.week01.day02.number_test",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "阶段1.week01.day02.number_test",
        "description": "阶段1.week01.day02.number_test",
        "peekOfCode": "start_time = 8.00\nbus_count = 2\nsite_every_bus = 30\ncome_park_time = 10.33\nlunch_time = 12.0\nlunch_pay = 25.5\nleave_park_time = 3.05\nbus_pay = 5\ncome_back_school_time = 5.00\nback_pay = 5",
        "detail": "阶段1.week01.day02.number_test",
        "documentation": {}
    },
    {
        "label": "bus_count",
        "kind": 5,
        "importPath": "阶段1.week01.day02.number_test",
        "description": "阶段1.week01.day02.number_test",
        "peekOfCode": "bus_count = 2\nsite_every_bus = 30\ncome_park_time = 10.33\nlunch_time = 12.0\nlunch_pay = 25.5\nleave_park_time = 3.05\nbus_pay = 5\ncome_back_school_time = 5.00\nback_pay = 5\nif __name__ == '__main__':",
        "detail": "阶段1.week01.day02.number_test",
        "documentation": {}
    },
    {
        "label": "site_every_bus",
        "kind": 5,
        "importPath": "阶段1.week01.day02.number_test",
        "description": "阶段1.week01.day02.number_test",
        "peekOfCode": "site_every_bus = 30\ncome_park_time = 10.33\nlunch_time = 12.0\nlunch_pay = 25.5\nleave_park_time = 3.05\nbus_pay = 5\ncome_back_school_time = 5.00\nback_pay = 5\nif __name__ == '__main__':\n    print(title)",
        "detail": "阶段1.week01.day02.number_test",
        "documentation": {}
    },
    {
        "label": "come_park_time",
        "kind": 5,
        "importPath": "阶段1.week01.day02.number_test",
        "description": "阶段1.week01.day02.number_test",
        "peekOfCode": "come_park_time = 10.33\nlunch_time = 12.0\nlunch_pay = 25.5\nleave_park_time = 3.05\nbus_pay = 5\ncome_back_school_time = 5.00\nback_pay = 5\nif __name__ == '__main__':\n    print(title)\n    print('小慕的班级有：', class_count)",
        "detail": "阶段1.week01.day02.number_test",
        "documentation": {}
    },
    {
        "label": "lunch_time",
        "kind": 5,
        "importPath": "阶段1.week01.day02.number_test",
        "description": "阶段1.week01.day02.number_test",
        "peekOfCode": "lunch_time = 12.0\nlunch_pay = 25.5\nleave_park_time = 3.05\nbus_pay = 5\ncome_back_school_time = 5.00\nback_pay = 5\nif __name__ == '__main__':\n    print(title)\n    print('小慕的班级有：', class_count)\n    print('男生有：', boys)",
        "detail": "阶段1.week01.day02.number_test",
        "documentation": {}
    },
    {
        "label": "lunch_pay",
        "kind": 5,
        "importPath": "阶段1.week01.day02.number_test",
        "description": "阶段1.week01.day02.number_test",
        "peekOfCode": "lunch_pay = 25.5\nleave_park_time = 3.05\nbus_pay = 5\ncome_back_school_time = 5.00\nback_pay = 5\nif __name__ == '__main__':\n    print(title)\n    print('小慕的班级有：', class_count)\n    print('男生有：', boys)\n    print('女生有：', girls)",
        "detail": "阶段1.week01.day02.number_test",
        "documentation": {}
    },
    {
        "label": "leave_park_time",
        "kind": 5,
        "importPath": "阶段1.week01.day02.number_test",
        "description": "阶段1.week01.day02.number_test",
        "peekOfCode": "leave_park_time = 3.05\nbus_pay = 5\ncome_back_school_time = 5.00\nback_pay = 5\nif __name__ == '__main__':\n    print(title)\n    print('小慕的班级有：', class_count)\n    print('男生有：', boys)\n    print('女生有：', girls)\n    print('每人支付', every_body_pay, '元')",
        "detail": "阶段1.week01.day02.number_test",
        "documentation": {}
    },
    {
        "label": "bus_pay",
        "kind": 5,
        "importPath": "阶段1.week01.day02.number_test",
        "description": "阶段1.week01.day02.number_test",
        "peekOfCode": "bus_pay = 5\ncome_back_school_time = 5.00\nback_pay = 5\nif __name__ == '__main__':\n    print(title)\n    print('小慕的班级有：', class_count)\n    print('男生有：', boys)\n    print('女生有：', girls)\n    print('每人支付', every_body_pay, '元')\n    print('出发的时间是早上', start_time, '点')",
        "detail": "阶段1.week01.day02.number_test",
        "documentation": {}
    },
    {
        "label": "come_back_school_time",
        "kind": 5,
        "importPath": "阶段1.week01.day02.number_test",
        "description": "阶段1.week01.day02.number_test",
        "peekOfCode": "come_back_school_time = 5.00\nback_pay = 5\nif __name__ == '__main__':\n    print(title)\n    print('小慕的班级有：', class_count)\n    print('男生有：', boys)\n    print('女生有：', girls)\n    print('每人支付', every_body_pay, '元')\n    print('出发的时间是早上', start_time, '点')\n    print('出行需要', bus_count, '公交大巴')",
        "detail": "阶段1.week01.day02.number_test",
        "documentation": {}
    },
    {
        "label": "back_pay",
        "kind": 5,
        "importPath": "阶段1.week01.day02.number_test",
        "description": "阶段1.week01.day02.number_test",
        "peekOfCode": "back_pay = 5\nif __name__ == '__main__':\n    print(title)\n    print('小慕的班级有：', class_count)\n    print('男生有：', boys)\n    print('女生有：', girls)\n    print('每人支付', every_body_pay, '元')\n    print('出发的时间是早上', start_time, '点')\n    print('出行需要', bus_count, '公交大巴')\n    print('我们到达公园的时间是：', come_park_time)",
        "detail": "阶段1.week01.day02.number_test",
        "documentation": {}
    },
    {
        "label": "JavaLearn",
        "kind": 5,
        "importPath": "阶段1.week01.day02.test2-8",
        "description": "阶段1.week01.day02.test2-8",
        "peekOfCode": "JavaLearn = '《Java架构师》'\nPythonLearn = '《python工程师》'\nAlgorithmeLearn = '《算法入门》'\ntotalMoney = 6600+4280+1280\nprint('1.一门',JavaLearn,'，价格6600元')\nprint('2.一门',PythonLearn,'，价格4280元')\nprint('3.一门',AlgorithmeLearn,'，价格1280元')\nprint('总价为：',totalMoney)",
        "detail": "阶段1.week01.day02.test2-8",
        "documentation": {}
    },
    {
        "label": "PythonLearn",
        "kind": 5,
        "importPath": "阶段1.week01.day02.test2-8",
        "description": "阶段1.week01.day02.test2-8",
        "peekOfCode": "PythonLearn = '《python工程师》'\nAlgorithmeLearn = '《算法入门》'\ntotalMoney = 6600+4280+1280\nprint('1.一门',JavaLearn,'，价格6600元')\nprint('2.一门',PythonLearn,'，价格4280元')\nprint('3.一门',AlgorithmeLearn,'，价格1280元')\nprint('总价为：',totalMoney)",
        "detail": "阶段1.week01.day02.test2-8",
        "documentation": {}
    },
    {
        "label": "AlgorithmeLearn",
        "kind": 5,
        "importPath": "阶段1.week01.day02.test2-8",
        "description": "阶段1.week01.day02.test2-8",
        "peekOfCode": "AlgorithmeLearn = '《算法入门》'\ntotalMoney = 6600+4280+1280\nprint('1.一门',JavaLearn,'，价格6600元')\nprint('2.一门',PythonLearn,'，价格4280元')\nprint('3.一门',AlgorithmeLearn,'，价格1280元')\nprint('总价为：',totalMoney)",
        "detail": "阶段1.week01.day02.test2-8",
        "documentation": {}
    },
    {
        "label": "totalMoney",
        "kind": 5,
        "importPath": "阶段1.week01.day02.test2-8",
        "description": "阶段1.week01.day02.test2-8",
        "peekOfCode": "totalMoney = 6600+4280+1280\nprint('1.一门',JavaLearn,'，价格6600元')\nprint('2.一门',PythonLearn,'，价格4280元')\nprint('3.一门',AlgorithmeLearn,'，价格1280元')\nprint('总价为：',totalMoney)",
        "detail": "阶段1.week01.day02.test2-8",
        "documentation": {}
    },
    {
        "label": "chicken_rice",
        "kind": 5,
        "importPath": "阶段1.week01.day02.test7-10",
        "description": "阶段1.week01.day02.test7-10",
        "peekOfCode": "chicken_rice = 20.5 # 鸡肉饭\nsquid_rice = 23.5 # 由于饭\negg_soup = 2 #番茄鸡蛋汤\nbeef_soup = 2 #牛肉汤\nrice_noodles = 16 #酸菜米线\norange_juice = 15 #橙汁\nstrawberry = 20 #草莓汁\napple_juice = 15 #苹果汁\nwatermelon = 20 #西瓜汁\nprint('鱿鱼饭比鸡肉饭贵：',squid_rice > chicken_rice)",
        "detail": "阶段1.week01.day02.test7-10",
        "documentation": {}
    },
    {
        "label": "squid_rice",
        "kind": 5,
        "importPath": "阶段1.week01.day02.test7-10",
        "description": "阶段1.week01.day02.test7-10",
        "peekOfCode": "squid_rice = 23.5 # 由于饭\negg_soup = 2 #番茄鸡蛋汤\nbeef_soup = 2 #牛肉汤\nrice_noodles = 16 #酸菜米线\norange_juice = 15 #橙汁\nstrawberry = 20 #草莓汁\napple_juice = 15 #苹果汁\nwatermelon = 20 #西瓜汁\nprint('鱿鱼饭比鸡肉饭贵：',squid_rice > chicken_rice)\nprint('酸菜米线比鸡肉饭便宜：',rice_noodles < chicken_rice)",
        "detail": "阶段1.week01.day02.test7-10",
        "documentation": {}
    },
    {
        "label": "egg_soup",
        "kind": 5,
        "importPath": "阶段1.week01.day02.test7-10",
        "description": "阶段1.week01.day02.test7-10",
        "peekOfCode": "egg_soup = 2 #番茄鸡蛋汤\nbeef_soup = 2 #牛肉汤\nrice_noodles = 16 #酸菜米线\norange_juice = 15 #橙汁\nstrawberry = 20 #草莓汁\napple_juice = 15 #苹果汁\nwatermelon = 20 #西瓜汁\nprint('鱿鱼饭比鸡肉饭贵：',squid_rice > chicken_rice)\nprint('酸菜米线比鸡肉饭便宜：',rice_noodles < chicken_rice)\nprint('番茄鸡蛋汤与牛肉汤价格相等：',egg_soup == beef_soup)",
        "detail": "阶段1.week01.day02.test7-10",
        "documentation": {}
    },
    {
        "label": "beef_soup",
        "kind": 5,
        "importPath": "阶段1.week01.day02.test7-10",
        "description": "阶段1.week01.day02.test7-10",
        "peekOfCode": "beef_soup = 2 #牛肉汤\nrice_noodles = 16 #酸菜米线\norange_juice = 15 #橙汁\nstrawberry = 20 #草莓汁\napple_juice = 15 #苹果汁\nwatermelon = 20 #西瓜汁\nprint('鱿鱼饭比鸡肉饭贵：',squid_rice > chicken_rice)\nprint('酸菜米线比鸡肉饭便宜：',rice_noodles < chicken_rice)\nprint('番茄鸡蛋汤与牛肉汤价格相等：',egg_soup == beef_soup)\nprint('鸡肉饭与鱿鱼饭价格不相等：',chicken_rice != squid_rice)",
        "detail": "阶段1.week01.day02.test7-10",
        "documentation": {}
    },
    {
        "label": "rice_noodles",
        "kind": 5,
        "importPath": "阶段1.week01.day02.test7-10",
        "description": "阶段1.week01.day02.test7-10",
        "peekOfCode": "rice_noodles = 16 #酸菜米线\norange_juice = 15 #橙汁\nstrawberry = 20 #草莓汁\napple_juice = 15 #苹果汁\nwatermelon = 20 #西瓜汁\nprint('鱿鱼饭比鸡肉饭贵：',squid_rice > chicken_rice)\nprint('酸菜米线比鸡肉饭便宜：',rice_noodles < chicken_rice)\nprint('番茄鸡蛋汤与牛肉汤价格相等：',egg_soup == beef_soup)\nprint('鸡肉饭与鱿鱼饭价格不相等：',chicken_rice != squid_rice)",
        "detail": "阶段1.week01.day02.test7-10",
        "documentation": {}
    },
    {
        "label": "orange_juice",
        "kind": 5,
        "importPath": "阶段1.week01.day02.test7-10",
        "description": "阶段1.week01.day02.test7-10",
        "peekOfCode": "orange_juice = 15 #橙汁\nstrawberry = 20 #草莓汁\napple_juice = 15 #苹果汁\nwatermelon = 20 #西瓜汁\nprint('鱿鱼饭比鸡肉饭贵：',squid_rice > chicken_rice)\nprint('酸菜米线比鸡肉饭便宜：',rice_noodles < chicken_rice)\nprint('番茄鸡蛋汤与牛肉汤价格相等：',egg_soup == beef_soup)\nprint('鸡肉饭与鱿鱼饭价格不相等：',chicken_rice != squid_rice)",
        "detail": "阶段1.week01.day02.test7-10",
        "documentation": {}
    },
    {
        "label": "strawberry",
        "kind": 5,
        "importPath": "阶段1.week01.day02.test7-10",
        "description": "阶段1.week01.day02.test7-10",
        "peekOfCode": "strawberry = 20 #草莓汁\napple_juice = 15 #苹果汁\nwatermelon = 20 #西瓜汁\nprint('鱿鱼饭比鸡肉饭贵：',squid_rice > chicken_rice)\nprint('酸菜米线比鸡肉饭便宜：',rice_noodles < chicken_rice)\nprint('番茄鸡蛋汤与牛肉汤价格相等：',egg_soup == beef_soup)\nprint('鸡肉饭与鱿鱼饭价格不相等：',chicken_rice != squid_rice)",
        "detail": "阶段1.week01.day02.test7-10",
        "documentation": {}
    },
    {
        "label": "apple_juice",
        "kind": 5,
        "importPath": "阶段1.week01.day02.test7-10",
        "description": "阶段1.week01.day02.test7-10",
        "peekOfCode": "apple_juice = 15 #苹果汁\nwatermelon = 20 #西瓜汁\nprint('鱿鱼饭比鸡肉饭贵：',squid_rice > chicken_rice)\nprint('酸菜米线比鸡肉饭便宜：',rice_noodles < chicken_rice)\nprint('番茄鸡蛋汤与牛肉汤价格相等：',egg_soup == beef_soup)\nprint('鸡肉饭与鱿鱼饭价格不相等：',chicken_rice != squid_rice)",
        "detail": "阶段1.week01.day02.test7-10",
        "documentation": {}
    },
    {
        "label": "watermelon",
        "kind": 5,
        "importPath": "阶段1.week01.day02.test7-10",
        "description": "阶段1.week01.day02.test7-10",
        "peekOfCode": "watermelon = 20 #西瓜汁\nprint('鱿鱼饭比鸡肉饭贵：',squid_rice > chicken_rice)\nprint('酸菜米线比鸡肉饭便宜：',rice_noodles < chicken_rice)\nprint('番茄鸡蛋汤与牛肉汤价格相等：',egg_soup == beef_soup)\nprint('鸡肉饭与鱿鱼饭价格不相等：',chicken_rice != squid_rice)",
        "detail": "阶段1.week01.day02.test7-10",
        "documentation": {}
    },
    {
        "label": "names_01",
        "kind": 5,
        "importPath": "阶段1.week01.day02.元组类型",
        "description": "阶段1.week01.day02.元组类型",
        "peekOfCode": "names_01 = tuple(('dewei', 'xiaomu'))\nnames_02 = ('dewei', 'xiaomu')\n# 如果一个元组中只有一个成员，则后面必须带上 ','\nnames_03 = ('dewei',)\n# 元组与列表的区别\n# 元组比列表占用资源更小\n# 列表是可变的，元组是不可变的\n# 元组是不可变的，指的是地址不可变，值是可以变得\na = (1, 2, 3)\nprint(id(a))",
        "detail": "阶段1.week01.day02.元组类型",
        "documentation": {}
    },
    {
        "label": "names_02",
        "kind": 5,
        "importPath": "阶段1.week01.day02.元组类型",
        "description": "阶段1.week01.day02.元组类型",
        "peekOfCode": "names_02 = ('dewei', 'xiaomu')\n# 如果一个元组中只有一个成员，则后面必须带上 ','\nnames_03 = ('dewei',)\n# 元组与列表的区别\n# 元组比列表占用资源更小\n# 列表是可变的，元组是不可变的\n# 元组是不可变的，指的是地址不可变，值是可以变得\na = (1, 2, 3)\nprint(id(a))\nb = (4, 5, 6)",
        "detail": "阶段1.week01.day02.元组类型",
        "documentation": {}
    },
    {
        "label": "names_03",
        "kind": 5,
        "importPath": "阶段1.week01.day02.元组类型",
        "description": "阶段1.week01.day02.元组类型",
        "peekOfCode": "names_03 = ('dewei',)\n# 元组与列表的区别\n# 元组比列表占用资源更小\n# 列表是可变的，元组是不可变的\n# 元组是不可变的，指的是地址不可变，值是可以变得\na = (1, 2, 3)\nprint(id(a))\nb = (4, 5, 6)\na = a + b\nprint(a)",
        "detail": "阶段1.week01.day02.元组类型",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "阶段1.week01.day02.元组类型",
        "description": "阶段1.week01.day02.元组类型",
        "peekOfCode": "a = (1, 2, 3)\nprint(id(a))\nb = (4, 5, 6)\na = a + b\nprint(a)\nprint(id(a))\n# in max min 在元组中的使用 与在列表中时一样的",
        "detail": "阶段1.week01.day02.元组类型",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "阶段1.week01.day02.元组类型",
        "description": "阶段1.week01.day02.元组类型",
        "peekOfCode": "b = (4, 5, 6)\na = a + b\nprint(a)\nprint(id(a))\n# in max min 在元组中的使用 与在列表中时一样的",
        "detail": "阶段1.week01.day02.元组类型",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "阶段1.week01.day02.元组类型",
        "description": "阶段1.week01.day02.元组类型",
        "peekOfCode": "a = a + b\nprint(a)\nprint(id(a))\n# in max min 在元组中的使用 与在列表中时一样的",
        "detail": "阶段1.week01.day02.元组类型",
        "documentation": {}
    },
    {
        "label": "names_01",
        "kind": 5,
        "importPath": "阶段1.week01.day02.列表类型",
        "description": "阶段1.week01.day02.列表类型",
        "peekOfCode": "names_01 = list(['dewei', 'xiaomu', 'dewei'])\nnames_02 = ['dewei', 'xiaomu', 'dewei']\nprint(type(names_01))\nprint(type(names_02))\n# 列表是一个无限制长度的数据结构\n# in max min\nprint( 1 in [1,2,3,4])\nprint( 10 in [1,2,3,4])\nprint(max([1,2,3,4]))\nprint(min([1,2,3,4]))",
        "detail": "阶段1.week01.day02.列表类型",
        "documentation": {}
    },
    {
        "label": "names_02",
        "kind": 5,
        "importPath": "阶段1.week01.day02.列表类型",
        "description": "阶段1.week01.day02.列表类型",
        "peekOfCode": "names_02 = ['dewei', 'xiaomu', 'dewei']\nprint(type(names_01))\nprint(type(names_02))\n# 列表是一个无限制长度的数据结构\n# in max min\nprint( 1 in [1,2,3,4])\nprint( 10 in [1,2,3,4])\nprint(max([1,2,3,4]))\nprint(min([1,2,3,4]))\n# max 和 min 在列表中使用的时候，列表中的元素不能是多种类型，",
        "detail": "阶段1.week01.day02.列表类型",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "阶段1.week01.day02.字典类型",
        "description": "阶段1.week01.day02.字典类型",
        "peekOfCode": "a = dict()\na = {}\npersion = {'name': 'dewei', 'age': 33}\n# key支持字符串，数字，元组但不支持列表\n# value支持错you类型\na = {'name': 'dewei', 'age': 30}\nb = {1: 'one', 2: 'two'}\nc = {(1, 2, 3): [1, 2, 3], (4, 5, 6): [4, 5, 6]}\n# 3.7之前字典是无序的，之后是有序的\n# 字典中每一个key一定是唯一的",
        "detail": "阶段1.week01.day02.字典类型",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "阶段1.week01.day02.字典类型",
        "description": "阶段1.week01.day02.字典类型",
        "peekOfCode": "a = {}\npersion = {'name': 'dewei', 'age': 33}\n# key支持字符串，数字，元组但不支持列表\n# value支持错you类型\na = {'name': 'dewei', 'age': 30}\nb = {1: 'one', 2: 'two'}\nc = {(1, 2, 3): [1, 2, 3], (4, 5, 6): [4, 5, 6]}\n# 3.7之前字典是无序的，之后是有序的\n# 字典中每一个key一定是唯一的\n# max min 是看的key，按照字母大小比顺序",
        "detail": "阶段1.week01.day02.字典类型",
        "documentation": {}
    },
    {
        "label": "persion",
        "kind": 5,
        "importPath": "阶段1.week01.day02.字典类型",
        "description": "阶段1.week01.day02.字典类型",
        "peekOfCode": "persion = {'name': 'dewei', 'age': 33}\n# key支持字符串，数字，元组但不支持列表\n# value支持错you类型\na = {'name': 'dewei', 'age': 30}\nb = {1: 'one', 2: 'two'}\nc = {(1, 2, 3): [1, 2, 3], (4, 5, 6): [4, 5, 6]}\n# 3.7之前字典是无序的，之后是有序的\n# 字典中每一个key一定是唯一的\n# max min 是看的key，按照字母大小比顺序",
        "detail": "阶段1.week01.day02.字典类型",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "阶段1.week01.day02.字典类型",
        "description": "阶段1.week01.day02.字典类型",
        "peekOfCode": "a = {'name': 'dewei', 'age': 30}\nb = {1: 'one', 2: 'two'}\nc = {(1, 2, 3): [1, 2, 3], (4, 5, 6): [4, 5, 6]}\n# 3.7之前字典是无序的，之后是有序的\n# 字典中每一个key一定是唯一的\n# max min 是看的key，按照字母大小比顺序",
        "detail": "阶段1.week01.day02.字典类型",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "阶段1.week01.day02.字典类型",
        "description": "阶段1.week01.day02.字典类型",
        "peekOfCode": "b = {1: 'one', 2: 'two'}\nc = {(1, 2, 3): [1, 2, 3], (4, 5, 6): [4, 5, 6]}\n# 3.7之前字典是无序的，之后是有序的\n# 字典中每一个key一定是唯一的\n# max min 是看的key，按照字母大小比顺序",
        "detail": "阶段1.week01.day02.字典类型",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "阶段1.week01.day02.字典类型",
        "description": "阶段1.week01.day02.字典类型",
        "peekOfCode": "c = {(1, 2, 3): [1, 2, 3], (4, 5, 6): [4, 5, 6]}\n# 3.7之前字典是无序的，之后是有序的\n# 字典中每一个key一定是唯一的\n# max min 是看的key，按照字母大小比顺序",
        "detail": "阶段1.week01.day02.字典类型",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "阶段1.week01.day02.字符串的简单应用",
        "description": "阶段1.week01.day02.字符串的简单应用",
        "peekOfCode": "a = '123'\nb = a +'456'\nprint(b)",
        "detail": "阶段1.week01.day02.字符串的简单应用",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "阶段1.week01.day02.字符串的简单应用",
        "description": "阶段1.week01.day02.字符串的简单应用",
        "peekOfCode": "b = a +'456'\nprint(b)",
        "detail": "阶段1.week01.day02.字符串的简单应用",
        "documentation": {}
    },
    {
        "label": "safe",
        "kind": 5,
        "importPath": "阶段1.week01.day02.字符串类型",
        "description": "阶段1.week01.day02.字符串类型",
        "peekOfCode": "safe = str('健康的体温是36.5')\nname = '小慕'\n# 都可以定义成字符串型\nprint(type(safe))\nprint(type(name))\n# 字符串不可改变\n# id() 返回变量的内存地址\nprint(id(name))\nname = '小明'\nprint(id(name))",
        "detail": "阶段1.week01.day02.字符串类型",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "阶段1.week01.day02.字符串类型",
        "description": "阶段1.week01.day02.字符串类型",
        "peekOfCode": "name = '小慕'\n# 都可以定义成字符串型\nprint(type(safe))\nprint(type(name))\n# 字符串不可改变\n# id() 返回变量的内存地址\nprint(id(name))\nname = '小明'\nprint(id(name))\n# len()返回字符串长度",
        "detail": "阶段1.week01.day02.字符串类型",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "阶段1.week01.day02.字符串类型",
        "description": "阶段1.week01.day02.字符串类型",
        "peekOfCode": "name = '小明'\nprint(id(name))\n# len()返回字符串长度\nprint(len(name))\n# 这种注释也可以赋值\ninfo1 = '''今天天气真好呀'''\ninfo2 = \"\"\"你好\"\"\"\nprint(info1)\nprint(info2)",
        "detail": "阶段1.week01.day02.字符串类型",
        "documentation": {}
    },
    {
        "label": "info1",
        "kind": 5,
        "importPath": "阶段1.week01.day02.字符串类型",
        "description": "阶段1.week01.day02.字符串类型",
        "peekOfCode": "info1 = '''今天天气真好呀'''\ninfo2 = \"\"\"你好\"\"\"\nprint(info1)\nprint(info2)",
        "detail": "阶段1.week01.day02.字符串类型",
        "documentation": {}
    },
    {
        "label": "info2",
        "kind": 5,
        "importPath": "阶段1.week01.day02.字符串类型",
        "description": "阶段1.week01.day02.字符串类型",
        "peekOfCode": "info2 = \"\"\"你好\"\"\"\nprint(info1)\nprint(info2)",
        "detail": "阶段1.week01.day02.字符串类型",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "阶段1.week01.day02.布尔值与空类型",
        "description": "阶段1.week01.day02.布尔值与空类型",
        "peekOfCode": "test = None\nprint(test)\n# 知道类型就可以重新赋值\ntest = True\nprint(test)",
        "detail": "阶段1.week01.day02.布尔值与空类型",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "阶段1.week01.day02.布尔值与空类型",
        "description": "阶段1.week01.day02.布尔值与空类型",
        "peekOfCode": "test = True\nprint(test)",
        "detail": "阶段1.week01.day02.布尔值与空类型",
        "documentation": {}
    },
    {
        "label": "count_100_01",
        "kind": 5,
        "importPath": "阶段1.week01.day02.整型和浮点型",
        "description": "阶段1.week01.day02.整型和浮点型",
        "peekOfCode": "count_100_01 = int(100)\ncount_100_02 = 100\n# 两种方式是等价的\n# 浮点型\npi_01 = float(3.14)\npi_02 = 3.14\n# 两种方法是等价的\n# 使用    type函数 返回 变量类型\ncount = 1050\nprint(type(count))",
        "detail": "阶段1.week01.day02.整型和浮点型",
        "documentation": {}
    },
    {
        "label": "count_100_02",
        "kind": 5,
        "importPath": "阶段1.week01.day02.整型和浮点型",
        "description": "阶段1.week01.day02.整型和浮点型",
        "peekOfCode": "count_100_02 = 100\n# 两种方式是等价的\n# 浮点型\npi_01 = float(3.14)\npi_02 = 3.14\n# 两种方法是等价的\n# 使用    type函数 返回 变量类型\ncount = 1050\nprint(type(count))\nprint(type(pi_02))",
        "detail": "阶段1.week01.day02.整型和浮点型",
        "documentation": {}
    },
    {
        "label": "pi_01",
        "kind": 5,
        "importPath": "阶段1.week01.day02.整型和浮点型",
        "description": "阶段1.week01.day02.整型和浮点型",
        "peekOfCode": "pi_01 = float(3.14)\npi_02 = 3.14\n# 两种方法是等价的\n# 使用    type函数 返回 变量类型\ncount = 1050\nprint(type(count))\nprint(type(pi_02))",
        "detail": "阶段1.week01.day02.整型和浮点型",
        "documentation": {}
    },
    {
        "label": "pi_02",
        "kind": 5,
        "importPath": "阶段1.week01.day02.整型和浮点型",
        "description": "阶段1.week01.day02.整型和浮点型",
        "peekOfCode": "pi_02 = 3.14\n# 两种方法是等价的\n# 使用    type函数 返回 变量类型\ncount = 1050\nprint(type(count))\nprint(type(pi_02))",
        "detail": "阶段1.week01.day02.整型和浮点型",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "阶段1.week01.day02.整型和浮点型",
        "description": "阶段1.week01.day02.整型和浮点型",
        "peekOfCode": "count = 1050\nprint(type(count))\nprint(type(pi_02))",
        "detail": "阶段1.week01.day02.整型和浮点型",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "阶段1.week01.day02.比较运算符与身份运算符",
        "description": "阶段1.week01.day02.比较运算符与身份运算符",
        "peekOfCode": "d = 18\nd_01 = 18\nf = 300\nf_01 = 300\nprint(d==d_01)\nprint(d is d_01)\nprint('d id is:',id(d))\nprint('d_01 id is:',id(d_01))\nprint(f==f_01)\nprint(f is f_01)",
        "detail": "阶段1.week01.day02.比较运算符与身份运算符",
        "documentation": {}
    },
    {
        "label": "d_01",
        "kind": 5,
        "importPath": "阶段1.week01.day02.比较运算符与身份运算符",
        "description": "阶段1.week01.day02.比较运算符与身份运算符",
        "peekOfCode": "d_01 = 18\nf = 300\nf_01 = 300\nprint(d==d_01)\nprint(d is d_01)\nprint('d id is:',id(d))\nprint('d_01 id is:',id(d_01))\nprint(f==f_01)\nprint(f is f_01)\nprint('f id is:',id(f))",
        "detail": "阶段1.week01.day02.比较运算符与身份运算符",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "阶段1.week01.day02.比较运算符与身份运算符",
        "description": "阶段1.week01.day02.比较运算符与身份运算符",
        "peekOfCode": "f = 300\nf_01 = 300\nprint(d==d_01)\nprint(d is d_01)\nprint('d id is:',id(d))\nprint('d_01 id is:',id(d_01))\nprint(f==f_01)\nprint(f is f_01)\nprint('f id is:',id(f))\nprint('f_01 id is:',id(f_01))",
        "detail": "阶段1.week01.day02.比较运算符与身份运算符",
        "documentation": {}
    },
    {
        "label": "f_01",
        "kind": 5,
        "importPath": "阶段1.week01.day02.比较运算符与身份运算符",
        "description": "阶段1.week01.day02.比较运算符与身份运算符",
        "peekOfCode": "f_01 = 300\nprint(d==d_01)\nprint(d is d_01)\nprint('d id is:',id(d))\nprint('d_01 id is:',id(d_01))\nprint(f==f_01)\nprint(f is f_01)\nprint('f id is:',id(f))\nprint('f_01 id is:',id(f_01))\n# 在原生的python解释器中，会实现定义0-255",
        "detail": "阶段1.week01.day02.比较运算符与身份运算符",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "阶段1.week01.day02.赋值运算符",
        "description": "阶段1.week01.day02.赋值运算符",
        "peekOfCode": "name = 'xiaomu'\nprint(name * 3)            # xiaomuxiaomuxiaomu",
        "detail": "阶段1.week01.day02.赋值运算符",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 5,
        "importPath": "阶段1.week02.day01.capitalize的使用方法",
        "description": "阶段1.week02.day01.capitalize的使用方法",
        "peekOfCode": "info = 'hello 小慕'\nname = 'xiaoMu'\nnew_name = name.capitalize()\nnew_info = info.capitalize()\nprint(new_info) #Hello 小慕\nprint(new_name) #Xiaomu",
        "detail": "阶段1.week02.day01.capitalize的使用方法",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "阶段1.week02.day01.capitalize的使用方法",
        "description": "阶段1.week02.day01.capitalize的使用方法",
        "peekOfCode": "name = 'xiaoMu'\nnew_name = name.capitalize()\nnew_info = info.capitalize()\nprint(new_info) #Hello 小慕\nprint(new_name) #Xiaomu",
        "detail": "阶段1.week02.day01.capitalize的使用方法",
        "documentation": {}
    },
    {
        "label": "new_name",
        "kind": 5,
        "importPath": "阶段1.week02.day01.capitalize的使用方法",
        "description": "阶段1.week02.day01.capitalize的使用方法",
        "peekOfCode": "new_name = name.capitalize()\nnew_info = info.capitalize()\nprint(new_info) #Hello 小慕\nprint(new_name) #Xiaomu",
        "detail": "阶段1.week02.day01.capitalize的使用方法",
        "documentation": {}
    },
    {
        "label": "new_info",
        "kind": 5,
        "importPath": "阶段1.week02.day01.capitalize的使用方法",
        "description": "阶段1.week02.day01.capitalize的使用方法",
        "peekOfCode": "new_info = info.capitalize()\nprint(new_info) #Hello 小慕\nprint(new_name) #Xiaomu",
        "detail": "阶段1.week02.day01.capitalize的使用方法",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "阶段1.week02.day01.casefold与lower",
        "description": "阶段1.week02.day01.casefold与lower",
        "peekOfCode": "name = 'DEWEI 你好'\nnew_name1 = name.casefold();\nnew_name2 = name.lower();\nprint(new_name1,new_name2) #dewei 你好 dewei 你好",
        "detail": "阶段1.week02.day01.casefold与lower",
        "documentation": {}
    },
    {
        "label": "new_name1",
        "kind": 5,
        "importPath": "阶段1.week02.day01.casefold与lower",
        "description": "阶段1.week02.day01.casefold与lower",
        "peekOfCode": "new_name1 = name.casefold();\nnew_name2 = name.lower();\nprint(new_name1,new_name2) #dewei 你好 dewei 你好",
        "detail": "阶段1.week02.day01.casefold与lower",
        "documentation": {}
    },
    {
        "label": "new_name2",
        "kind": 5,
        "importPath": "阶段1.week02.day01.casefold与lower",
        "description": "阶段1.week02.day01.casefold与lower",
        "peekOfCode": "new_name2 = name.lower();\nprint(new_name1,new_name2) #dewei 你好 dewei 你好",
        "detail": "阶段1.week02.day01.casefold与lower",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 5,
        "importPath": "阶段1.week02.day01.count的使用方法",
        "description": "阶段1.week02.day01.count的使用方法",
        "peekOfCode": "info = 'my name is dewei'\nprint(info.count('e')) #查找字符串中有几个e",
        "detail": "阶段1.week02.day01.count的使用方法",
        "documentation": {}
    },
    {
        "label": "info_n",
        "kind": 5,
        "importPath": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "description": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "peekOfCode": "info_n = 'my name \\n is dewei'\ninfo_t1 = 'my name \\t is dewei'\ninfo_t2 = 'my name\\tis dewei'\ninfo_v = 'my name \\vis dewei'\ninfo_a = 'my name \\ais dewei'\ninfo_b = 'my name is dewei\\b'\ninfo_r = 'my name \\ris dewei' #会把前面的字符删掉然后换行\ninfo_f = 'my name \\fis dewei'\nprint(info_n)\nprint(info_t1)",
        "detail": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "documentation": {}
    },
    {
        "label": "info_t1",
        "kind": 5,
        "importPath": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "description": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "peekOfCode": "info_t1 = 'my name \\t is dewei'\ninfo_t2 = 'my name\\tis dewei'\ninfo_v = 'my name \\vis dewei'\ninfo_a = 'my name \\ais dewei'\ninfo_b = 'my name is dewei\\b'\ninfo_r = 'my name \\ris dewei' #会把前面的字符删掉然后换行\ninfo_f = 'my name \\fis dewei'\nprint(info_n)\nprint(info_t1)\nprint(info_t2)",
        "detail": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "documentation": {}
    },
    {
        "label": "info_t2",
        "kind": 5,
        "importPath": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "description": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "peekOfCode": "info_t2 = 'my name\\tis dewei'\ninfo_v = 'my name \\vis dewei'\ninfo_a = 'my name \\ais dewei'\ninfo_b = 'my name is dewei\\b'\ninfo_r = 'my name \\ris dewei' #会把前面的字符删掉然后换行\ninfo_f = 'my name \\fis dewei'\nprint(info_n)\nprint(info_t1)\nprint(info_t2)\nprint(info_v)",
        "detail": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "documentation": {}
    },
    {
        "label": "info_v",
        "kind": 5,
        "importPath": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "description": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "peekOfCode": "info_v = 'my name \\vis dewei'\ninfo_a = 'my name \\ais dewei'\ninfo_b = 'my name is dewei\\b'\ninfo_r = 'my name \\ris dewei' #会把前面的字符删掉然后换行\ninfo_f = 'my name \\fis dewei'\nprint(info_n)\nprint(info_t1)\nprint(info_t2)\nprint(info_v)\nprint(info_a)",
        "detail": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "documentation": {}
    },
    {
        "label": "info_a",
        "kind": 5,
        "importPath": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "description": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "peekOfCode": "info_a = 'my name \\ais dewei'\ninfo_b = 'my name is dewei\\b'\ninfo_r = 'my name \\ris dewei' #会把前面的字符删掉然后换行\ninfo_f = 'my name \\fis dewei'\nprint(info_n)\nprint(info_t1)\nprint(info_t2)\nprint(info_v)\nprint(info_a)\nprint(info_b)",
        "detail": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "documentation": {}
    },
    {
        "label": "info_b",
        "kind": 5,
        "importPath": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "description": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "peekOfCode": "info_b = 'my name is dewei\\b'\ninfo_r = 'my name \\ris dewei' #会把前面的字符删掉然后换行\ninfo_f = 'my name \\fis dewei'\nprint(info_n)\nprint(info_t1)\nprint(info_t2)\nprint(info_v)\nprint(info_a)\nprint(info_b)\nprint(info_r)",
        "detail": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "documentation": {}
    },
    {
        "label": "info_r",
        "kind": 5,
        "importPath": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "description": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "peekOfCode": "info_r = 'my name \\ris dewei' #会把前面的字符删掉然后换行\ninfo_f = 'my name \\fis dewei'\nprint(info_n)\nprint(info_t1)\nprint(info_t2)\nprint(info_v)\nprint(info_a)\nprint(info_b)\nprint(info_r)\nprint(info_f)",
        "detail": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "documentation": {}
    },
    {
        "label": "info_f",
        "kind": 5,
        "importPath": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "description": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "peekOfCode": "info_f = 'my name \\fis dewei'\nprint(info_n)\nprint(info_t1)\nprint(info_t2)\nprint(info_v)\nprint(info_a)\nprint(info_b)\nprint(info_r)\nprint(info_f)\nprint('my name is \\'dewei\\'')",
        "detail": "阶段1.week02.day01.python中的特殊字符-转义字符",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 5,
        "importPath": "阶段1.week02.day01.replace的使用方法",
        "description": "阶段1.week02.day01.replace的使用方法",
        "peekOfCode": "info = ('lorem saeknfuierwafhni eu'\n        'lorem saeknfuierwafhni eu'\n        'lorem saeknfuierwafhni eu'\n        'lorem saeknfuierwafhni eu'\n        'lorem saeknfuierwafhni eu')\n# replace()还可以链式操作\nprint('hello dewei'.replace('e','a').replace('a','e'))",
        "detail": "阶段1.week02.day01.replace的使用方法",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "阶段1.week02.day01.strip的使用方法",
        "description": "阶段1.week02.day01.strip的使用方法",
        "peekOfCode": "name = '   nihao   '\nname1 = 'nihaoin'\nprint(name)\nprint(name.strip())\nprint(name1.strip('n'))",
        "detail": "阶段1.week02.day01.strip的使用方法",
        "documentation": {}
    },
    {
        "label": "name1",
        "kind": 5,
        "importPath": "阶段1.week02.day01.strip的使用方法",
        "description": "阶段1.week02.day01.strip的使用方法",
        "peekOfCode": "name1 = 'nihaoin'\nprint(name)\nprint(name.strip())\nprint(name1.strip('n'))",
        "detail": "阶段1.week02.day01.strip的使用方法",
        "documentation": {}
    },
    {
        "label": "new_name",
        "kind": 5,
        "importPath": "阶段1.week02.day01.swapcase的使用方法",
        "description": "阶段1.week02.day01.swapcase的使用方法",
        "peekOfCode": "new_name = name.swapcase()\nprint(new_name)",
        "detail": "阶段1.week02.day01.swapcase的使用方法",
        "documentation": {}
    },
    {
        "label": "new_name",
        "kind": 5,
        "importPath": "阶段1.week02.day01.upper的使用方法",
        "description": "阶段1.week02.day01.upper的使用方法",
        "peekOfCode": "new_name = name.upper();\nprint(new_name) #XIAMU 你好",
        "detail": "阶段1.week02.day01.upper的使用方法",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "阶段1.week02.day01.zfill的使用方法",
        "description": "阶段1.week02.day01.zfill的使用方法",
        "peekOfCode": "name = 'xiaomu'\nnew_name = name.zfill(10);\nprint(new_name) #0000xiaomu",
        "detail": "阶段1.week02.day01.zfill的使用方法",
        "documentation": {}
    },
    {
        "label": "new_name",
        "kind": 5,
        "importPath": "阶段1.week02.day01.zfill的使用方法",
        "description": "阶段1.week02.day01.zfill的使用方法",
        "peekOfCode": "new_name = name.zfill(10);\nprint(new_name) #0000xiaomu",
        "detail": "阶段1.week02.day01.zfill的使用方法",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 5,
        "importPath": "阶段1.week02.day01.字符串格式化",
        "description": "阶段1.week02.day01.字符串格式化",
        "peekOfCode": "books = ['python','django','flask']\ninfo = 'my name is %s, my age is %s，my book is %s'\nprint(info % ('dewei',33,books))\ndict = {\n    'a':'a',\n    'b':'b'\n}\nprint('dict is %s' % dict)\n# 字符串格式化函数format\n# string.format() 函数用来格式化字符串",
        "detail": "阶段1.week02.day01.字符串格式化",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 5,
        "importPath": "阶段1.week02.day01.字符串格式化",
        "description": "阶段1.week02.day01.字符串格式化",
        "peekOfCode": "info = 'my name is %s, my age is %s，my book is %s'\nprint(info % ('dewei',33,books))\ndict = {\n    'a':'a',\n    'b':'b'\n}\nprint('dict is %s' % dict)\n# 字符串格式化函数format\n# string.format() 函数用来格式化字符串\n# string.format(data,data,data...)",
        "detail": "阶段1.week02.day01.字符串格式化",
        "documentation": {}
    },
    {
        "label": "dict",
        "kind": 5,
        "importPath": "阶段1.week02.day01.字符串格式化",
        "description": "阶段1.week02.day01.字符串格式化",
        "peekOfCode": "dict = {\n    'a':'a',\n    'b':'b'\n}\nprint('dict is %s' % dict)\n# 字符串格式化函数format\n# string.format() 函数用来格式化字符串\n# string.format(data,data,data...)\nprint('hello {0},今天看起来气色{1}'.format('小慕','不错'))\n# python3.6加入的新格式化方案  f-strings",
        "detail": "阶段1.week02.day01.字符串格式化",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "阶段1.week02.day01.字符串格式化",
        "description": "阶段1.week02.day01.字符串格式化",
        "peekOfCode": "name = '小慕'\nprint(f'hello {name}')",
        "detail": "阶段1.week02.day01.字符串格式化",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "阶段1.week02.day01.字符串格式化的常用格式符",
        "description": "阶段1.week02.day01.字符串格式化的常用格式符",
        "peekOfCode": "number = int('123ab',16) #int('123ab',16) 后面的参数16表示要生成一个16进制的数\nprint(number) #74667\nprint('%x' % number)\nprint('-------------------')\nprint('%e' % 12536549)",
        "detail": "阶段1.week02.day01.字符串格式化的常用格式符",
        "documentation": {}
    },
    {
        "label": "names_list",
        "kind": 5,
        "importPath": "阶段1.week02.day02.01.len在列表元组中的使用",
        "description": "阶段1.week02.day02.01.len在列表元组中的使用",
        "peekOfCode": "names_list = ['xiaomu','dewei','xiaowang']\nlength = len(names_list)\nprint(length)\n# 列表元素累加,累乘\nnew_names_list = names_list+names_list\nprint('累加',new_names_list)\nnew_names_list = names_list * 2\nprint('累乘',new_names_list)\nnames_list += ['lisi']\nprint('+=',names_list)",
        "detail": "阶段1.week02.day02.01.len在列表元组中的使用",
        "documentation": {}
    },
    {
        "label": "length",
        "kind": 5,
        "importPath": "阶段1.week02.day02.01.len在列表元组中的使用",
        "description": "阶段1.week02.day02.01.len在列表元组中的使用",
        "peekOfCode": "length = len(names_list)\nprint(length)\n# 列表元素累加,累乘\nnew_names_list = names_list+names_list\nprint('累加',new_names_list)\nnew_names_list = names_list * 2\nprint('累乘',new_names_list)\nnames_list += ['lisi']\nprint('+=',names_list)\nnames_list *= 2",
        "detail": "阶段1.week02.day02.01.len在列表元组中的使用",
        "documentation": {}
    },
    {
        "label": "new_names_list",
        "kind": 5,
        "importPath": "阶段1.week02.day02.01.len在列表元组中的使用",
        "description": "阶段1.week02.day02.01.len在列表元组中的使用",
        "peekOfCode": "new_names_list = names_list+names_list\nprint('累加',new_names_list)\nnew_names_list = names_list * 2\nprint('累乘',new_names_list)\nnames_list += ['lisi']\nprint('+=',names_list)\nnames_list *= 2\nprint('*=',names_list)\nprint('------------------------------------------------------------------')\n# 元组",
        "detail": "阶段1.week02.day02.01.len在列表元组中的使用",
        "documentation": {}
    },
    {
        "label": "new_names_list",
        "kind": 5,
        "importPath": "阶段1.week02.day02.01.len在列表元组中的使用",
        "description": "阶段1.week02.day02.01.len在列表元组中的使用",
        "peekOfCode": "new_names_list = names_list * 2\nprint('累乘',new_names_list)\nnames_list += ['lisi']\nprint('+=',names_list)\nnames_list *= 2\nprint('*=',names_list)\nprint('------------------------------------------------------------------')\n# 元组\nnames_tuple = ('xiaomu','dewei','xiaowang')\nlength = len(names_tuple)",
        "detail": "阶段1.week02.day02.01.len在列表元组中的使用",
        "documentation": {}
    },
    {
        "label": "names_tuple",
        "kind": 5,
        "importPath": "阶段1.week02.day02.01.len在列表元组中的使用",
        "description": "阶段1.week02.day02.01.len在列表元组中的使用",
        "peekOfCode": "names_tuple = ('xiaomu','dewei','xiaowang')\nlength = len(names_tuple)\nprint(length)\nnew_names_tuple = names_tuple + names_tuple\nprint('累加',new_names_tuple)\nnew_names_tuple = names_tuple * 2\nprint('累乘',new_names_tuple)\nnames_tuple += ('lisi',)\nprint('+=',names_tuple)\nnames_tuple *= 2",
        "detail": "阶段1.week02.day02.01.len在列表元组中的使用",
        "documentation": {}
    },
    {
        "label": "length",
        "kind": 5,
        "importPath": "阶段1.week02.day02.01.len在列表元组中的使用",
        "description": "阶段1.week02.day02.01.len在列表元组中的使用",
        "peekOfCode": "length = len(names_tuple)\nprint(length)\nnew_names_tuple = names_tuple + names_tuple\nprint('累加',new_names_tuple)\nnew_names_tuple = names_tuple * 2\nprint('累乘',new_names_tuple)\nnames_tuple += ('lisi',)\nprint('+=',names_tuple)\nnames_tuple *= 2\nprint('*=',names_tuple)",
        "detail": "阶段1.week02.day02.01.len在列表元组中的使用",
        "documentation": {}
    },
    {
        "label": "new_names_tuple",
        "kind": 5,
        "importPath": "阶段1.week02.day02.01.len在列表元组中的使用",
        "description": "阶段1.week02.day02.01.len在列表元组中的使用",
        "peekOfCode": "new_names_tuple = names_tuple + names_tuple\nprint('累加',new_names_tuple)\nnew_names_tuple = names_tuple * 2\nprint('累乘',new_names_tuple)\nnames_tuple += ('lisi',)\nprint('+=',names_tuple)\nnames_tuple *= 2\nprint('*=',names_tuple)",
        "detail": "阶段1.week02.day02.01.len在列表元组中的使用",
        "documentation": {}
    },
    {
        "label": "new_names_tuple",
        "kind": 5,
        "importPath": "阶段1.week02.day02.01.len在列表元组中的使用",
        "description": "阶段1.week02.day02.01.len在列表元组中的使用",
        "peekOfCode": "new_names_tuple = names_tuple * 2\nprint('累乘',new_names_tuple)\nnames_tuple += ('lisi',)\nprint('+=',names_tuple)\nnames_tuple *= 2\nprint('*=',names_tuple)",
        "detail": "阶段1.week02.day02.01.len在列表元组中的使用",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "阶段1.week02.day02.02.append的使用方法",
        "description": "阶段1.week02.day02.02.append的使用方法",
        "peekOfCode": "names = ['xiaomu']\nprint(id(names))\nnames.append('dewei')\nnames.append(None)\nprint(names)\nprint(id(names))",
        "detail": "阶段1.week02.day02.02.append的使用方法",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "阶段1.week02.day02.03.insert的使用方法",
        "description": "阶段1.week02.day02.03.insert的使用方法",
        "peekOfCode": "fruits = ['苹果', '西瓜', '水蜜桃']\nfruits.insert(1,'柠檬')\nprint(fruits)",
        "detail": "阶段1.week02.day02.03.insert的使用方法",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "阶段1.week02.day02.04.count的使用方法",
        "description": "阶段1.week02.day02.04.count的使用方法",
        "peekOfCode": "fruits = ['苹果', '西瓜', '水蜜桃','西瓜']\ncount = fruits.count('西瓜')\nprint(count)\ncount = fruits.count('西')\nprint(count)\nprint('-----------------------------------')\nfruits = ('苹果', '西瓜', '水蜜桃','西瓜')\ncount = fruits.count('西瓜')\nprint(count)",
        "detail": "阶段1.week02.day02.04.count的使用方法",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "阶段1.week02.day02.04.count的使用方法",
        "description": "阶段1.week02.day02.04.count的使用方法",
        "peekOfCode": "count = fruits.count('西瓜')\nprint(count)\ncount = fruits.count('西')\nprint(count)\nprint('-----------------------------------')\nfruits = ('苹果', '西瓜', '水蜜桃','西瓜')\ncount = fruits.count('西瓜')\nprint(count)",
        "detail": "阶段1.week02.day02.04.count的使用方法",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "阶段1.week02.day02.04.count的使用方法",
        "description": "阶段1.week02.day02.04.count的使用方法",
        "peekOfCode": "count = fruits.count('西')\nprint(count)\nprint('-----------------------------------')\nfruits = ('苹果', '西瓜', '水蜜桃','西瓜')\ncount = fruits.count('西瓜')\nprint(count)",
        "detail": "阶段1.week02.day02.04.count的使用方法",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "阶段1.week02.day02.04.count的使用方法",
        "description": "阶段1.week02.day02.04.count的使用方法",
        "peekOfCode": "fruits = ('苹果', '西瓜', '水蜜桃','西瓜')\ncount = fruits.count('西瓜')\nprint(count)",
        "detail": "阶段1.week02.day02.04.count的使用方法",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "阶段1.week02.day02.04.count的使用方法",
        "description": "阶段1.week02.day02.04.count的使用方法",
        "peekOfCode": "count = fruits.count('西瓜')\nprint(count)",
        "detail": "阶段1.week02.day02.04.count的使用方法",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "阶段1.week02.day02.05.remove的使用方法与内置函数del",
        "description": "阶段1.week02.day02.05.remove的使用方法与内置函数del",
        "peekOfCode": "fruits = ['苹果', '西瓜', '水蜜桃','西瓜']\nfruits.remove('苹果')\nprint(fruits)\n# del把变量完全删除\ndel fruits\nprint(fruits)",
        "detail": "阶段1.week02.day02.05.remove的使用方法与内置函数del",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "阶段1.week02.day02.06.reverse的使用方法",
        "description": "阶段1.week02.day02.06.reverse的使用方法",
        "peekOfCode": "fruits = ['苹果', '西瓜', '水蜜桃']\nfruits.reverse()\nprint(fruits)",
        "detail": "阶段1.week02.day02.06.reverse的使用方法",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 5,
        "importPath": "阶段1.week02.day02.07.sort的使用方法",
        "description": "阶段1.week02.day02.07.sort的使用方法",
        "peekOfCode": "books = ['python','django','web','flask','tornado']\n# 按照字母顺序排列\nbooks.sort()\nprint(books)\nbooks.sort(reverse=True)\nprint(books)",
        "detail": "阶段1.week02.day02.07.sort的使用方法",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "阶段1.week02.day02.08.clear的使用方法",
        "description": "阶段1.week02.day02.08.clear的使用方法",
        "peekOfCode": "target = [1,2,3,4,5,6]\nprint(target)\ntarget.clear()\nprint(target)",
        "detail": "阶段1.week02.day02.08.clear的使用方法",
        "documentation": {}
    },
    {
        "label": "old_list",
        "kind": 5,
        "importPath": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "description": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "peekOfCode": "old_list = ['a','b','c']\nnew_list = old_list.copy()\nprint(new_list)\nprint('-------------------------------------------')\n# copy与二次赋值的区别\na=[1,2,3]\nb=a\na.append(4)\nprint(a)\nprint(b)",
        "detail": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "documentation": {}
    },
    {
        "label": "new_list",
        "kind": 5,
        "importPath": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "description": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "peekOfCode": "new_list = old_list.copy()\nprint(new_list)\nprint('-------------------------------------------')\n# copy与二次赋值的区别\na=[1,2,3]\nb=a\na.append(4)\nprint(a)\nprint(b)\n# 二次赋值的变量与原始变量享有相同的内存空间",
        "detail": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "description": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "peekOfCode": "a = [1,2,3]\nb= a.copy()\nb.append(4)\nprint(b)\nprint(a)\nprint('-------------------------------------------')\n# copy() 属于浅拷贝\n'''\n通俗的说，我们有一个列表a，列表里面的元素还是列表，当我们拷贝出新列表b\n后，无论是a还是b的内部的列表中的数据发生了变化后，相互之间都会受到影响",
        "detail": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "description": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "peekOfCode": "a = [[1,2,3],[4,5,6]]\nb = a.copy()\nprint(b)\nb[0].append(10)\n# 此时b和a都会首影响\nprint(b)\nprint(a)\nprint('-------------------------------------------')\n'''\n深拷贝不仅对第一层数据进行了copy，对深层的数据也进行了copy，",
        "detail": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "description": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "peekOfCode": "b = a.copy()\nprint(b)\nb[0].append(10)\n# 此时b和a都会首影响\nprint(b)\nprint(a)\nprint('-------------------------------------------')\n'''\n深拷贝不仅对第一层数据进行了copy，对深层的数据也进行了copy，\n原始变量和新变量完完全全并不共享数据",
        "detail": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "description": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "peekOfCode": "a = [[1,2,3],[4,5,6]]\nb = copy.deepcopy(a)\nprint(b)\nb[0].append(10)\nprint(b)\nprint(a)",
        "detail": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "description": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "peekOfCode": "b = copy.deepcopy(a)\nprint(b)\nb[0].append(10)\nprint(b)\nprint(a)",
        "detail": "阶段1.week02.day02.09.copy的使用方法深浅拷贝",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "阶段1.week02.day02.10.extend的使用方法",
        "description": "阶段1.week02.day02.10.extend的使用方法",
        "peekOfCode": "students = ['dewei','xiaomu','xiaogang']\nnew_students = ['xiaowang','xiaohong']\nstudents.extend(new_students)\n# students += new_students\nprint(students)\n# 导入元组\nhistory = []\nnew_history = ('zhonguo','meiguo')\nhistory.extend(new_history)\nprint(history)",
        "detail": "阶段1.week02.day02.10.extend的使用方法",
        "documentation": {}
    },
    {
        "label": "new_students",
        "kind": 5,
        "importPath": "阶段1.week02.day02.10.extend的使用方法",
        "description": "阶段1.week02.day02.10.extend的使用方法",
        "peekOfCode": "new_students = ['xiaowang','xiaohong']\nstudents.extend(new_students)\n# students += new_students\nprint(students)\n# 导入元组\nhistory = []\nnew_history = ('zhonguo','meiguo')\nhistory.extend(new_history)\nprint(history)\n# 导入字符串",
        "detail": "阶段1.week02.day02.10.extend的使用方法",
        "documentation": {}
    },
    {
        "label": "history",
        "kind": 5,
        "importPath": "阶段1.week02.day02.10.extend的使用方法",
        "description": "阶段1.week02.day02.10.extend的使用方法",
        "peekOfCode": "history = []\nnew_history = ('zhonguo','meiguo')\nhistory.extend(new_history)\nprint(history)\n# 导入字符串\ntest =[]\ntest.extend('abcdf') #会把字符串分割\nprint(test)\n# test.extend(1)\n# 报错不能是整型 None bool",
        "detail": "阶段1.week02.day02.10.extend的使用方法",
        "documentation": {}
    },
    {
        "label": "new_history",
        "kind": 5,
        "importPath": "阶段1.week02.day02.10.extend的使用方法",
        "description": "阶段1.week02.day02.10.extend的使用方法",
        "peekOfCode": "new_history = ('zhonguo','meiguo')\nhistory.extend(new_history)\nprint(history)\n# 导入字符串\ntest =[]\ntest.extend('abcdf') #会把字符串分割\nprint(test)\n# test.extend(1)\n# 报错不能是整型 None bool\n# 如果是字典，则只能得到key",
        "detail": "阶段1.week02.day02.10.extend的使用方法",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 5,
        "importPath": "阶段1.week02.day02.11.索引",
        "description": "阶段1.week02.day02.11.索引",
        "peekOfCode": "I = ['name']\nprint(I[0])\n# 索引用来对单个元素进行访问，切片则对一定范围内的元素进行访问\n# 切片通过冒号在中括号内把相隔的两个索引查找出来 [0:10]\n# 切片规则：左边包含，右边不包含\n# 通过切片生成不是原有的\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nprint(numbers[3:8]) #[4, 5, 6, 7, 8]\n# 获取列表完整数据\n# 左边不写默认为0，右边默认为最大",
        "detail": "阶段1.week02.day02.11.索引",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "阶段1.week02.day02.11.索引",
        "description": "阶段1.week02.day02.11.索引",
        "peekOfCode": "numbers = [1,2,3,4,5,6,7,8,9,10]\nprint(numbers[3:8]) #[4, 5, 6, 7, 8]\n# 获取列表完整数据\n# 左边不写默认为0，右边默认为最大\nprint('获取列表完整数据',numbers[:])\nprint('另一种获取完整列表的方法',numbers[0:])\n# 负数是从右边向左边数 ，最右边是-1\nprint('获取列表的方法',numbers[0:-1])\n# 列表的反序\nprint('列表的反序',numbers[::-1])",
        "detail": "阶段1.week02.day02.11.索引",
        "documentation": {}
    },
    {
        "label": "tests",
        "kind": 5,
        "importPath": "阶段1.week02.day02.11.索引",
        "description": "阶段1.week02.day02.11.索引",
        "peekOfCode": "tests = ['a','b','c']\ntests[2] = 's'\nprint(tests)\n# 两种写法都行\nnumbers[2:5] = 'a','b','c'\nnumbers[2:5] = ['a','b','c']\nprint(numbers)\n# tests[3] = '0' # 报错 超出索引\n# 列表无法通过添加新的索引的方式赋值\n# list.index(item) # 查找对应元素的索引值",
        "detail": "阶段1.week02.day02.11.索引",
        "documentation": {}
    },
    {
        "label": "tests[2]",
        "kind": 5,
        "importPath": "阶段1.week02.day02.11.索引",
        "description": "阶段1.week02.day02.11.索引",
        "peekOfCode": "tests[2] = 's'\nprint(tests)\n# 两种写法都行\nnumbers[2:5] = 'a','b','c'\nnumbers[2:5] = ['a','b','c']\nprint(numbers)\n# tests[3] = '0' # 报错 超出索引\n# 列表无法通过添加新的索引的方式赋值\n# list.index(item) # 查找对应元素的索引值\nprint(numbers.index('c'))",
        "detail": "阶段1.week02.day02.11.索引",
        "documentation": {}
    },
    {
        "label": "numbers[2:5]",
        "kind": 5,
        "importPath": "阶段1.week02.day02.11.索引",
        "description": "阶段1.week02.day02.11.索引",
        "peekOfCode": "numbers[2:5] = 'a','b','c'\nnumbers[2:5] = ['a','b','c']\nprint(numbers)\n# tests[3] = '0' # 报错 超出索引\n# 列表无法通过添加新的索引的方式赋值\n# list.index(item) # 查找对应元素的索引值\nprint(numbers.index('c'))\n# pop函数\n# 通过索引删除并获取列表的元素\n# pop_item = list.pop(index)  index: 删除列表的第几个索引",
        "detail": "阶段1.week02.day02.11.索引",
        "documentation": {}
    },
    {
        "label": "numbers[2:5]",
        "kind": 5,
        "importPath": "阶段1.week02.day02.11.索引",
        "description": "阶段1.week02.day02.11.索引",
        "peekOfCode": "numbers[2:5] = ['a','b','c']\nprint(numbers)\n# tests[3] = '0' # 报错 超出索引\n# 列表无法通过添加新的索引的方式赋值\n# list.index(item) # 查找对应元素的索引值\nprint(numbers.index('c'))\n# pop函数\n# 通过索引删除并获取列表的元素\n# pop_item = list.pop(index)  index: 删除列表的第几个索引\n# 函数会删除改索引的元素并返回",
        "detail": "阶段1.week02.day02.11.索引",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "阶段1.week02.day02.11.索引",
        "description": "阶段1.week02.day02.11.索引",
        "peekOfCode": "names = ['dewei','xiaomu','xiaoguang']\npop_item = names.pop(0)\nprint('被删除的元素为',pop_item)\nprint('删除后的数组为',names)\n# 通过del 删除索引\n# del list[index]\n# 直接删除 无返回值\n# 如果index的索引不存在则报错\ndel names[1]\nprint(names)",
        "detail": "阶段1.week02.day02.11.索引",
        "documentation": {}
    },
    {
        "label": "pop_item",
        "kind": 5,
        "importPath": "阶段1.week02.day02.11.索引",
        "description": "阶段1.week02.day02.11.索引",
        "peekOfCode": "pop_item = names.pop(0)\nprint('被删除的元素为',pop_item)\nprint('删除后的数组为',names)\n# 通过del 删除索引\n# del list[index]\n# 直接删除 无返回值\n# 如果index的索引不存在则报错\ndel names[1]\nprint(names)\n# 索引切片在元组中的特殊性",
        "detail": "阶段1.week02.day02.11.索引",
        "documentation": {}
    },
    {
        "label": "tuple_test",
        "kind": 5,
        "importPath": "阶段1.week02.day02.11.索引",
        "description": "阶段1.week02.day02.11.索引",
        "peekOfCode": "tuple_test = (1,2,3)\ndel tuple_test[0] # 报错，因为元组是不可改变的",
        "detail": "阶段1.week02.day02.11.索引",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "阶段1.week02.day02.12.字符串切片",
        "description": "阶段1.week02.day02.12.字符串切片",
        "peekOfCode": "name = 'dewei'\nprint(name[0])\nprint(name[:2])\n# 无法通过索引修改与删除 因为字符串不可修改\n# find与index函数\n# 获取元素的索引位置\n# inttype = string.index(item) item为要查找的元素 ,函数返回索引位置\n# inttype = string.find(item) item为要查找的元素 ， 函数返回索引\ninfo = 'my name is dewei'\nprint(info.index('dewei'))",
        "detail": "阶段1.week02.day02.12.字符串切片",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 5,
        "importPath": "阶段1.week02.day02.12.字符串切片",
        "description": "阶段1.week02.day02.12.字符串切片",
        "peekOfCode": "info = 'my name is dewei'\nprint(info.index('dewei'))\nprint(info.find('dewei'))\n# find 如果获取不到，返回-1\n# index 如果获取不到，直接报错\nprint(info.index('c'))\nprint(info.find('c'))",
        "detail": "阶段1.week02.day02.12.字符串切片",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "阶段1.week02.day03.01.字典添加数据的方法",
        "description": "阶段1.week02.day03.01.字典添加数据的方法",
        "peekOfCode": "value = default_dict.setdefault('name','dewei')\nprint('dict:',default_dict,'value:',value)",
        "detail": "阶段1.week02.day03.01.字典添加数据的方法",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "阶段1.week02.day03.02.keys函数的使用",
        "description": "阶段1.week02.day03.02.keys函数的使用",
        "peekOfCode": "my_dict = {'name': 'dewei','age':'33'}\nprint(my_dict.keys())\n# 得到的是伪列表 不过我们可以把它转换成列表\nkey_list = list(my_dict.keys())\nprint(key_list)\nlist = []\nlist.extend(my_dict) # 这样也可以得到key值\nprint(list)",
        "detail": "阶段1.week02.day03.02.keys函数的使用",
        "documentation": {}
    },
    {
        "label": "key_list",
        "kind": 5,
        "importPath": "阶段1.week02.day03.02.keys函数的使用",
        "description": "阶段1.week02.day03.02.keys函数的使用",
        "peekOfCode": "key_list = list(my_dict.keys())\nprint(key_list)\nlist = []\nlist.extend(my_dict) # 这样也可以得到key值\nprint(list)",
        "detail": "阶段1.week02.day03.02.keys函数的使用",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 5,
        "importPath": "阶段1.week02.day03.02.keys函数的使用",
        "description": "阶段1.week02.day03.02.keys函数的使用",
        "peekOfCode": "list = []\nlist.extend(my_dict) # 这样也可以得到key值\nprint(list)",
        "detail": "阶段1.week02.day03.02.keys函数的使用",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "阶段1.week02.day03.03.values函数的使用",
        "description": "阶段1.week02.day03.03.values函数的使用",
        "peekOfCode": "my_dict = {'name': 'dewei','age':'33'}\nprint(my_dict.values())\n# 得到的是伪列表 不过我们可以把它转换成列表\nvalue_list = list(my_dict.values())\nprint(value_list)",
        "detail": "阶段1.week02.day03.03.values函数的使用",
        "documentation": {}
    },
    {
        "label": "value_list",
        "kind": 5,
        "importPath": "阶段1.week02.day03.03.values函数的使用",
        "description": "阶段1.week02.day03.03.values函数的使用",
        "peekOfCode": "value_list = list(my_dict.values())\nprint(value_list)",
        "detail": "阶段1.week02.day03.03.values函数的使用",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "阶段1.week02.day03.04.字典key的获取",
        "description": "阶段1.week02.day03.04.字典key的获取",
        "peekOfCode": "my_dict = {'name': 'dewei','age':'33'}\nname = my_dict['name']\nprint(name)\n# get()\n# dict.get(key,default = None)\n# key：需要获取value的key\n# defalut：key不存在则返回默认值，默认是None，我们也可以自定义\nage = my_dict.get('age')\nprint(age)\n# 二者区别",
        "detail": "阶段1.week02.day03.04.字典key的获取",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "阶段1.week02.day03.04.字典key的获取",
        "description": "阶段1.week02.day03.04.字典key的获取",
        "peekOfCode": "name = my_dict['name']\nprint(name)\n# get()\n# dict.get(key,default = None)\n# key：需要获取value的key\n# defalut：key不存在则返回默认值，默认是None，我们也可以自定义\nage = my_dict.get('age')\nprint(age)\n# 二者区别\n# []如果获取的key不存在，则直接报错",
        "detail": "阶段1.week02.day03.04.字典key的获取",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "阶段1.week02.day03.04.字典key的获取",
        "description": "阶段1.week02.day03.04.字典key的获取",
        "peekOfCode": "age = my_dict.get('age')\nprint(age)\n# 二者区别\n# []如果获取的key不存在，则直接报错\n# get如果获取的key不存在，则返回默认值\n# 所以开发中，优先使用get函数\nhigh = my_dict.get('high','175')\n# high不存在，所以返回175\nprint(high)",
        "detail": "阶段1.week02.day03.04.字典key的获取",
        "documentation": {}
    },
    {
        "label": "high",
        "kind": 5,
        "importPath": "阶段1.week02.day03.04.字典key的获取",
        "description": "阶段1.week02.day03.04.字典key的获取",
        "peekOfCode": "high = my_dict.get('high','175')\n# high不存在，所以返回175\nprint(high)",
        "detail": "阶段1.week02.day03.04.字典key的获取",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "阶段1.week02.day03.05.字典的删除",
        "description": "阶段1.week02.day03.05.字典的删除",
        "peekOfCode": "my_dict = {'name': 'dewei','age':'33'}\nmy_dict.clear()\nprint(my_dict)\nprint('-----------------------------------------------')\n'''pop()'''\n# 删除字典中指定的key，并将其结果返回，如果key不存在则报错\n# value = dict.pop(key) key 要删除的键 返回被删除的value\nmy_dict = {'name': 'dewei','age':'33'}\npop_value = my_dict.pop('age')\nprint(pop_value)",
        "detail": "阶段1.week02.day03.05.字典的删除",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "阶段1.week02.day03.05.字典的删除",
        "description": "阶段1.week02.day03.05.字典的删除",
        "peekOfCode": "my_dict = {'name': 'dewei','age':'33'}\npop_value = my_dict.pop('age')\nprint(pop_value)\nprint(my_dict)\nprint('-----------------------------------------------')\n'''del'''\n# del dict['name']\nmy_dict = {'name': 'dewei','age':'33'}\ndel my_dict['name']\nprint(my_dict)",
        "detail": "阶段1.week02.day03.05.字典的删除",
        "documentation": {}
    },
    {
        "label": "pop_value",
        "kind": 5,
        "importPath": "阶段1.week02.day03.05.字典的删除",
        "description": "阶段1.week02.day03.05.字典的删除",
        "peekOfCode": "pop_value = my_dict.pop('age')\nprint(pop_value)\nprint(my_dict)\nprint('-----------------------------------------------')\n'''del'''\n# del dict['name']\nmy_dict = {'name': 'dewei','age':'33'}\ndel my_dict['name']\nprint(my_dict)",
        "detail": "阶段1.week02.day03.05.字典的删除",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "阶段1.week02.day03.05.字典的删除",
        "description": "阶段1.week02.day03.05.字典的删除",
        "peekOfCode": "my_dict = {'name': 'dewei','age':'33'}\ndel my_dict['name']\nprint(my_dict)",
        "detail": "阶段1.week02.day03.05.字典的删除",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "阶段1.week02.day03.06.字典copy",
        "description": "阶段1.week02.day03.06.字典copy",
        "peekOfCode": "my_dict = {'name': 'dewei','age':'33'}\nnew_dict = my_dict.copy()\nprint(new_dict)\nprint(id(new_dict)!=id(my_dict))",
        "detail": "阶段1.week02.day03.06.字典copy",
        "documentation": {}
    },
    {
        "label": "new_dict",
        "kind": 5,
        "importPath": "阶段1.week02.day03.06.字典copy",
        "description": "阶段1.week02.day03.06.字典copy",
        "peekOfCode": "new_dict = my_dict.copy()\nprint(new_dict)\nprint(id(new_dict)!=id(my_dict))",
        "detail": "阶段1.week02.day03.06.字典copy",
        "documentation": {}
    },
    {
        "label": "test_dict",
        "kind": 5,
        "importPath": "阶段1.week02.day03.07.字典的成员运算符",
        "description": "阶段1.week02.day03.07.字典的成员运算符",
        "peekOfCode": "test_dict = {'name':'xiaomu'}\nprint('name' in test_dict)\nprint('age' not in test_dict)\nprint('----------------------------------------')\n# get\n# 不存在默认返回None\n# key存在则返回对应value\nprint(bool(test_dict.get('name')))",
        "detail": "阶段1.week02.day03.07.字典的成员运算符",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "阶段1.week02.day03.08.字典末尾删除函数popitem",
        "description": "阶段1.week02.day03.08.字典末尾删除函数popitem",
        "peekOfCode": "my_dict = {'name': 'dewei','age':'33'}\nprint(my_dict.popitem())\nprint(my_dict)",
        "detail": "阶段1.week02.day03.08.字典末尾删除函数popitem",
        "documentation": {}
    },
    {
        "label": "a_set",
        "kind": 5,
        "importPath": "阶段1.week03.day01.01.集合",
        "description": "阶段1.week03.day01.01.集合",
        "peekOfCode": "a_set = set()           空集合\na_set = set([1,2,3])    传入列表或元组\nb_set = {1,2,3}         传入元素\nc_set = {}              错误\n'''\na = set()\nprint(a)\nprint(type(a))\nprint('---------------------------------')\nb = set(['python','django','flask'])",
        "detail": "阶段1.week03.day01.01.集合",
        "documentation": {}
    },
    {
        "label": "a_set",
        "kind": 5,
        "importPath": "阶段1.week03.day01.01.集合",
        "description": "阶段1.week03.day01.01.集合",
        "peekOfCode": "a_set = set([1,2,3])    传入列表或元组\nb_set = {1,2,3}         传入元素\nc_set = {}              错误\n'''\na = set()\nprint(a)\nprint(type(a))\nprint('---------------------------------')\nb = set(['python','django','flask'])\nprint(b)",
        "detail": "阶段1.week03.day01.01.集合",
        "documentation": {}
    },
    {
        "label": "b_set",
        "kind": 5,
        "importPath": "阶段1.week03.day01.01.集合",
        "description": "阶段1.week03.day01.01.集合",
        "peekOfCode": "b_set = {1,2,3}         传入元素\nc_set = {}              错误\n'''\na = set()\nprint(a)\nprint(type(a))\nprint('---------------------------------')\nb = set(['python','django','flask'])\nprint(b)\nprint('---------------------------------')",
        "detail": "阶段1.week03.day01.01.集合",
        "documentation": {}
    },
    {
        "label": "c_set",
        "kind": 5,
        "importPath": "阶段1.week03.day01.01.集合",
        "description": "阶段1.week03.day01.01.集合",
        "peekOfCode": "c_set = {}              错误\n'''\na = set()\nprint(a)\nprint(type(a))\nprint('---------------------------------')\nb = set(['python','django','flask'])\nprint(b)\nprint('---------------------------------')\n# c = {[1,2,3]} #报错",
        "detail": "阶段1.week03.day01.01.集合",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "阶段1.week03.day01.01.集合",
        "description": "阶段1.week03.day01.01.集合",
        "peekOfCode": "a = set()\nprint(a)\nprint(type(a))\nprint('---------------------------------')\nb = set(['python','django','flask'])\nprint(b)\nprint('---------------------------------')\n# c = {[1,2,3]} #报错\n# c = {{'name':'lisi'}} #报错\nc = {(1,2,3),1,'string'}",
        "detail": "阶段1.week03.day01.01.集合",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "阶段1.week03.day01.01.集合",
        "description": "阶段1.week03.day01.01.集合",
        "peekOfCode": "b = set(['python','django','flask'])\nprint(b)\nprint('---------------------------------')\n# c = {[1,2,3]} #报错\n# c = {{'name':'lisi'}} #报错\nc = {(1,2,3),1,'string'}\nprint(c)\nprint('---------------------------------')\nd = {}\nprint(d,type(d))",
        "detail": "阶段1.week03.day01.01.集合",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "阶段1.week03.day01.01.集合",
        "description": "阶段1.week03.day01.01.集合",
        "peekOfCode": "c = {(1,2,3),1,'string'}\nprint(c)\nprint('---------------------------------')\nd = {}\nprint(d,type(d))\nprint('---------------------------------')\n# 会自动去重\na_list = ['python','django','python','flask']\nb_set = set(a_list)\nprint(b_set)",
        "detail": "阶段1.week03.day01.01.集合",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "阶段1.week03.day01.01.集合",
        "description": "阶段1.week03.day01.01.集合",
        "peekOfCode": "d = {}\nprint(d,type(d))\nprint('---------------------------------')\n# 会自动去重\na_list = ['python','django','python','flask']\nb_set = set(a_list)\nprint(b_set)",
        "detail": "阶段1.week03.day01.01.集合",
        "documentation": {}
    },
    {
        "label": "a_list",
        "kind": 5,
        "importPath": "阶段1.week03.day01.01.集合",
        "description": "阶段1.week03.day01.01.集合",
        "peekOfCode": "a_list = ['python','django','python','flask']\nb_set = set(a_list)\nprint(b_set)",
        "detail": "阶段1.week03.day01.01.集合",
        "documentation": {}
    },
    {
        "label": "b_set",
        "kind": 5,
        "importPath": "阶段1.week03.day01.01.集合",
        "description": "阶段1.week03.day01.01.集合",
        "peekOfCode": "b_set = set(a_list)\nprint(b_set)",
        "detail": "阶段1.week03.day01.01.集合",
        "documentation": {}
    },
    {
        "label": "a_set",
        "kind": 5,
        "importPath": "阶段1.week03.day01.02.集合的增删改",
        "description": "阶段1.week03.day01.02.集合的增删改",
        "peekOfCode": "a_set = set()\na_set.add('dewei')\nprint(a_set)\n# update()\n# 加入一个新的集合(或列表、元组、字符串)，如集合内的元素在元集合中存在则无视\n# set.update(iterable) iterable: 集合，列表元组字符串\n# 可以用update代替add功能，因为add每次只能添加一个\na_set.update([3,4,5])\nprint(a_set)\n# remove()",
        "detail": "阶段1.week03.day01.02.集合的增删改",
        "documentation": {}
    },
    {
        "label": "a_set",
        "kind": 5,
        "importPath": "阶段1.week03.day01.03.集合的差集-difference函数",
        "description": "阶段1.week03.day01.03.集合的差集-difference函数",
        "peekOfCode": "a_set = {'xiaomu','name','xiaoming'}\nb_set = {'xiaoming','xiaogang','xiaohong'}\na_diff = a_set.difference(b_set)\nprint(a_diff)",
        "detail": "阶段1.week03.day01.03.集合的差集-difference函数",
        "documentation": {}
    },
    {
        "label": "b_set",
        "kind": 5,
        "importPath": "阶段1.week03.day01.03.集合的差集-difference函数",
        "description": "阶段1.week03.day01.03.集合的差集-difference函数",
        "peekOfCode": "b_set = {'xiaoming','xiaogang','xiaohong'}\na_diff = a_set.difference(b_set)\nprint(a_diff)",
        "detail": "阶段1.week03.day01.03.集合的差集-difference函数",
        "documentation": {}
    },
    {
        "label": "a_diff",
        "kind": 5,
        "importPath": "阶段1.week03.day01.03.集合的差集-difference函数",
        "description": "阶段1.week03.day01.03.集合的差集-difference函数",
        "peekOfCode": "a_diff = a_set.difference(b_set)\nprint(a_diff)",
        "detail": "阶段1.week03.day01.03.集合的差集-difference函数",
        "documentation": {}
    },
    {
        "label": "a_set",
        "kind": 5,
        "importPath": "阶段1.week03.day01.04.集合的交集",
        "description": "阶段1.week03.day01.04.集合的交集",
        "peekOfCode": "a_set = {'xiaomu','name','xiaoming'}\nb_set = {'xiaoming','xiaogang','xiaohong'}\na_inter = a_set.intersection(b_set)\nprint(a_inter)",
        "detail": "阶段1.week03.day01.04.集合的交集",
        "documentation": {}
    },
    {
        "label": "b_set",
        "kind": 5,
        "importPath": "阶段1.week03.day01.04.集合的交集",
        "description": "阶段1.week03.day01.04.集合的交集",
        "peekOfCode": "b_set = {'xiaoming','xiaogang','xiaohong'}\na_inter = a_set.intersection(b_set)\nprint(a_inter)",
        "detail": "阶段1.week03.day01.04.集合的交集",
        "documentation": {}
    },
    {
        "label": "a_inter",
        "kind": 5,
        "importPath": "阶段1.week03.day01.04.集合的交集",
        "description": "阶段1.week03.day01.04.集合的交集",
        "peekOfCode": "a_inter = a_set.intersection(b_set)\nprint(a_inter)",
        "detail": "阶段1.week03.day01.04.集合的交集",
        "documentation": {}
    },
    {
        "label": "a_set",
        "kind": 5,
        "importPath": "阶段1.week03.day01.05.集合的并集",
        "description": "阶段1.week03.day01.05.集合的并集",
        "peekOfCode": "a_set = {'xiaomu','name','xiaoming'}\nb_set = {'xiaoming','xiaogang','xiaohong'}\na_union = a_set.union(b_set)\nprint(a_union)",
        "detail": "阶段1.week03.day01.05.集合的并集",
        "documentation": {}
    },
    {
        "label": "b_set",
        "kind": 5,
        "importPath": "阶段1.week03.day01.05.集合的并集",
        "description": "阶段1.week03.day01.05.集合的并集",
        "peekOfCode": "b_set = {'xiaoming','xiaogang','xiaohong'}\na_union = a_set.union(b_set)\nprint(a_union)",
        "detail": "阶段1.week03.day01.05.集合的并集",
        "documentation": {}
    },
    {
        "label": "a_union",
        "kind": 5,
        "importPath": "阶段1.week03.day01.05.集合的并集",
        "description": "阶段1.week03.day01.05.集合的并集",
        "peekOfCode": "a_union = a_set.union(b_set)\nprint(a_union)",
        "detail": "阶段1.week03.day01.05.集合的并集",
        "documentation": {}
    },
    {
        "label": "a_set",
        "kind": 5,
        "importPath": "阶段1.week03.day01.06.判断两个集合中是否有相同的元素",
        "description": "阶段1.week03.day01.06.判断两个集合中是否有相同的元素",
        "peekOfCode": "a_set = {'xiaomu','name','xiaoming'}\nb_set = {'xiaoming','xiaogang','xiaohong'}\nresult = a_set.isdisjoint(b_set)\nprint(result)",
        "detail": "阶段1.week03.day01.06.判断两个集合中是否有相同的元素",
        "documentation": {}
    },
    {
        "label": "b_set",
        "kind": 5,
        "importPath": "阶段1.week03.day01.06.判断两个集合中是否有相同的元素",
        "description": "阶段1.week03.day01.06.判断两个集合中是否有相同的元素",
        "peekOfCode": "b_set = {'xiaoming','xiaogang','xiaohong'}\nresult = a_set.isdisjoint(b_set)\nprint(result)",
        "detail": "阶段1.week03.day01.06.判断两个集合中是否有相同的元素",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week03.day01.06.判断两个集合中是否有相同的元素",
        "description": "阶段1.week03.day01.06.判断两个集合中是否有相同的元素",
        "peekOfCode": "result = a_set.isdisjoint(b_set)\nprint(result)",
        "detail": "阶段1.week03.day01.06.判断两个集合中是否有相同的元素",
        "documentation": {}
    },
    {
        "label": "info_list",
        "kind": 5,
        "importPath": "阶段1.week03.day02.02.字符串与列表的转换",
        "description": "阶段1.week03.day02.02.字符串与列表的转换",
        "peekOfCode": "info_list = info.split()\nprint(info_list)\na='abc'\nprint(a.split())\nb='a,b,c'\nprint(b.split(','))\nc='a|b|c|d'\nprint(c.split('|',1))\n'''列表转字符串的函数--join'''\n# 将列表以一定的规则转成字符串",
        "detail": "阶段1.week03.day02.02.字符串与列表的转换",
        "documentation": {}
    },
    {
        "label": "new_str2",
        "kind": 5,
        "importPath": "阶段1.week03.day02.02.字符串与列表的转换",
        "description": "阶段1.week03.day02.02.字符串与列表的转换",
        "peekOfCode": "new_str2 = '|'.join(test)\nprint(new_str1)\nprint(new_str2)\nsort_str ='a b d f m i p q c'\nsort_list = sort_str.split()\nprint(sort_list)\nsort_list.sort()\nprint(sort_list)\nsort_str =''.join(sort_list)\nprint(sort_str)",
        "detail": "阶段1.week03.day02.02.字符串与列表的转换",
        "documentation": {}
    },
    {
        "label": "sort_list",
        "kind": 5,
        "importPath": "阶段1.week03.day02.02.字符串与列表的转换",
        "description": "阶段1.week03.day02.02.字符串与列表的转换",
        "peekOfCode": "sort_list = sort_str.split()\nprint(sort_list)\nsort_list.sort()\nprint(sort_list)\nsort_str =''.join(sort_list)\nprint(sort_str)\n# sorted()函数可以直接把字符串转换成列表并排序\nsort_str_new ='abdfmipqc'\nres = sorted(sort_str_new)\nprint(res)",
        "detail": "阶段1.week03.day02.02.字符串与列表的转换",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "阶段1.week03.day02.02.字符串与列表的转换",
        "description": "阶段1.week03.day02.02.字符串与列表的转换",
        "peekOfCode": "res = sorted(sort_str_new)\nprint(res)",
        "detail": "阶段1.week03.day02.02.字符串与列表的转换",
        "documentation": {}
    },
    {
        "label": "bt",
        "kind": 5,
        "importPath": "阶段1.week03.day02.03.字符串与bytes的转换",
        "description": "阶段1.week03.day02.03.字符串与bytes的转换",
        "peekOfCode": "bt = b'my name is dewei'\nprint(bt,type(bt))\nprint(bt.capitalize())\n# print(bt.replace('xiaomu','dewei'))会报错\nprint(bt.replace(b'dewei',b'xiaomu'))#不会报错\nprint(bt[0])# 把对应字符转换为二进制位然后输出\nprint(bt[:3])\nprint(bt.find(b'm'))\n'''dir内置函数 返回对象拥有的所有函数'''\nprint(dir(bt))",
        "detail": "阶段1.week03.day02.03.字符串与bytes的转换",
        "documentation": {}
    },
    {
        "label": "byte_data",
        "kind": 5,
        "importPath": "阶段1.week03.day02.03.字符串与bytes的转换",
        "description": "阶段1.week03.day02.03.字符串与bytes的转换",
        "peekOfCode": "byte_data = b'python is a good code'\nstr_data = byte_data.decode('utf-8')\nprint(str_data)\n# 所以上面的问题可以这样解决\nc = 'hello 小慕'\nd = c.encode()\nprint(d,type(d))\nprint(d.decode(),type(d.decode()))",
        "detail": "阶段1.week03.day02.03.字符串与bytes的转换",
        "documentation": {}
    },
    {
        "label": "str_data",
        "kind": 5,
        "importPath": "阶段1.week03.day02.03.字符串与bytes的转换",
        "description": "阶段1.week03.day02.03.字符串与bytes的转换",
        "peekOfCode": "str_data = byte_data.decode('utf-8')\nprint(str_data)\n# 所以上面的问题可以这样解决\nc = 'hello 小慕'\nd = c.encode()\nprint(d,type(d))\nprint(d.decode(),type(d.decode()))",
        "detail": "阶段1.week03.day02.03.字符串与bytes的转换",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "阶段1.week03.day02.03.字符串与bytes的转换",
        "description": "阶段1.week03.day02.03.字符串与bytes的转换",
        "peekOfCode": "c = 'hello 小慕'\nd = c.encode()\nprint(d,type(d))\nprint(d.decode(),type(d.decode()))",
        "detail": "阶段1.week03.day02.03.字符串与bytes的转换",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "阶段1.week03.day02.03.字符串与bytes的转换",
        "description": "阶段1.week03.day02.03.字符串与bytes的转换",
        "peekOfCode": "d = c.encode()\nprint(d,type(d))\nprint(d.decode(),type(d.decode()))",
        "detail": "阶段1.week03.day02.03.字符串与bytes的转换",
        "documentation": {}
    },
    {
        "label": "work",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "work = {}\n# 1\none_value = (1,)\none_key = 1\nwork[str(one_key)] = one_value\nprint(work)\n# 2\ntwo_key = 2\ntwo_value = []\ntwo_value.append(1)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "one_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "one_value = (1,)\none_key = 1\nwork[str(one_key)] = one_value\nprint(work)\n# 2\ntwo_key = 2\ntwo_value = []\ntwo_value.append(1)\ntwo_value.append(2)\nwork[str(two_key)] = two_value",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "one_key",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "one_key = 1\nwork[str(one_key)] = one_value\nprint(work)\n# 2\ntwo_key = 2\ntwo_value = []\ntwo_value.append(1)\ntwo_value.append(2)\nwork[str(two_key)] = two_value\n# 3",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "work[str(one_key)]",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "work[str(one_key)] = one_value\nprint(work)\n# 2\ntwo_key = 2\ntwo_value = []\ntwo_value.append(1)\ntwo_value.append(2)\nwork[str(two_key)] = two_value\n# 3\nthree_key = 3",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "two_key",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "two_key = 2\ntwo_value = []\ntwo_value.append(1)\ntwo_value.append(2)\nwork[str(two_key)] = two_value\n# 3\nthree_key = 3\nthree_value = []\nthree_value.append(1)\nthree_value.append(2)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "two_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "two_value = []\ntwo_value.append(1)\ntwo_value.append(2)\nwork[str(two_key)] = two_value\n# 3\nthree_key = 3\nthree_value = []\nthree_value.append(1)\nthree_value.append(2)\nthree_value.append(3)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "work[str(two_key)]",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "work[str(two_key)] = two_value\n# 3\nthree_key = 3\nthree_value = []\nthree_value.append(1)\nthree_value.append(2)\nthree_value.append(3)\nwork[str(three_key)] = three_value\n# 4\nfour_key = 4",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "three_key",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "three_key = 3\nthree_value = []\nthree_value.append(1)\nthree_value.append(2)\nthree_value.append(3)\nwork[str(three_key)] = three_value\n# 4\nfour_key = 4\nfour_value = []\nfour_value.append(1)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "three_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "three_value = []\nthree_value.append(1)\nthree_value.append(2)\nthree_value.append(3)\nwork[str(three_key)] = three_value\n# 4\nfour_key = 4\nfour_value = []\nfour_value.append(1)\nfour_value.append(2)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "work[str(three_key)]",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "work[str(three_key)] = three_value\n# 4\nfour_key = 4\nfour_value = []\nfour_value.append(1)\nfour_value.append(2)\nfour_value.append(3)\nfour_value.append(4)\nwork[str(four_key)] = four_value\ntemp_five = (1, 2, 3, 4, 5)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "four_key",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "four_key = 4\nfour_value = []\nfour_value.append(1)\nfour_value.append(2)\nfour_value.append(3)\nfour_value.append(4)\nwork[str(four_key)] = four_value\ntemp_five = (1, 2, 3, 4, 5)\nfive_key = 5\nfive_value = []",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "four_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "four_value = []\nfour_value.append(1)\nfour_value.append(2)\nfour_value.append(3)\nfour_value.append(4)\nwork[str(four_key)] = four_value\ntemp_five = (1, 2, 3, 4, 5)\nfive_key = 5\nfive_value = []\n# 把temp_five中的元素导入到five——value中",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "work[str(four_key)]",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "work[str(four_key)] = four_value\ntemp_five = (1, 2, 3, 4, 5)\nfive_key = 5\nfive_value = []\n# 把temp_five中的元素导入到five——value中\nfive_value.extend(temp_five)\nwork[str(five_key)] = five_value\nprint(work)\n# 6\ntemp_six = [1, 2, 3, 4, 5, 6]",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "temp_five",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "temp_five = (1, 2, 3, 4, 5)\nfive_key = 5\nfive_value = []\n# 把temp_five中的元素导入到five——value中\nfive_value.extend(temp_five)\nwork[str(five_key)] = five_value\nprint(work)\n# 6\ntemp_six = [1, 2, 3, 4, 5, 6]\nsix_key = 6",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "five_key",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "five_key = 5\nfive_value = []\n# 把temp_five中的元素导入到five——value中\nfive_value.extend(temp_five)\nwork[str(five_key)] = five_value\nprint(work)\n# 6\ntemp_six = [1, 2, 3, 4, 5, 6]\nsix_key = 6\nsix_value = []",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "five_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "five_value = []\n# 把temp_five中的元素导入到five——value中\nfive_value.extend(temp_five)\nwork[str(five_key)] = five_value\nprint(work)\n# 6\ntemp_six = [1, 2, 3, 4, 5, 6]\nsix_key = 6\nsix_value = []\nsix_value.extend(temp_six)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "work[str(five_key)]",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "work[str(five_key)] = five_value\nprint(work)\n# 6\ntemp_six = [1, 2, 3, 4, 5, 6]\nsix_key = 6\nsix_value = []\nsix_value.extend(temp_six)\nwork[str(six_key)] = six_value\n# 7\n# 定义一个集合",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "temp_six",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "temp_six = [1, 2, 3, 4, 5, 6]\nsix_key = 6\nsix_value = []\nsix_value.extend(temp_six)\nwork[str(six_key)] = six_value\n# 7\n# 定义一个集合\ntemp_seven = {1, 2, 3, 4, 5, 6, 7}\nseven_key = 7\nseven_value = []",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "six_key",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "six_key = 6\nsix_value = []\nsix_value.extend(temp_six)\nwork[str(six_key)] = six_value\n# 7\n# 定义一个集合\ntemp_seven = {1, 2, 3, 4, 5, 6, 7}\nseven_key = 7\nseven_value = []\nseven_value.extend(temp_seven)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "six_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "six_value = []\nsix_value.extend(temp_six)\nwork[str(six_key)] = six_value\n# 7\n# 定义一个集合\ntemp_seven = {1, 2, 3, 4, 5, 6, 7}\nseven_key = 7\nseven_value = []\nseven_value.extend(temp_seven)\nwork[str(seven_key)] = seven_value",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "work[str(six_key)]",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "work[str(six_key)] = six_value\n# 7\n# 定义一个集合\ntemp_seven = {1, 2, 3, 4, 5, 6, 7}\nseven_key = 7\nseven_value = []\nseven_value.extend(temp_seven)\nwork[str(seven_key)] = seven_value\n# 8\ntemp_eight = [1, 2, 3, 4, 5, 6, 7, 8]",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "temp_seven",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "temp_seven = {1, 2, 3, 4, 5, 6, 7}\nseven_key = 7\nseven_value = []\nseven_value.extend(temp_seven)\nwork[str(seven_key)] = seven_value\n# 8\ntemp_eight = [1, 2, 3, 4, 5, 6, 7, 8]\neight_key = 8\neight_value = []\neight_value.extend(temp_eight)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "seven_key",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "seven_key = 7\nseven_value = []\nseven_value.extend(temp_seven)\nwork[str(seven_key)] = seven_value\n# 8\ntemp_eight = [1, 2, 3, 4, 5, 6, 7, 8]\neight_key = 8\neight_value = []\neight_value.extend(temp_eight)\neight_key = str(eight_key)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "seven_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "seven_value = []\nseven_value.extend(temp_seven)\nwork[str(seven_key)] = seven_value\n# 8\ntemp_eight = [1, 2, 3, 4, 5, 6, 7, 8]\neight_key = 8\neight_value = []\neight_value.extend(temp_eight)\neight_key = str(eight_key)\nwork[eight_key] = eight_value",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "work[str(seven_key)]",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "work[str(seven_key)] = seven_value\n# 8\ntemp_eight = [1, 2, 3, 4, 5, 6, 7, 8]\neight_key = 8\neight_value = []\neight_value.extend(temp_eight)\neight_key = str(eight_key)\nwork[eight_key] = eight_value\n# 9\ntemp_nine = (1, 2, 3, 4, 5, 6, 7, 8, 9)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "temp_eight",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "temp_eight = [1, 2, 3, 4, 5, 6, 7, 8]\neight_key = 8\neight_value = []\neight_value.extend(temp_eight)\neight_key = str(eight_key)\nwork[eight_key] = eight_value\n# 9\ntemp_nine = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nnine_key = 9\nnine_value = list(temp_nine)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "eight_key",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "eight_key = 8\neight_value = []\neight_value.extend(temp_eight)\neight_key = str(eight_key)\nwork[eight_key] = eight_value\n# 9\ntemp_nine = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nnine_key = 9\nnine_value = list(temp_nine)\nnine_key = str(nine_key)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "eight_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "eight_value = []\neight_value.extend(temp_eight)\neight_key = str(eight_key)\nwork[eight_key] = eight_value\n# 9\ntemp_nine = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nnine_key = 9\nnine_value = list(temp_nine)\nnine_key = str(nine_key)\nwork.update({nine_key: nine_value})",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "eight_key",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "eight_key = str(eight_key)\nwork[eight_key] = eight_value\n# 9\ntemp_nine = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nnine_key = 9\nnine_value = list(temp_nine)\nnine_key = str(nine_key)\nwork.update({nine_key: nine_value})\nprint(work)\n# 得到所有的索引",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "work[eight_key]",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "work[eight_key] = eight_value\n# 9\ntemp_nine = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nnine_key = 9\nnine_value = list(temp_nine)\nnine_key = str(nine_key)\nwork.update({nine_key: nine_value})\nprint(work)\n# 得到所有的索引\n_keys = work.keys()",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "temp_nine",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "temp_nine = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nnine_key = 9\nnine_value = list(temp_nine)\nnine_key = str(nine_key)\nwork.update({nine_key: nine_value})\nprint(work)\n# 得到所有的索引\n_keys = work.keys()\nkeys = list(_keys)\nprint(keys)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "nine_key",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "nine_key = 9\nnine_value = list(temp_nine)\nnine_key = str(nine_key)\nwork.update({nine_key: nine_value})\nprint(work)\n# 得到所有的索引\n_keys = work.keys()\nkeys = list(_keys)\nprint(keys)\none = keys[0]",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "nine_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "nine_value = list(temp_nine)\nnine_key = str(nine_key)\nwork.update({nine_key: nine_value})\nprint(work)\n# 得到所有的索引\n_keys = work.keys()\nkeys = list(_keys)\nprint(keys)\none = keys[0]\n# 给定要删除的key，返回被删除的值",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "nine_key",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "nine_key = str(nine_key)\nwork.update({nine_key: nine_value})\nprint(work)\n# 得到所有的索引\n_keys = work.keys()\nkeys = list(_keys)\nprint(keys)\none = keys[0]\n# 给定要删除的key，返回被删除的值\none_value = work.pop(one)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "_keys",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "_keys = work.keys()\nkeys = list(_keys)\nprint(keys)\none = keys[0]\n# 给定要删除的key，返回被删除的值\none_value = work.pop(one)\nprint(one, one_value)\none_key = int(one)\nprint('{} * {} = {}'.format(one_key, one_value[0], one_key * one_value[0]))\ntwo = keys[1]",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "keys = list(_keys)\nprint(keys)\none = keys[0]\n# 给定要删除的key，返回被删除的值\none_value = work.pop(one)\nprint(one, one_value)\none_key = int(one)\nprint('{} * {} = {}'.format(one_key, one_value[0], one_key * one_value[0]))\ntwo = keys[1]\ntwo_value = work.pop(two)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "one",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "one = keys[0]\n# 给定要删除的key，返回被删除的值\none_value = work.pop(one)\nprint(one, one_value)\none_key = int(one)\nprint('{} * {} = {}'.format(one_key, one_value[0], one_key * one_value[0]))\ntwo = keys[1]\ntwo_value = work.pop(two)\nprint('{} * {} = {}'.format(two, two_value[0], int(two) * two_value[0]), end=' ')\nprint('{} * {} = {}'.format(two, two_value[1], int(two) * two_value[1]))",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "one_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "one_value = work.pop(one)\nprint(one, one_value)\none_key = int(one)\nprint('{} * {} = {}'.format(one_key, one_value[0], one_key * one_value[0]))\ntwo = keys[1]\ntwo_value = work.pop(two)\nprint('{} * {} = {}'.format(two, two_value[0], int(two) * two_value[0]), end=' ')\nprint('{} * {} = {}'.format(two, two_value[1], int(two) * two_value[1]))\nthree = keys[2]\nthree_value = work.pop(three)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "one_key",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "one_key = int(one)\nprint('{} * {} = {}'.format(one_key, one_value[0], one_key * one_value[0]))\ntwo = keys[1]\ntwo_value = work.pop(two)\nprint('{} * {} = {}'.format(two, two_value[0], int(two) * two_value[0]), end=' ')\nprint('{} * {} = {}'.format(two, two_value[1], int(two) * two_value[1]))\nthree = keys[2]\nthree_value = work.pop(three)\nprint('{} * {} = {}'.format(three, three_value[0], int(three) * three_value[0]), end=' ')\nprint('{} * {} = {}'.format(three, three_value[1], int(three) * three_value[1]), end=' ')",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "two",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "two = keys[1]\ntwo_value = work.pop(two)\nprint('{} * {} = {}'.format(two, two_value[0], int(two) * two_value[0]), end=' ')\nprint('{} * {} = {}'.format(two, two_value[1], int(two) * two_value[1]))\nthree = keys[2]\nthree_value = work.pop(three)\nprint('{} * {} = {}'.format(three, three_value[0], int(three) * three_value[0]), end=' ')\nprint('{} * {} = {}'.format(three, three_value[1], int(three) * three_value[1]), end=' ')\nprint('{} * {} = {}'.format(three, three_value[2], int(three) * three_value[2]))\nfour = keys[3]",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "two_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "two_value = work.pop(two)\nprint('{} * {} = {}'.format(two, two_value[0], int(two) * two_value[0]), end=' ')\nprint('{} * {} = {}'.format(two, two_value[1], int(two) * two_value[1]))\nthree = keys[2]\nthree_value = work.pop(three)\nprint('{} * {} = {}'.format(three, three_value[0], int(three) * three_value[0]), end=' ')\nprint('{} * {} = {}'.format(three, three_value[1], int(three) * three_value[1]), end=' ')\nprint('{} * {} = {}'.format(three, three_value[2], int(three) * three_value[2]))\nfour = keys[3]\nfour_value = work.pop(four)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "three",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "three = keys[2]\nthree_value = work.pop(three)\nprint('{} * {} = {}'.format(three, three_value[0], int(three) * three_value[0]), end=' ')\nprint('{} * {} = {}'.format(three, three_value[1], int(three) * three_value[1]), end=' ')\nprint('{} * {} = {}'.format(three, three_value[2], int(three) * three_value[2]))\nfour = keys[3]\nfour_value = work.pop(four)\nprint('{} * {} = {}'.format(four, four_value[0], int(four) * four_value[0]), end=' ')\nprint('{} * {} = {}'.format(four, four_value[1], int(four) * four_value[1]), end=' ')\nprint('{} * {} = {}'.format(four, four_value[2], int(four) * four_value[2]), end=' ')",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "three_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "three_value = work.pop(three)\nprint('{} * {} = {}'.format(three, three_value[0], int(three) * three_value[0]), end=' ')\nprint('{} * {} = {}'.format(three, three_value[1], int(three) * three_value[1]), end=' ')\nprint('{} * {} = {}'.format(three, three_value[2], int(three) * three_value[2]))\nfour = keys[3]\nfour_value = work.pop(four)\nprint('{} * {} = {}'.format(four, four_value[0], int(four) * four_value[0]), end=' ')\nprint('{} * {} = {}'.format(four, four_value[1], int(four) * four_value[1]), end=' ')\nprint('{} * {} = {}'.format(four, four_value[2], int(four) * four_value[2]), end=' ')\nprint('{} * {} = {}'.format(four, four_value[-1], int(four) * four_value[-1]))",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "four",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "four = keys[3]\nfour_value = work.pop(four)\nprint('{} * {} = {}'.format(four, four_value[0], int(four) * four_value[0]), end=' ')\nprint('{} * {} = {}'.format(four, four_value[1], int(four) * four_value[1]), end=' ')\nprint('{} * {} = {}'.format(four, four_value[2], int(four) * four_value[2]), end=' ')\nprint('{} * {} = {}'.format(four, four_value[-1], int(four) * four_value[-1]))\nfive = keys[4]\nfive_value = work.pop(five)\nprint('%s * %s = %s' % (five, five_value[0], int(five) * five_value[0]), end=' ')\nprint('%s * %s = %s' % (five, five_value[1], int(five) * five_value[1]), end=' ')",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "four_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "four_value = work.pop(four)\nprint('{} * {} = {}'.format(four, four_value[0], int(four) * four_value[0]), end=' ')\nprint('{} * {} = {}'.format(four, four_value[1], int(four) * four_value[1]), end=' ')\nprint('{} * {} = {}'.format(four, four_value[2], int(four) * four_value[2]), end=' ')\nprint('{} * {} = {}'.format(four, four_value[-1], int(four) * four_value[-1]))\nfive = keys[4]\nfive_value = work.pop(five)\nprint('%s * %s = %s' % (five, five_value[0], int(five) * five_value[0]), end=' ')\nprint('%s * %s = %s' % (five, five_value[1], int(five) * five_value[1]), end=' ')\nprint('%s * %s = %d' % (five, five_value[2], int(five) * five_value[2]), end=' ')",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "five",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "five = keys[4]\nfive_value = work.pop(five)\nprint('%s * %s = %s' % (five, five_value[0], int(five) * five_value[0]), end=' ')\nprint('%s * %s = %s' % (five, five_value[1], int(five) * five_value[1]), end=' ')\nprint('%s * %s = %d' % (five, five_value[2], int(five) * five_value[2]), end=' ')\nprint('%s * %s = %d' % (five, five_value[3], int(five) * five_value[3]), end=' ')\nprint('%s * %s = %d' % (five, five_value[-1], int(five) * five_value[-1]))\nsix = keys[5]\nsix_value = work.pop(six)\nprint('%s * %s = %s' % (six, six_value[0], int(six) * six_value[0]), end=' ')",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "five_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "five_value = work.pop(five)\nprint('%s * %s = %s' % (five, five_value[0], int(five) * five_value[0]), end=' ')\nprint('%s * %s = %s' % (five, five_value[1], int(five) * five_value[1]), end=' ')\nprint('%s * %s = %d' % (five, five_value[2], int(five) * five_value[2]), end=' ')\nprint('%s * %s = %d' % (five, five_value[3], int(five) * five_value[3]), end=' ')\nprint('%s * %s = %d' % (five, five_value[-1], int(five) * five_value[-1]))\nsix = keys[5]\nsix_value = work.pop(six)\nprint('%s * %s = %s' % (six, six_value[0], int(six) * six_value[0]), end=' ')\nprint('%s * %s = %s' % (six, six_value[1], int(six) * six_value[1]), end=' ')",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "six",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "six = keys[5]\nsix_value = work.pop(six)\nprint('%s * %s = %s' % (six, six_value[0], int(six) * six_value[0]), end=' ')\nprint('%s * %s = %s' % (six, six_value[1], int(six) * six_value[1]), end=' ')\nprint('%s * %s = %s' % (six, six_value[2], int(six) * six_value[2]), end=' ')\nprint('{} * {} = {}'.format(six, six_value[3], int(six) * six_value[3]), end=' ')\nprint('{} * {} = {}'.format(six, six_value[4], int(six) * six_value[4]), end=' ')\nprint('{} * {} = {}'.format(six, six_value[5], int(six) * six_value[5]))\nseven = keys[6]\nseven_value = work.pop(seven)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "six_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "six_value = work.pop(six)\nprint('%s * %s = %s' % (six, six_value[0], int(six) * six_value[0]), end=' ')\nprint('%s * %s = %s' % (six, six_value[1], int(six) * six_value[1]), end=' ')\nprint('%s * %s = %s' % (six, six_value[2], int(six) * six_value[2]), end=' ')\nprint('{} * {} = {}'.format(six, six_value[3], int(six) * six_value[3]), end=' ')\nprint('{} * {} = {}'.format(six, six_value[4], int(six) * six_value[4]), end=' ')\nprint('{} * {} = {}'.format(six, six_value[5], int(six) * six_value[5]))\nseven = keys[6]\nseven_value = work.pop(seven)\nprint('{} * {} = {}'.format(seven, seven_value[0], int(seven) * seven_value[0]), end=' ')",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "seven",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "seven = keys[6]\nseven_value = work.pop(seven)\nprint('{} * {} = {}'.format(seven, seven_value[0], int(seven) * seven_value[0]), end=' ')\nprint('{} * {} = {}'.format(seven, seven_value[1], int(seven) * seven_value[1]), end=' ')\nprint('{} * {} = {}'.format(seven, seven_value[2], int(seven) * seven_value[2]), end=' ')\nprint('{} * {} = {}'.format(seven, seven_value[3], int(seven) * seven_value[3]), end=' ')\nprint('{} * {} = {}'.format(seven, seven_value[4], int(seven) * seven_value[4]), end=' ')\nprint('{} * {} = {}'.format(seven, seven_value[5], int(seven) * seven_value[5]), end=' ')\nprint('{} * {} = {}'.format(seven, seven_value[6], int(seven) * seven_value[6]))\neight = keys[7]",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "seven_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "seven_value = work.pop(seven)\nprint('{} * {} = {}'.format(seven, seven_value[0], int(seven) * seven_value[0]), end=' ')\nprint('{} * {} = {}'.format(seven, seven_value[1], int(seven) * seven_value[1]), end=' ')\nprint('{} * {} = {}'.format(seven, seven_value[2], int(seven) * seven_value[2]), end=' ')\nprint('{} * {} = {}'.format(seven, seven_value[3], int(seven) * seven_value[3]), end=' ')\nprint('{} * {} = {}'.format(seven, seven_value[4], int(seven) * seven_value[4]), end=' ')\nprint('{} * {} = {}'.format(seven, seven_value[5], int(seven) * seven_value[5]), end=' ')\nprint('{} * {} = {}'.format(seven, seven_value[6], int(seven) * seven_value[6]))\neight = keys[7]\neight_value = work.pop(eight)",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "eight",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "eight = keys[7]\neight_value = work.pop(eight)\nprint('{} * {} = {}'.format(eight, eight_value[0], int(eight) * eight_value[0]), end=' ')\nprint('{} * {} = {}'.format(eight, eight_value[1], int(eight) * eight_value[1]), end=' ')\nprint('{} * {} = {}'.format(eight, eight_value[2], int(eight) * eight_value[2]), end=' ')\nprint('{} * {} = {}'.format(eight, eight_value[3], int(eight) * eight_value[3]), end=' ')\nprint('{} * {} = {}'.format(eight, eight_value[4], int(eight) * eight_value[4]), end=' ')\nprint('{} * {} = {}'.format(eight, eight_value[5], int(eight) * eight_value[5]), end=' ')\nprint('{} * {} = {}'.format(eight, eight_value[6], int(eight) * eight_value[6]), end=' ')\nprint('{} * {} = {}'.format(eight, eight_value[7], int(eight) * eight_value[7]))",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "eight_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "eight_value = work.pop(eight)\nprint('{} * {} = {}'.format(eight, eight_value[0], int(eight) * eight_value[0]), end=' ')\nprint('{} * {} = {}'.format(eight, eight_value[1], int(eight) * eight_value[1]), end=' ')\nprint('{} * {} = {}'.format(eight, eight_value[2], int(eight) * eight_value[2]), end=' ')\nprint('{} * {} = {}'.format(eight, eight_value[3], int(eight) * eight_value[3]), end=' ')\nprint('{} * {} = {}'.format(eight, eight_value[4], int(eight) * eight_value[4]), end=' ')\nprint('{} * {} = {}'.format(eight, eight_value[5], int(eight) * eight_value[5]), end=' ')\nprint('{} * {} = {}'.format(eight, eight_value[6], int(eight) * eight_value[6]), end=' ')\nprint('{} * {} = {}'.format(eight, eight_value[7], int(eight) * eight_value[7]))\nnine = keys[-1]",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "nine",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "nine = keys[-1]\nnine_value = work.get(nine)\nformat_str = '{} * {} = {}'\nprint(format_str.format(nine, nine_value[0], int(nine) * nine_value[0]), end=' ')\nprint(format_str.format(nine, nine_value[1], int(nine) * nine_value[1]), end=' ')\nprint(format_str.format(nine, nine_value[2], int(nine) * nine_value[2]), end=' ')\nprint(format_str.format(nine, nine_value[3], int(nine) * nine_value[3]), end=' ')\nprint(format_str.format(nine, nine_value[4], int(nine) * nine_value[4]), end=' ')\nprint(format_str.format(nine, nine_value[5], int(nine) * nine_value[5]), end=' ')\nprint(format_str.format(nine, nine_value[6], int(nine) * nine_value[6]), end=' ')",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "nine_value",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "nine_value = work.get(nine)\nformat_str = '{} * {} = {}'\nprint(format_str.format(nine, nine_value[0], int(nine) * nine_value[0]), end=' ')\nprint(format_str.format(nine, nine_value[1], int(nine) * nine_value[1]), end=' ')\nprint(format_str.format(nine, nine_value[2], int(nine) * nine_value[2]), end=' ')\nprint(format_str.format(nine, nine_value[3], int(nine) * nine_value[3]), end=' ')\nprint(format_str.format(nine, nine_value[4], int(nine) * nine_value[4]), end=' ')\nprint(format_str.format(nine, nine_value[5], int(nine) * nine_value[5]), end=' ')\nprint(format_str.format(nine, nine_value[6], int(nine) * nine_value[6]), end=' ')\nprint(format_str.format(nine, nine_value[7], int(nine) * nine_value[7]), end=' ')",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "format_str",
        "kind": 5,
        "importPath": "阶段1.week03.day02.test",
        "description": "阶段1.week03.day02.test",
        "peekOfCode": "format_str = '{} * {} = {}'\nprint(format_str.format(nine, nine_value[0], int(nine) * nine_value[0]), end=' ')\nprint(format_str.format(nine, nine_value[1], int(nine) * nine_value[1]), end=' ')\nprint(format_str.format(nine, nine_value[2], int(nine) * nine_value[2]), end=' ')\nprint(format_str.format(nine, nine_value[3], int(nine) * nine_value[3]), end=' ')\nprint(format_str.format(nine, nine_value[4], int(nine) * nine_value[4]), end=' ')\nprint(format_str.format(nine, nine_value[5], int(nine) * nine_value[5]), end=' ')\nprint(format_str.format(nine, nine_value[6], int(nine) * nine_value[6]), end=' ')\nprint(format_str.format(nine, nine_value[7], int(nine) * nine_value[7]), end=' ')\nprint(format_str.format(nine, nine_value[-1], int(nine) * nine_value[-1]))",
        "detail": "阶段1.week03.day02.test",
        "documentation": {}
    },
    {
        "label": "dewei_status",
        "kind": 5,
        "importPath": "阶段1.week03.day03.01.if",
        "description": "阶段1.week03.day03.01.if",
        "peekOfCode": "dewei_status = 'hunger'\nif dewei_status == 'hunger':\n    print('Xiaomu invites Dewei to dinner')",
        "detail": "阶段1.week03.day03.01.if",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "阶段1.week03.day03.04.循环",
        "description": "阶段1.week03.day03.04.循环",
        "peekOfCode": "l = ['dewei','xiaomu','xiaoman','xiaoming']\nfor item in l:\n    print(item)\nprint('-------------------------------------------------')   \nfor i in 'python':\n    print(i)\nprint('-------------------------------------------------')\nt = ('dewei','xiaomu','xiaoman','xiaoming')\nfor name in t:\n    print(name)",
        "detail": "阶段1.week03.day03.04.循环",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "阶段1.week03.day03.04.循环",
        "description": "阶段1.week03.day03.04.循环",
        "peekOfCode": "t = ('dewei','xiaomu','xiaoman','xiaoming')\nfor name in t:\n    print(name)\nprint('-------------------------------------------------') \nusers ={\"name\":'dewei','age':33}\nfor key in users:\n    print(key)# 得到的是字典的key\n    print(users[key])# 这样可以得到值\nprint('-------------------------------------------------') \n# 字典利用items内置函数进行for循环",
        "detail": "阶段1.week03.day03.04.循环",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "阶段1.week03.day03.04.循环",
        "description": "阶段1.week03.day03.04.循环",
        "peekOfCode": "d = {'name':'小慕','age':10}\nd_items = d.items()\nprint(d_items)\n# dict_items([('name', '小慕'), ('age', 10)])\nfor key,value in d.items():\n    print(key,value)\n# name 小慕\n# age 10\nuser_list = [\n    {'username':'xiaomu'},",
        "detail": "阶段1.week03.day03.04.循环",
        "documentation": {}
    },
    {
        "label": "d_items",
        "kind": 5,
        "importPath": "阶段1.week03.day03.04.循环",
        "description": "阶段1.week03.day03.04.循环",
        "peekOfCode": "d_items = d.items()\nprint(d_items)\n# dict_items([('name', '小慕'), ('age', 10)])\nfor key,value in d.items():\n    print(key,value)\n# name 小慕\n# age 10\nuser_list = [\n    {'username':'xiaomu'},\n    {'username':'dewei'}]",
        "detail": "阶段1.week03.day03.04.循环",
        "documentation": {}
    },
    {
        "label": "user_list",
        "kind": 5,
        "importPath": "阶段1.week03.day03.04.循环",
        "description": "阶段1.week03.day03.04.循环",
        "peekOfCode": "user_list = [\n    {'username':'xiaomu'},\n    {'username':'dewei'}]\nfor user in user_list:\n    print(user)\n    print(user.get('username'))\nprint('-------------------------------------------------')\n# python的内置函数--range\n# 返回的是一个一定范围的可迭代对象，元素为整型，\n# 他不是列表，无法打印信息，但可循环 ",
        "detail": "阶段1.week03.day03.04.循环",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "阶段1.week03.day03.04.循环",
        "description": "阶段1.week03.day03.04.循环",
        "peekOfCode": "l = range(5)\nfor item in l:\n    print(item)\nprint('-------------------------------------------------')\n# else在for循环中的使用\n# else语句只有在for循环正常退出后执行\n# 循环没有报错，中途没有停止\nl = range(5)\nfor item in l:\n    print(item)",
        "detail": "阶段1.week03.day03.04.循环",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "阶段1.week03.day03.04.循环",
        "description": "阶段1.week03.day03.04.循环",
        "peekOfCode": "l = range(5)\nfor item in l:\n    print(item)\nelse:\n    print('for循环成功结束')",
        "detail": "阶段1.week03.day03.04.循环",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "阶段1.week03.day03.05.嵌套for循环",
        "description": "阶段1.week03.day03.05.嵌套for循环",
        "peekOfCode": "a = [1,2,3]\nb = [4,5,6]\nfor i in a:\n    for j in b:\n        print(i+j,end='')\n    print('\\n')",
        "detail": "阶段1.week03.day03.05.嵌套for循环",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "阶段1.week03.day03.05.嵌套for循环",
        "description": "阶段1.week03.day03.05.嵌套for循环",
        "peekOfCode": "b = [4,5,6]\nfor i in a:\n    for j in b:\n        print(i+j,end='')\n    print('\\n')",
        "detail": "阶段1.week03.day03.05.嵌套for循环",
        "documentation": {}
    },
    {
        "label": "sum1",
        "kind": 5,
        "importPath": "阶段1.week03.day03.test3-15",
        "description": "阶段1.week03.day03.test3-15",
        "peekOfCode": "sum1 = 0\nfor i in range(1,1001):\n    if not i%2 == 0:\n        sum1 += i\nprint(sum1)",
        "detail": "阶段1.week03.day03.test3-15",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 5,
        "importPath": "阶段1.week03.day03.test3-5",
        "description": "阶段1.week03.day03.test3-5",
        "peekOfCode": "list = [1,2,3,4,5,6,7,8,9,10]\ncount = 1\nfor i in list:\n    if i%2 == 0:\n        print(f'第{count}个偶数{i}')\n        count = count + 1",
        "detail": "阶段1.week03.day03.test3-5",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "阶段1.week03.day03.test3-5",
        "description": "阶段1.week03.day03.test3-5",
        "peekOfCode": "count = 1\nfor i in list:\n    if i%2 == 0:\n        print(f'第{count}个偶数{i}')\n        count = count + 1",
        "detail": "阶段1.week03.day03.test3-5",
        "documentation": {}
    },
    {
        "label": "new_dict",
        "kind": 2,
        "importPath": "阶段1.week03.day03.test3-9",
        "description": "阶段1.week03.day03.test3-9",
        "peekOfCode": "def new_dict(n):\n    dict_new = {}\n    for i in range(1,n+1):\n        dict_new[i] = i*i\n    print(dict_new)\nnew_dict(8)",
        "detail": "阶段1.week03.day03.test3-9",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "阶段1.week03.day03.test3-9",
        "description": "阶段1.week03.day03.test3-9",
        "peekOfCode": "n = 8\ndef new_dict(n):\n    dict_new = {}\n    for i in range(1,n+1):\n        dict_new[i] = i*i\n    print(dict_new)\nnew_dict(8)",
        "detail": "阶段1.week03.day03.test3-9",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "阶段1.week03.day03.test5-2",
        "description": "阶段1.week03.day03.test5-2",
        "peekOfCode": "count = 0\nfor i in range(1,101):\n    if (i%3==0 or i%7==0) and not (i%3==0 and i%7==0):\n        count += 1\nprint(count)",
        "detail": "阶段1.week03.day03.test5-2",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "阶段1.week03.day03.货币转换系统",
        "description": "阶段1.week03.day03.货币转换系统",
        "peekOfCode": "str = \"\"\" \n**********欢迎使用货币住哪换服务系统**********\n1.人民币转换美元\n2.美元转换人民币\n3.人民币转欧元\n0.结束程序\n\"\"\"\nprint(str)\nnumber = input('请你选择需要的服务:')\nif number == '0':",
        "detail": "阶段1.week03.day03.货币转换系统",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "阶段1.week03.day03.货币转换系统",
        "description": "阶段1.week03.day03.货币转换系统",
        "peekOfCode": "number = input('请你选择需要的服务:')\nif number == '0':\n    print('感谢你的使用，祝你生活愉快，再见')\n    exit()\nelif number == '1':\n    print('欢迎使用人民币转换美元服务')\n    money = input('请你输入需要转换的人民币金额:')\n    print(f'你需要转换的人民币为:{money}')\n    new_money = (float(money)/7.06)\n    new_money = round(new_money,2)",
        "detail": "阶段1.week03.day03.货币转换系统",
        "documentation": {}
    },
    {
        "label": "say_hello",
        "kind": 2,
        "importPath": "阶段1.week03.day04.01.函数的定义",
        "description": "阶段1.week03.day04.01.函数的定义",
        "peekOfCode": "def say_hello():\n    print('hello xiaomu')\nsay_hello()\n# 函数的返回值\n# 将函数结果返回的关键字\n# return 只能在函数体内使用\n# return 支持返回所有的python类型\n# 有返回值的函数可以直接赋值给一个变量\ndef add(a,b):\n    c=a+b",
        "detail": "阶段1.week03.day04.01.函数的定义",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "阶段1.week03.day04.01.函数的定义",
        "description": "阶段1.week03.day04.01.函数的定义",
        "peekOfCode": "def add(a,b):\n    c=a+b\n    return c\nresult = add(1,1)#参数按顺序传递\nprint(result)\n# return与print的区别\n# print只是单纯的将对象打印，不支持赋值语句",
        "detail": "阶段1.week03.day04.01.函数的定义",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week03.day04.01.函数的定义",
        "description": "阶段1.week03.day04.01.函数的定义",
        "peekOfCode": "result = add(1,1)#参数按顺序传递\nprint(result)\n# return与print的区别\n# print只是单纯的将对象打印，不支持赋值语句",
        "detail": "阶段1.week03.day04.01.函数的定义",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "阶段1.week03.day04.02.函数的参数",
        "description": "阶段1.week03.day04.02.函数的参数",
        "peekOfCode": "def test(*args, **kwargs):\n    print(args,type(args))\n    print(kwargs,type(kwargs))\ntest(1,2,3,4,5,name='dewei',age=33,top=174)\nprint('--------------------------------------------------')\ndef test_supper(*args, **kwargs):\n    if len(args)>=1:\n        print(args[0])\n    if 'name' in kwargs:\n        print(kwargs['name'])",
        "detail": "阶段1.week03.day04.02.函数的参数",
        "documentation": {}
    },
    {
        "label": "test_supper",
        "kind": 2,
        "importPath": "阶段1.week03.day04.02.函数的参数",
        "description": "阶段1.week03.day04.02.函数的参数",
        "peekOfCode": "def test_supper(*args, **kwargs):\n    if len(args)>=1:\n        print(args[0])\n    if 'name' in kwargs:\n        print(kwargs['name'])\n    else:\n        print('no name')\n    print('args:',args)\n    print('kwargs:',kwargs)\ntest_supper(1,name='dewei')",
        "detail": "阶段1.week03.day04.02.函数的参数",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "阶段1.week03.day04.02.函数的参数",
        "description": "阶段1.week03.day04.02.函数的参数",
        "peekOfCode": "def test(a,b,*args):\n    print(a,b,args)\ns=(1,2)\ntest(1,2,*s)\n# test(a=1,b=2,*s) \n#报错 ，采用赋值形传参的话，可变元组参数必须放在前面\n# 下面这种方式不推荐\ndef test2(*args,a,b=1):\n    print(a,b,args)\ntest2(*s,a=1,b=2)",
        "detail": "阶段1.week03.day04.02.函数的参数",
        "documentation": {}
    },
    {
        "label": "test2",
        "kind": 2,
        "importPath": "阶段1.week03.day04.02.函数的参数",
        "description": "阶段1.week03.day04.02.函数的参数",
        "peekOfCode": "def test2(*args,a,b=1):\n    print(a,b,args)\ntest2(*s,a=1,b=2)\ntest2(a=1,b=2,*s)",
        "detail": "阶段1.week03.day04.02.函数的参数",
        "documentation": {}
    },
    {
        "label": "person",
        "kind": 2,
        "importPath": "阶段1.week03.day04.03.函数的参数类型",
        "description": "阶段1.week03.day04.03.函数的参数类型",
        "peekOfCode": "def person(name:str,age:int = 33):\n    print(name,age)\n# 韩式定义在python3.7之后可用\n# 函数不会对参数类型进行验证,知识提示程序要是什么类型\ndef add(a:int,b:int=3):\n    print(a+b)\nadd(1,2)\nadd('hello','xiaomu')# 不会报错\n# helloxiaomu\ndef test(a:int,b:int=3,*arg:int,**kwargs:str):",
        "detail": "阶段1.week03.day04.03.函数的参数类型",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "阶段1.week03.day04.03.函数的参数类型",
        "description": "阶段1.week03.day04.03.函数的参数类型",
        "peekOfCode": "def add(a:int,b:int=3):\n    print(a+b)\nadd(1,2)\nadd('hello','xiaomu')# 不会报错\n# helloxiaomu\ndef test(a:int,b:int=3,*arg:int,**kwargs:str):\n    print(a,b,arg,kwargs)\ntest(1,2,3,'4',name='小慕')\n# 1 2 (3, '4') {'name': '小慕'}",
        "detail": "阶段1.week03.day04.03.函数的参数类型",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "阶段1.week03.day04.03.函数的参数类型",
        "description": "阶段1.week03.day04.03.函数的参数类型",
        "peekOfCode": "def test(a:int,b:int=3,*arg:int,**kwargs:str):\n    print(a,b,arg,kwargs)\ntest(1,2,3,'4',name='小慕')\n# 1 2 (3, '4') {'name': '小慕'}",
        "detail": "阶段1.week03.day04.03.函数的参数类型",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "阶段1.week03.day04.04.全局变量与局部变量",
        "description": "阶段1.week03.day04.04.全局变量与局部变量",
        "peekOfCode": "def test():\n    print(name)\ntest()\ndef test1():\n    # 这里的name是局部变量\n    # 函数内部只能读取全局变量，但是不能修改全局变量\n    name = 'xiaomu'\n    print('函数内部',name,id(name))\ntest1()\nprint('全局变量',name,id(name))",
        "detail": "阶段1.week03.day04.04.全局变量与局部变量",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "阶段1.week03.day04.04.全局变量与局部变量",
        "description": "阶段1.week03.day04.04.全局变量与局部变量",
        "peekOfCode": "def test1():\n    # 这里的name是局部变量\n    # 函数内部只能读取全局变量，但是不能修改全局变量\n    name = 'xiaomu'\n    print('函数内部',name,id(name))\ntest1()\nprint('全局变量',name,id(name))\n# global关键字\n# 将全局变量可以在函数体楼内进行修改\n# 工作中不建议使用global对全局变量进行修改",
        "detail": "阶段1.week03.day04.04.全局变量与局部变量",
        "documentation": {}
    },
    {
        "label": "test2",
        "kind": 2,
        "importPath": "阶段1.week03.day04.04.全局变量与局部变量",
        "description": "阶段1.week03.day04.04.全局变量与局部变量",
        "peekOfCode": "def test2():\n    # global + 全局变量名\n    global name\n     # 函数体内给全局变量重新赋值xiaomu\n    name = 'xiaomu'\n    print('global',name,id(name))\ntest2()\nprint('全局的',name,id(name))\n# 在局部使用字典，列表类型是不需要global的\ntest_dict = {'a':1,'b':2}",
        "detail": "阶段1.week03.day04.04.全局变量与局部变量",
        "documentation": {}
    },
    {
        "label": "test3",
        "kind": 2,
        "importPath": "阶段1.week03.day04.04.全局变量与局部变量",
        "description": "阶段1.week03.day04.04.全局变量与局部变量",
        "peekOfCode": "def test3():\n    test_dict['c']=3\ntest3()\nprint(test_dict)",
        "detail": "阶段1.week03.day04.04.全局变量与局部变量",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "阶段1.week03.day04.04.全局变量与局部变量",
        "description": "阶段1.week03.day04.04.全局变量与局部变量",
        "peekOfCode": "name = 'dewei'\ndef test():\n    print(name)\ntest()\ndef test1():\n    # 这里的name是局部变量\n    # 函数内部只能读取全局变量，但是不能修改全局变量\n    name = 'xiaomu'\n    print('函数内部',name,id(name))\ntest1()",
        "detail": "阶段1.week03.day04.04.全局变量与局部变量",
        "documentation": {}
    },
    {
        "label": "test_dict",
        "kind": 5,
        "importPath": "阶段1.week03.day04.04.全局变量与局部变量",
        "description": "阶段1.week03.day04.04.全局变量与局部变量",
        "peekOfCode": "test_dict = {'a':1,'b':2}\ndef test3():\n    test_dict['c']=3\ntest3()\nprint(test_dict)",
        "detail": "阶段1.week03.day04.04.全局变量与局部变量",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "阶段1.week03.day04.05.函数的递归",
        "description": "阶段1.week03.day04.05.函数的递归",
        "peekOfCode": "def f(i):\n    if i == 1 or i == 2:\n        return 1\n    else:\n        return f(i-1)+f(i-2)\nresult = f(5)\nprint(result) \n# 打印指定范围内的斐波那锲数列\ndef num(start,end):\n    for i in range(start,end+1):",
        "detail": "阶段1.week03.day04.05.函数的递归",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 2,
        "importPath": "阶段1.week03.day04.05.函数的递归",
        "description": "阶段1.week03.day04.05.函数的递归",
        "peekOfCode": "def num(start,end):\n    for i in range(start,end+1):\n        print(f(i),' ',end='')\nnum(1,10)",
        "detail": "阶段1.week03.day04.05.函数的递归",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week03.day04.05.函数的递归",
        "description": "阶段1.week03.day04.05.函数的递归",
        "peekOfCode": "result = f(5)\nprint(result) \n# 打印指定范围内的斐波那锲数列\ndef num(start,end):\n    for i in range(start,end+1):\n        print(f(i),' ',end='')\nnum(1,10)",
        "detail": "阶段1.week03.day04.05.函数的递归",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 5,
        "importPath": "阶段1.week03.day04.06.匿名函数lambda",
        "description": "阶段1.week03.day04.06.匿名函数lambda",
        "peekOfCode": "f1 = lambda : 1\nprint(f1())\nf2 = lambda x,y : x*y\nprint(f2(3,4))\nusers =[\n    {'name':'dewei'},\n    {'name':'xiaomu'},\n    {'name':'asan'}\n] \n# x指字典中的每一项",
        "detail": "阶段1.week03.day04.06.匿名函数lambda",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 5,
        "importPath": "阶段1.week03.day04.06.匿名函数lambda",
        "description": "阶段1.week03.day04.06.匿名函数lambda",
        "peekOfCode": "f2 = lambda x,y : x*y\nprint(f2(3,4))\nusers =[\n    {'name':'dewei'},\n    {'name':'xiaomu'},\n    {'name':'asan'}\n] \n# x指字典中的每一项\n# 按照name排序\nusers.sort(key=lambda x:x['name'])",
        "detail": "阶段1.week03.day04.06.匿名函数lambda",
        "documentation": {}
    },
    {
        "label": "get_all_student",
        "kind": 2,
        "importPath": "阶段1.week03.day04.07.学生信息库",
        "description": "阶段1.week03.day04.07.学生信息库",
        "peekOfCode": "def get_all_student():\n    for id_,value in students.items():\n        print('学号:{},姓名:{},年龄:{},班级:{},性别:{}'\\\n              .format(id_,value['name'],value['age'],value['class_number'],value['sex'])) \n    return students\n# get_all_student()\ndef add_student(**kwargs):\n    if 'name' not in kwargs:\n        print('没有发现学生姓名')\n        return",
        "detail": "阶段1.week03.day04.07.学生信息库",
        "documentation": {}
    },
    {
        "label": "add_student",
        "kind": 2,
        "importPath": "阶段1.week03.day04.07.学生信息库",
        "description": "阶段1.week03.day04.07.学生信息库",
        "peekOfCode": "def add_student(**kwargs):\n    if 'name' not in kwargs:\n        print('没有发现学生姓名')\n        return\n    if 'age' not in kwargs:\n        print('没有发现学生年龄')\n        return\n    if 'class_number' not in kwargs:\n        print('没有发现学生班级')\n        return",
        "detail": "阶段1.week03.day04.07.学生信息库",
        "documentation": {}
    },
    {
        "label": "delete_student",
        "kind": 2,
        "importPath": "阶段1.week03.day04.07.学生信息库",
        "description": "阶段1.week03.day04.07.学生信息库",
        "peekOfCode": "def delete_student(student_id):\n    if student_id not in students:\n        print('学生的学号{}不存在'.format(student_id))\n        return\n    else:\n        # 删除字典中指定的key，并将其结果返回，如果key不存在则报错\n        # value = dict.pop(key) key 要删除的键 返回被删除的value\n        userInfo = students.pop(student_id)\n        # print(userInfo)\n        print('学号是{}，{}同学的信息已经被删除了'.format(student_id,userInfo['name']))",
        "detail": "阶段1.week03.day04.07.学生信息库",
        "documentation": {}
    },
    {
        "label": "update_student",
        "kind": 2,
        "importPath": "阶段1.week03.day04.07.学生信息库",
        "description": "阶段1.week03.day04.07.学生信息库",
        "peekOfCode": "def update_student(student_id,**kwargs):\n    if student_id not in students:\n        print('没有这个学生信息')\n        return\n    else:\n        if 'name' in kwargs:\n            students[student_id]['name'] =kwargs['name']\n        if 'age' in kwargs:\n            students[student_id]['age'] =kwargs['age']\n        if 'class_number' in kwargs:",
        "detail": "阶段1.week03.day04.07.学生信息库",
        "documentation": {}
    },
    {
        "label": "get_user_by_id",
        "kind": 2,
        "importPath": "阶段1.week03.day04.07.学生信息库",
        "description": "阶段1.week03.day04.07.学生信息库",
        "peekOfCode": "def get_user_by_id(student_id):\n    if student_id not in students:\n        print('没有该学生信息')\n    else:\n        result = students.get(student_id)\n        print('学号:{},姓名:{},年龄:{},班级:{},性别:{}'\\\n                .format(student_id,result['name'],result['age'],result['class_number'],result['sex']))\n# get_user_by_id(2)\n# 查询信息\ndef search_user(**kwargs):",
        "detail": "阶段1.week03.day04.07.学生信息库",
        "documentation": {}
    },
    {
        "label": "search_user",
        "kind": 2,
        "importPath": "阶段1.week03.day04.07.学生信息库",
        "description": "阶段1.week03.day04.07.学生信息库",
        "peekOfCode": "def search_user(**kwargs):\n    values = list(students.values())\n    key = None\n    value = None\n    result =[]\n    if 'name' in kwargs:\n        key = 'name'\n    elif 'sex' in kwargs:\n        key = 'sex'\n    elif 'class_number' in kwargs:",
        "detail": "阶段1.week03.day04.07.学生信息库",
        "documentation": {}
    },
    {
        "label": "add_student(name='小白',age=19,class_number",
        "kind": 5,
        "importPath": "阶段1.week03.day04.07.学生信息库",
        "description": "阶段1.week03.day04.07.学生信息库",
        "peekOfCode": "add_student(name='小白',age=19,class_number = 'A',sex='boy')\n# 删除学生的信息\ndef delete_student(student_id):\n    if student_id not in students:\n        print('学生的学号{}不存在'.format(student_id))\n        return\n    else:\n        # 删除字典中指定的key，并将其结果返回，如果key不存在则报错\n        # value = dict.pop(key) key 要删除的键 返回被删除的value\n        userInfo = students.pop(student_id)",
        "detail": "阶段1.week03.day04.07.学生信息库",
        "documentation": {}
    },
    {
        "label": "goose",
        "kind": 2,
        "importPath": "阶段1.week03.day04.test1-6",
        "description": "阶段1.week03.day04.test1-6",
        "peekOfCode": "def goose():\n    print('鹅，鹅，鹅，曲项向天歌，白毛浮绿水，红掌拨清波')\n    print('*'*50)\ngoose()\ngoose()\ngoose()",
        "detail": "阶段1.week03.day04.test1-6",
        "documentation": {}
    },
    {
        "label": "oper",
        "kind": 2,
        "importPath": "阶段1.week03.day04.test2-3",
        "description": "阶段1.week03.day04.test2-3",
        "peekOfCode": "def oper(num,num1,num2):\n    if num < 100:\n        print(num1*num2)\n    else:\n        print(num1+num2)\noper(1314,52,0)\noper(5,2,0)",
        "detail": "阶段1.week03.day04.test2-3",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "阶段1.week03.day04.test2-4",
        "description": "阶段1.week03.day04.test2-4",
        "peekOfCode": "def login(username, password):\n    if username=='mooc' and password == '123456':\n        print('登录成功')\n    else:\n        print('请重新登录')\nlogin('mooc','12345')",
        "detail": "阶段1.week03.day04.test2-4",
        "documentation": {}
    },
    {
        "label": "seq",
        "kind": 2,
        "importPath": "阶段1.week03.day04.test2-6",
        "description": "阶段1.week03.day04.test2-6",
        "peekOfCode": "def seq(num,num1,num2):\n    if num < 88:\n        print(num1*num2)\n    else:\n        print(num1+num2)\ntuple = (5,2,1)\nseq(*tuple)",
        "detail": "阶段1.week03.day04.test2-6",
        "documentation": {}
    },
    {
        "label": "tuple",
        "kind": 5,
        "importPath": "阶段1.week03.day04.test2-6",
        "description": "阶段1.week03.day04.test2-6",
        "peekOfCode": "tuple = (5,2,1)\nseq(*tuple)",
        "detail": "阶段1.week03.day04.test2-6",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "阶段1.week04.day01.01.什么是面向对象",
        "description": "阶段1.week04.day01.01.什么是面向对象",
        "peekOfCode": "class Person(object):\n    # 类属性\n    name = '小慕'\n    # 类函数\n    def dump(self):\n        print(f'{self.name} is dumping')\n# 实例化一个类\nxiaomu = Person()\nprint(xiaomu.name)\nxiaomu.dump()",
        "detail": "阶段1.week04.day01.01.什么是面向对象",
        "documentation": {}
    },
    {
        "label": "xiaomu",
        "kind": 5,
        "importPath": "阶段1.week04.day01.01.什么是面向对象",
        "description": "阶段1.week04.day01.01.什么是面向对象",
        "peekOfCode": "xiaomu = Person()\nprint(xiaomu.name)\nxiaomu.dump()",
        "detail": "阶段1.week04.day01.01.什么是面向对象",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "阶段1.week04.day01.02.类参数self",
        "description": "阶段1.week04.day01.02.类参数self",
        "peekOfCode": "class Person(object):\n    name = None\n    age = None\n    def run(self):\n        print(f'{self.name}在奔跑')\n    def jump(self):\n        print(f'{self.name}在跳跃')\n    def work(self):\n        self.run();\n        self.jump()",
        "detail": "阶段1.week04.day01.02.类参数self",
        "documentation": {}
    },
    {
        "label": "xiaomu",
        "kind": 5,
        "importPath": "阶段1.week04.day01.02.类参数self",
        "description": "阶段1.week04.day01.02.类参数self",
        "peekOfCode": "xiaomu = Person()\nxiaomu.name = '小慕'\nxiaomu.jump()\nprint('---------------------')\nxiaomu.work()\nprint('---------------------')\ndewei = Person()\ndewei.name = 'dewei'\ndewei.jump()\n# 实例化对象自定义属性",
        "detail": "阶段1.week04.day01.02.类参数self",
        "documentation": {}
    },
    {
        "label": "xiaomu.name",
        "kind": 5,
        "importPath": "阶段1.week04.day01.02.类参数self",
        "description": "阶段1.week04.day01.02.类参数self",
        "peekOfCode": "xiaomu.name = '小慕'\nxiaomu.jump()\nprint('---------------------')\nxiaomu.work()\nprint('---------------------')\ndewei = Person()\ndewei.name = 'dewei'\ndewei.jump()\n# 实例化对象自定义属性\ndewei.top = 174",
        "detail": "阶段1.week04.day01.02.类参数self",
        "documentation": {}
    },
    {
        "label": "dewei",
        "kind": 5,
        "importPath": "阶段1.week04.day01.02.类参数self",
        "description": "阶段1.week04.day01.02.类参数self",
        "peekOfCode": "dewei = Person()\ndewei.name = 'dewei'\ndewei.jump()\n# 实例化对象自定义属性\ndewei.top = 174\nprint(dewei.top)",
        "detail": "阶段1.week04.day01.02.类参数self",
        "documentation": {}
    },
    {
        "label": "dewei.name",
        "kind": 5,
        "importPath": "阶段1.week04.day01.02.类参数self",
        "description": "阶段1.week04.day01.02.类参数self",
        "peekOfCode": "dewei.name = 'dewei'\ndewei.jump()\n# 实例化对象自定义属性\ndewei.top = 174\nprint(dewei.top)",
        "detail": "阶段1.week04.day01.02.类参数self",
        "documentation": {}
    },
    {
        "label": "dewei.top",
        "kind": 5,
        "importPath": "阶段1.week04.day01.02.类参数self",
        "description": "阶段1.week04.day01.02.类参数self",
        "peekOfCode": "dewei.top = 174\nprint(dewei.top)",
        "detail": "阶段1.week04.day01.02.类参数self",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "阶段1.week04.day01.03.类的构造函数",
        "description": "阶段1.week04.day01.03.类的构造函数",
        "peekOfCode": "class Test(object):\n    def __init__(self,a):\n        self.a=a\n    def  run(self):\n        print(self.a)\n# 1对应a\nt=Test(1)\nt.run()\nclass Person(object):\n    def __init__(self,name,age=None):",
        "detail": "阶段1.week04.day01.03.类的构造函数",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "阶段1.week04.day01.03.类的构造函数",
        "description": "阶段1.week04.day01.03.类的构造函数",
        "peekOfCode": "class Person(object):\n    def __init__(self,name,age=None):\n        self.name = name\n        self.age = age\n    def run(self):\n        print(f'{self.name}在奔跑')\n    def jump(self):\n        print(f'{self.name}在跳跃')\n    def work(self):\n        self.run();",
        "detail": "阶段1.week04.day01.03.类的构造函数",
        "documentation": {}
    },
    {
        "label": "xiaomu",
        "kind": 5,
        "importPath": "阶段1.week04.day01.03.类的构造函数",
        "description": "阶段1.week04.day01.03.类的构造函数",
        "peekOfCode": "xiaomu = Person(name ='小慕',age=10)\n# 可以使用调用属性的方法对参数进行修改\nxiaomu.name = 'xiaomu'\nxiaomu.work()\nprint('--------------------------------')\ndewei = Person(name ='dewei',age=18)\ndewei.work()",
        "detail": "阶段1.week04.day01.03.类的构造函数",
        "documentation": {}
    },
    {
        "label": "xiaomu.name",
        "kind": 5,
        "importPath": "阶段1.week04.day01.03.类的构造函数",
        "description": "阶段1.week04.day01.03.类的构造函数",
        "peekOfCode": "xiaomu.name = 'xiaomu'\nxiaomu.work()\nprint('--------------------------------')\ndewei = Person(name ='dewei',age=18)\ndewei.work()",
        "detail": "阶段1.week04.day01.03.类的构造函数",
        "documentation": {}
    },
    {
        "label": "dewei",
        "kind": 5,
        "importPath": "阶段1.week04.day01.03.类的构造函数",
        "description": "阶段1.week04.day01.03.类的构造函数",
        "peekOfCode": "dewei = Person(name ='dewei',age=18)\ndewei.work()",
        "detail": "阶段1.week04.day01.03.类的构造函数",
        "documentation": {}
    },
    {
        "label": "Cat",
        "kind": 6,
        "importPath": "阶段1.week04.day01.05.私有函数和私有变量",
        "description": "阶段1.week04.day01.05.私有函数和私有变量",
        "peekOfCode": "class Cat(object):\n    __cat_type = 'cat'\n    def __init__(self, name,sex):\n        self.name = name\n        self.__sex = sex\n    def run(self):\n        # pass内置函数，相当于一各占位符\n        # 如果我们只定义一个函数名，不写函数体就会报错\n        # 所以我们可以使用占位符\n        # pass",
        "detail": "阶段1.week04.day01.05.私有函数和私有变量",
        "documentation": {}
    },
    {
        "label": "cat",
        "kind": 5,
        "importPath": "阶段1.week04.day01.05.私有函数和私有变量",
        "description": "阶段1.week04.day01.05.私有函数和私有变量",
        "peekOfCode": "cat = Cat(name='xiaomi',sex='boy')\ncat.run()\ncat.dump()\nprint('--------------------------------')\n# 报错\n# 私有函数无法通过实例化对象调用\n# cat.__run()\n# cat.__dump()\n# 但是我就是要调用要怎么办呢？\n# print(dir(cat))",
        "detail": "阶段1.week04.day01.05.私有函数和私有变量",
        "documentation": {}
    },
    {
        "label": "Parent",
        "kind": 6,
        "importPath": "阶段1.week04.day01.06.python中的封装",
        "description": "阶段1.week04.day01.06.python中的封装",
        "peekOfCode": "class Parent(object):\n    def __hello(self,data):\n        print('hello %s'% data )\n    def helloword(self):\n        self.__hello('world')\nif __name__ == '__main__':\n    p = Parent()\n    p.helloword()",
        "detail": "阶段1.week04.day01.06.python中的封装",
        "documentation": {}
    },
    {
        "label": "out",
        "kind": 2,
        "importPath": "阶段1.week04.day01.07.装饰器",
        "description": "阶段1.week04.day01.07.装饰器",
        "peekOfCode": "def out(func_args): #外围函数\n    def inter(*args, **kwargs): #内嵌函数\n        return func_args(*args,**kwargs)\n    return inter # 注意不执行 外围函数返回内嵌函数\n'''装饰器的用法'''\n#方法1： 将被调用的函数直接作为参数传入装饰器的外围函数括弧\n#方法2：jiang装饰器与被调用函数绑定在一起\n# @符号+装饰器函数放在被调用函数的上一行，被调用的函数正常定义，只需要直接调用被执行函数即可\ndef a(func):\n    def b(*args, **kwargs):",
        "detail": "阶段1.week04.day01.07.装饰器",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 2,
        "importPath": "阶段1.week04.day01.07.装饰器",
        "description": "阶段1.week04.day01.07.装饰器",
        "peekOfCode": "def a(func):\n    def b(*args, **kwargs):\n        return func(*args, **kwargs)\n    return b\n# 方法1\ndef c(name):\n    print(name)\na(c('dewei')) # dewei\n# 方法2\n# 绑定装饰器",
        "detail": "阶段1.week04.day01.07.装饰器",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 2,
        "importPath": "阶段1.week04.day01.07.装饰器",
        "description": "阶段1.week04.day01.07.装饰器",
        "peekOfCode": "def c(name):\n    print(name)\na(c('dewei')) # dewei\n# 方法2\n# 绑定装饰器\n@a\n# 定义被调用函数\ndef c(name):\n    print(name)\n# 调用",
        "detail": "阶段1.week04.day01.07.装饰器",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 2,
        "importPath": "阶段1.week04.day01.07.装饰器",
        "description": "阶段1.week04.day01.07.装饰器",
        "peekOfCode": "def c(name):\n    print(name)\n# 调用\nc('dewei')\n# 定义装饰器\ndef check_str(func):\n    print('func:',func)\n    def inter(*args, **kwargs):\n        print('args:',args,'kwargs:',kwargs)\n        result = func(*args, **kwargs)",
        "detail": "阶段1.week04.day01.07.装饰器",
        "documentation": {}
    },
    {
        "label": "check_str",
        "kind": 2,
        "importPath": "阶段1.week04.day01.07.装饰器",
        "description": "阶段1.week04.day01.07.装饰器",
        "peekOfCode": "def check_str(func):\n    print('func:',func)\n    def inter(*args, **kwargs):\n        print('args:',args,'kwargs:',kwargs)\n        result = func(*args, **kwargs)\n        if result == 'ok':\n            return 'result is %s' % result\n        else:\n            return 'result is failed %s' % result\n    return inter",
        "detail": "阶段1.week04.day01.07.装饰器",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "阶段1.week04.day01.07.装饰器",
        "description": "阶段1.week04.day01.07.装饰器",
        "peekOfCode": "def test(data):\n    return data\nresult = test('no')\nprint(result)\nresult = test('ok')\nprint(result)",
        "detail": "阶段1.week04.day01.07.装饰器",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week04.day01.07.装饰器",
        "description": "阶段1.week04.day01.07.装饰器",
        "peekOfCode": "result = test('no')\nprint(result)\nresult = test('ok')\nprint(result)",
        "detail": "阶段1.week04.day01.07.装饰器",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week04.day01.07.装饰器",
        "description": "阶段1.week04.day01.07.装饰器",
        "peekOfCode": "result = test('ok')\nprint(result)",
        "detail": "阶段1.week04.day01.07.装饰器",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "阶段1.week04.day01.08.类中的装饰器",
        "description": "阶段1.week04.day01.08.类中的装饰器",
        "peekOfCode": "class Test(object):\n    @classmethod\n    def add(cls,a,b):\n        return a+b\n# 类没有实例化二可以直接调用\nprint(Test.add(1,2))\nprint('--------------------------------')\n'''staticmethod装饰器的功能'''\n# 将 类函数可以不经过实例化 而直接被调用，\n# 被该装饰器调用的函数 不许 传递self或cls参数，且无法在该函数内调用其他函数或类变量",
        "detail": "阶段1.week04.day01.08.类中的装饰器",
        "documentation": {}
    },
    {
        "label": "Test2",
        "kind": 6,
        "importPath": "阶段1.week04.day01.08.类中的装饰器",
        "description": "阶段1.week04.day01.08.类中的装饰器",
        "peekOfCode": "class Test2(object):\n    @staticmethod\n    def add(a,b):\n        return a+b\nprint(Test2.add(2,2)) \nprint('--------------------------------')\n'''property装饰器的功能'''\n# 将类函数的执行免去括弧，类似于调用属性（变量）\n'''property装饰器的用法'''\n# @property",
        "detail": "阶段1.week04.day01.08.类中的装饰器",
        "documentation": {}
    },
    {
        "label": "Test3",
        "kind": 6,
        "importPath": "阶段1.week04.day01.08.类中的装饰器",
        "description": "阶段1.week04.day01.08.类中的装饰器",
        "peekOfCode": "class Test3(object):\n    def __init__(self,name):\n        self.name = name\n    @property\n    def call_name(self):\n        return 'hello {}'.format(self.name)\ntest = Test3('小慕')\n# 使用效果\nresult = test.call_name\nprint(result)",
        "detail": "阶段1.week04.day01.08.类中的装饰器",
        "documentation": {}
    },
    {
        "label": "Test4",
        "kind": 6,
        "importPath": "阶段1.week04.day01.08.类中的装饰器",
        "description": "阶段1.week04.day01.08.类中的装饰器",
        "peekOfCode": "class Test4(object):\n    def __init__(self,name):\n        self.__name = name\n    @property\n    def call_name(self):\n        return self.__name\n    # property装饰器如何给函数传参呢？\n    @call_name.setter\n    def call_name(self,value):\n        self.__name = value",
        "detail": "阶段1.week04.day01.08.类中的装饰器",
        "documentation": {}
    },
    {
        "label": "Test1",
        "kind": 6,
        "importPath": "阶段1.week04.day01.08.类中的装饰器",
        "description": "阶段1.week04.day01.08.类中的装饰器",
        "peekOfCode": "class Test1(object):\n    def __init__(self,a):\n        self.a=a\n    def run(self):\n        print('run')\n        # 但是可以在需要self的函数中调用需要cls的函数\n        # 在self中可以调用classmethod装饰器的函数，\n        # 也可以调用staticmethod装饰器的函数\n        # self.dump() #可以执行\n        # self.sleep() #可以执行",
        "detail": "阶段1.week04.day01.08.类中的装饰器",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "阶段1.week04.day01.08.类中的装饰器",
        "description": "阶段1.week04.day01.08.类中的装饰器",
        "peekOfCode": "test = Test3('小慕')\n# 使用效果\nresult = test.call_name\nprint(result)\nprint('--------------------------------')\nclass Test4(object):\n    def __init__(self,name):\n        self.__name = name\n    @property\n    def call_name(self):",
        "detail": "阶段1.week04.day01.08.类中的装饰器",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week04.day01.08.类中的装饰器",
        "description": "阶段1.week04.day01.08.类中的装饰器",
        "peekOfCode": "result = test.call_name\nprint(result)\nprint('--------------------------------')\nclass Test4(object):\n    def __init__(self,name):\n        self.__name = name\n    @property\n    def call_name(self):\n        return self.__name\n    # property装饰器如何给函数传参呢？",
        "detail": "阶段1.week04.day01.08.类中的装饰器",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "阶段1.week04.day01.08.类中的装饰器",
        "description": "阶段1.week04.day01.08.类中的装饰器",
        "peekOfCode": "test = Test4(name='dewei')\n# property装饰器之后的方法调用   \nprint('名字为',test.call_name)   \n#property的修改参数办法\ntest.name = 'xiaomu'  \nprint('修改之后名字为',test.call_name) \nprint('--------------------------------')\n# 案例\nclass Test1(object):\n    def __init__(self,a):",
        "detail": "阶段1.week04.day01.08.类中的装饰器",
        "documentation": {}
    },
    {
        "label": "test.name",
        "kind": 5,
        "importPath": "阶段1.week04.day01.08.类中的装饰器",
        "description": "阶段1.week04.day01.08.类中的装饰器",
        "peekOfCode": "test.name = 'xiaomu'  \nprint('修改之后名字为',test.call_name) \nprint('--------------------------------')\n# 案例\nclass Test1(object):\n    def __init__(self,a):\n        self.a=a\n    def run(self):\n        print('run')\n        # 但是可以在需要self的函数中调用需要cls的函数",
        "detail": "阶段1.week04.day01.08.类中的装饰器",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "阶段1.week04.day01.08.类中的装饰器",
        "description": "阶段1.week04.day01.08.类中的装饰器",
        "peekOfCode": "t = Test1('a')\nt.run()\n# Test1.run() # 报错\n# 这个函数绑定了装饰器，可以不用实例化就可以直接使用\nTest1.dump()\nTest1.sleep()",
        "detail": "阶段1.week04.day01.08.类中的装饰器",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "阶段1.week04.day01.09.类的继承",
        "description": "阶段1.week04.day01.09.类的继承",
        "peekOfCode": "class Person(object):\n    def talk(self):\n        print('talk')\n    def think(self):\n        print('think')\n# 代表继承Person\n# 定义子类时，将父类传入子类参数内\nclass Child(Person):\n    def swimming(self):\n        print('child can swimming')",
        "detail": "阶段1.week04.day01.09.类的继承",
        "documentation": {}
    },
    {
        "label": "Child",
        "kind": 6,
        "importPath": "阶段1.week04.day01.09.类的继承",
        "description": "阶段1.week04.day01.09.类的继承",
        "peekOfCode": "class Child(Person):\n    def swimming(self):\n        print('child can swimming')\n# 子类实例化可以调用自己与父类的函数与变量\nc = Child()\nc.talk()\nc.swimming()\np = Person()\np.talk()\n# p.swimming()#报错，父类没有这个方法",
        "detail": "阶段1.week04.day01.09.类的继承",
        "documentation": {}
    },
    {
        "label": "Person_test",
        "kind": 6,
        "importPath": "阶段1.week04.day01.09.类的继承",
        "description": "阶段1.week04.day01.09.类的继承",
        "peekOfCode": "class Person_test(object):\n    def __init__(self,name,sex):\n        self.name = name\n        self.sex = sex\n    def talk(self):\n        return f'{self.name} are talking'\n    def is_sex(self):\n        if self.sex == 'boy':\n            return f'{self.name} is a boy'\n        else:",
        "detail": "阶段1.week04.day01.09.类的继承",
        "documentation": {}
    },
    {
        "label": "ChildOne",
        "kind": 6,
        "importPath": "阶段1.week04.day01.09.类的继承",
        "description": "阶段1.week04.day01.09.类的继承",
        "peekOfCode": "class ChildOne(Person_test):\n    def play_football(self):\n        return f'{self.name} are playing football'\nclass ChildTwo(Person_test):\n    def play_pingpong(self):\n        return f'{self.name} are playing pingpong'\nc_one = ChildOne(name='小慕',sex='boy')\nresult = c_one.play_football()\nprint(result)\nc_two = ChildTwo(name='小云',sex='girl')",
        "detail": "阶段1.week04.day01.09.类的继承",
        "documentation": {}
    },
    {
        "label": "ChildTwo",
        "kind": 6,
        "importPath": "阶段1.week04.day01.09.类的继承",
        "description": "阶段1.week04.day01.09.类的继承",
        "peekOfCode": "class ChildTwo(Person_test):\n    def play_pingpong(self):\n        return f'{self.name} are playing pingpong'\nc_one = ChildOne(name='小慕',sex='boy')\nresult = c_one.play_football()\nprint(result)\nc_two = ChildTwo(name='小云',sex='girl')\nresult = c_two.play_pingpong()\nprint(result)\nprint(c_one.talk())",
        "detail": "阶段1.week04.day01.09.类的继承",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "阶段1.week04.day01.09.类的继承",
        "description": "阶段1.week04.day01.09.类的继承",
        "peekOfCode": "c = Child()\nc.talk()\nc.swimming()\np = Person()\np.talk()\n# p.swimming()#报错，父类没有这个方法\nprint('-------------------------------------')\nclass Person_test(object):\n    def __init__(self,name,sex):\n        self.name = name",
        "detail": "阶段1.week04.day01.09.类的继承",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "阶段1.week04.day01.09.类的继承",
        "description": "阶段1.week04.day01.09.类的继承",
        "peekOfCode": "p = Person()\np.talk()\n# p.swimming()#报错，父类没有这个方法\nprint('-------------------------------------')\nclass Person_test(object):\n    def __init__(self,name,sex):\n        self.name = name\n        self.sex = sex\n    def talk(self):\n        return f'{self.name} are talking'",
        "detail": "阶段1.week04.day01.09.类的继承",
        "documentation": {}
    },
    {
        "label": "c_one",
        "kind": 5,
        "importPath": "阶段1.week04.day01.09.类的继承",
        "description": "阶段1.week04.day01.09.类的继承",
        "peekOfCode": "c_one = ChildOne(name='小慕',sex='boy')\nresult = c_one.play_football()\nprint(result)\nc_two = ChildTwo(name='小云',sex='girl')\nresult = c_two.play_pingpong()\nprint(result)\nprint(c_one.talk())\nprint(c_two.is_sex())\nprint('-------------------------------------')\np = Person_test(name='小慕爸爸',sex='boy')",
        "detail": "阶段1.week04.day01.09.类的继承",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week04.day01.09.类的继承",
        "description": "阶段1.week04.day01.09.类的继承",
        "peekOfCode": "result = c_one.play_football()\nprint(result)\nc_two = ChildTwo(name='小云',sex='girl')\nresult = c_two.play_pingpong()\nprint(result)\nprint(c_one.talk())\nprint(c_two.is_sex())\nprint('-------------------------------------')\np = Person_test(name='小慕爸爸',sex='boy')\nprint(p.talk())",
        "detail": "阶段1.week04.day01.09.类的继承",
        "documentation": {}
    },
    {
        "label": "c_two",
        "kind": 5,
        "importPath": "阶段1.week04.day01.09.类的继承",
        "description": "阶段1.week04.day01.09.类的继承",
        "peekOfCode": "c_two = ChildTwo(name='小云',sex='girl')\nresult = c_two.play_pingpong()\nprint(result)\nprint(c_one.talk())\nprint(c_two.is_sex())\nprint('-------------------------------------')\np = Person_test(name='小慕爸爸',sex='boy')\nprint(p.talk())\nprint(p.is_sex())",
        "detail": "阶段1.week04.day01.09.类的继承",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week04.day01.09.类的继承",
        "description": "阶段1.week04.day01.09.类的继承",
        "peekOfCode": "result = c_two.play_pingpong()\nprint(result)\nprint(c_one.talk())\nprint(c_two.is_sex())\nprint('-------------------------------------')\np = Person_test(name='小慕爸爸',sex='boy')\nprint(p.talk())\nprint(p.is_sex())",
        "detail": "阶段1.week04.day01.09.类的继承",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "阶段1.week04.day01.09.类的继承",
        "description": "阶段1.week04.day01.09.类的继承",
        "peekOfCode": "p = Person_test(name='小慕爸爸',sex='boy')\nprint(p.talk())\nprint(p.is_sex())",
        "detail": "阶段1.week04.day01.09.类的继承",
        "documentation": {}
    },
    {
        "label": "Parent",
        "kind": 6,
        "importPath": "阶段1.week04.day01.10.类的super函数",
        "description": "阶段1.week04.day01.10.类的super函数",
        "peekOfCode": "class Parent(object):\n    def __init__(self,p):\n        print('hello i am parent %s' % p)\nclass Child(Parent):\n    def __init__(self,c,p):\n        print('hello i am child %s' % c)\n        # 在python3.0之后的时代super里面的参数不用传也可以\n        # 代表我们想执行Parent的构造方法__init__\n        # p是传参给父类\n        # 也可以在这里直接传，不用实例化的方式",
        "detail": "阶段1.week04.day01.10.类的super函数",
        "documentation": {}
    },
    {
        "label": "Child",
        "kind": 6,
        "importPath": "阶段1.week04.day01.10.类的super函数",
        "description": "阶段1.week04.day01.10.类的super函数",
        "peekOfCode": "class Child(Parent):\n    def __init__(self,c,p):\n        print('hello i am child %s' % c)\n        # 在python3.0之后的时代super里面的参数不用传也可以\n        # 代表我们想执行Parent的构造方法__init__\n        # p是传参给父类\n        # 也可以在这里直接传，不用实例化的方式\n        # 'parent'\n        super(Child,self).__init__(p)\n        #   当前类 类的实例 使用父类的方法",
        "detail": "阶段1.week04.day01.10.类的super函数",
        "documentation": {}
    },
    {
        "label": "XiaomuFather",
        "kind": 6,
        "importPath": "阶段1.week04.day01.11.类的多态",
        "description": "阶段1.week04.day01.11.类的多态",
        "peekOfCode": "class XiaomuFather(object):\n    def talk(self):\n        print('小慕的爸爸说了一句话')\n# 2.书写一个子类，并且继承一个父类\nclass XiaomuBrother(XiaomuFather):\n    def run(self):\n        print('小慕哥哥在奔跑着')\n    # 重写了父类的方法\n    def talk(self):\n        print('小慕的哥哥说了一句话')",
        "detail": "阶段1.week04.day01.11.类的多态",
        "documentation": {}
    },
    {
        "label": "XiaomuBrother",
        "kind": 6,
        "importPath": "阶段1.week04.day01.11.类的多态",
        "description": "阶段1.week04.day01.11.类的多态",
        "peekOfCode": "class XiaomuBrother(XiaomuFather):\n    def run(self):\n        print('小慕哥哥在奔跑着')\n    # 重写了父类的方法\n    def talk(self):\n        print('小慕的哥哥说了一句话')\n# 为什么要去多态\n# 为什么要继承父类\n# 为了使用已经写好的类中的函数\n# 为了保留子类中某个和父类名称一样的函数的功能，这时候，我们就用到了类的多态。",
        "detail": "阶段1.week04.day01.11.类的多态",
        "documentation": {}
    },
    {
        "label": "Xiaomu",
        "kind": 6,
        "importPath": "阶段1.week04.day01.11.类的多态",
        "description": "阶段1.week04.day01.11.类的多态",
        "peekOfCode": "class Xiaomu(XiaomuFather):\n    def talk(self):\n        print('haha 小慕也可以开心的说自己的观点')\nif __name__ == '__main__':\n    xiaomu_brother = XiaomuBrother()\n    xiaomu_brother.run()\n    xiaomu_brother.talk()\n    xiaomu_father = XiaomuFather()\n    xiaomu_father.talk()\n    xiaomu = Xiaomu()",
        "detail": "阶段1.week04.day01.11.类的多态",
        "documentation": {}
    },
    {
        "label": "Tool",
        "kind": 6,
        "importPath": "阶段1.week04.day01.12.类的多重继承",
        "description": "阶段1.week04.day01.12.类的多重继承",
        "peekOfCode": "class Tool(object):\n    def work(self):\n        return 'tool work'\n    def car(self):\n        return 'car will run'\nclass Food(object):\n    def work(self):\n        return 'food work'\n    def cake(self):\n        return 'i like cake'",
        "detail": "阶段1.week04.day01.12.类的多重继承",
        "documentation": {}
    },
    {
        "label": "Food",
        "kind": 6,
        "importPath": "阶段1.week04.day01.12.类的多重继承",
        "description": "阶段1.week04.day01.12.类的多重继承",
        "peekOfCode": "class Food(object):\n    def work(self):\n        return 'food work'\n    def cake(self):\n        return 'i like cake'\nclass Person(Tool,Food):\n    # 占位符，避免因为不写类体而报错\n    pass\nif __name__ == '__main__':\n    p = Person()",
        "detail": "阶段1.week04.day01.12.类的多重继承",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "阶段1.week04.day01.12.类的多重继承",
        "description": "阶段1.week04.day01.12.类的多重继承",
        "peekOfCode": "class Person(Tool,Food):\n    # 占位符，避免因为不写类体而报错\n    pass\nif __name__ == '__main__':\n    p = Person()\n    p_car = p.car()\n    print(p_car)\n    p_cake = p.cake()\n    print(p_cake)\n    # 如果被继承的父类中有同名方法，优先继承第一个继承的父类里面的方法，即Tool",
        "detail": "阶段1.week04.day01.12.类的多重继承",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "阶段1.week04.day01.13.类的高级函数",
        "description": "阶段1.week04.day01.13.类的高级函数",
        "peekOfCode": "class Test(object):\n    def __str__(self):\n        return '这是关于这个类的描述'\ntest =Test()\nprint(test)\nprint('---------------------------')\n'''__getattr__的功能'''\n# 当调用的属性或者方法不存在时，会返回该方法定义的信息\n'''__getattr__的用法'''\n# def __getattr__(self,key):",
        "detail": "阶段1.week04.day01.13.类的高级函数",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "阶段1.week04.day01.13.类的高级函数",
        "description": "阶段1.week04.day01.13.类的高级函数",
        "peekOfCode": "class Test(object):\n    def __getattr__(self,key):\n        print('这个key：{}不存在'.format(key))\ntest = Test()\ntest.a # 这个key：a不存在\nprint('---------------------------')\n'''__setattr__的功能'''\n# 拦截当前类中不存在的属性与值\n'''__setattr__的用法'''\ndef __setattr__(self,key,value):",
        "detail": "阶段1.week04.day01.13.类的高级函数",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "阶段1.week04.day01.13.类的高级函数",
        "description": "阶段1.week04.day01.13.类的高级函数",
        "peekOfCode": "class Test(object):\n    def __setattr__(self,key,value):\n        print('key=',key,'value=',value)\n        if key not in self.__dict__:\n            self.__dict__[key] = value\n        print(self.__dict__)\nt = Test()\nt.name = 'dewei'\nt.name\nprint('---------------------------')",
        "detail": "阶段1.week04.day01.13.类的高级函数",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "阶段1.week04.day01.13.类的高级函数",
        "description": "阶段1.week04.day01.13.类的高级函数",
        "peekOfCode": "class Test(object):\n    def __call__(self,**kwargs):\n        print('arg is {}'.format(kwargs))\nt =Test()\n# 将实例化的类变成了函数的形式\nt(name = 'dewei')\nprint('---------------------------')\nclass Test2(object):\n    def __init__(self,attr=''):\n        self.__attr = attr",
        "detail": "阶段1.week04.day01.13.类的高级函数",
        "documentation": {}
    },
    {
        "label": "Test2",
        "kind": 6,
        "importPath": "阶段1.week04.day01.13.类的高级函数",
        "description": "阶段1.week04.day01.13.类的高级函数",
        "peekOfCode": "class Test2(object):\n    def __init__(self,attr=''):\n        self.__attr = attr\n        print('__init__',self.__attr)\n    def __getattr__(self,key):\n        if self.__attr:\n            key = '{}.{}'.format(self.__attr,key)\n        else:\n            key = key\n        print(key)",
        "detail": "阶段1.week04.day01.13.类的高级函数",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "阶段1.week04.day01.13.类的高级函数",
        "description": "阶段1.week04.day01.13.类的高级函数",
        "peekOfCode": "test = Test()\ntest.a # 这个key：a不存在\nprint('---------------------------')\n'''__setattr__的功能'''\n# 拦截当前类中不存在的属性与值\n'''__setattr__的用法'''\ndef __setattr__(self,key,value):\n    self.__dict__[key] = value\n# key: 当前的属性名\n# value: 当前的参数对应的值",
        "detail": "阶段1.week04.day01.13.类的高级函数",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "阶段1.week04.day01.13.类的高级函数",
        "description": "阶段1.week04.day01.13.类的高级函数",
        "peekOfCode": "t = Test()\nt.name = 'dewei'\nt.name\nprint('---------------------------')\n'''__call__的功能'''\n# 本质是将 一个类 变成  一个函数\n'''__call__的用法'''\ndef __call__(self,*args, **kwargs):\n    print('call will start')\n# 参数： 可传任意参数",
        "detail": "阶段1.week04.day01.13.类的高级函数",
        "documentation": {}
    },
    {
        "label": "t.name",
        "kind": 5,
        "importPath": "阶段1.week04.day01.13.类的高级函数",
        "description": "阶段1.week04.day01.13.类的高级函数",
        "peekOfCode": "t.name = 'dewei'\nt.name\nprint('---------------------------')\n'''__call__的功能'''\n# 本质是将 一个类 变成  一个函数\n'''__call__的用法'''\ndef __call__(self,*args, **kwargs):\n    print('call will start')\n# 参数： 可传任意参数\n# 返回值： 与函数情况相同可有可无",
        "detail": "阶段1.week04.day01.13.类的高级函数",
        "documentation": {}
    },
    {
        "label": "t(name",
        "kind": 5,
        "importPath": "阶段1.week04.day01.13.类的高级函数",
        "description": "阶段1.week04.day01.13.类的高级函数",
        "peekOfCode": "t(name = 'dewei')\nprint('---------------------------')\nclass Test2(object):\n    def __init__(self,attr=''):\n        self.__attr = attr\n        print('__init__',self.__attr)\n    def __getattr__(self,key):\n        if self.__attr:\n            key = '{}.{}'.format(self.__attr,key)\n        else:",
        "detail": "阶段1.week04.day01.13.类的高级函数",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "阶段1.week04.day01.13.类的高级函数",
        "description": "阶段1.week04.day01.13.类的高级函数",
        "peekOfCode": "t2 = Test2()\nt2.a.b.c()",
        "detail": "阶段1.week04.day01.13.类的高级函数",
        "documentation": {}
    },
    {
        "label": "StudentInfo",
        "kind": 6,
        "importPath": "阶段1.week04.day01.14.学生信息库",
        "description": "阶段1.week04.day01.14.学生信息库",
        "peekOfCode": "class StudentInfo(object):\n    def __init__(self,students):\n        self.students =students\n    # 通过id查询具体用户信息\n    def get_by_id(self,student_id):\n        if student_id not in self.students:\n            print('没有该学生信息')\n        else:\n            result = self.students.get(student_id)\n            print('查询信息为: 学号:{},姓名:{},年龄:{},班级:{},性别:{}'\\",
        "detail": "阶段1.week04.day01.14.学生信息库",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "阶段1.week04.day01.demo",
        "description": "阶段1.week04.day01.demo",
        "peekOfCode": "def log(func): \n    def wrapper(): \n        print('call %s():' % func.__name__) \n        func() \n    return wrapper\n@log \ndef hello():\n    print(\"hello world\")\ndef now():\n    print('2018-11-27')",
        "detail": "阶段1.week04.day01.demo",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "阶段1.week04.day01.demo",
        "description": "阶段1.week04.day01.demo",
        "peekOfCode": "def hello():\n    print(\"hello world\")\ndef now():\n    print('2018-11-27')\nnow()\nhello()",
        "detail": "阶段1.week04.day01.demo",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 2,
        "importPath": "阶段1.week04.day01.demo",
        "description": "阶段1.week04.day01.demo",
        "peekOfCode": "def now():\n    print('2018-11-27')\nnow()\nhello()",
        "detail": "阶段1.week04.day01.demo",
        "documentation": {}
    },
    {
        "label": "Base_study",
        "kind": 6,
        "importPath": "阶段1.week04.day01.demo2",
        "description": "阶段1.week04.day01.demo2",
        "peekOfCode": "class Base_study(object): \n    def study(self):\n        print( \"通过阅览书籍丰富知识\") \nclass Man_study(Base_study):\n    def study(self): \n        super(Man_study,self).study() \n        print(\"通过报刊丰富知识\")\nclass Woman_study(Base_study):\n    def study(self): \n        super(Woman_study,self).study()",
        "detail": "阶段1.week04.day01.demo2",
        "documentation": {}
    },
    {
        "label": "Man_study",
        "kind": 6,
        "importPath": "阶段1.week04.day01.demo2",
        "description": "阶段1.week04.day01.demo2",
        "peekOfCode": "class Man_study(Base_study):\n    def study(self): \n        super(Man_study,self).study() \n        print(\"通过报刊丰富知识\")\nclass Woman_study(Base_study):\n    def study(self): \n        super(Woman_study,self).study()\n        print(\"通过阅览新闻丰富知识\") \nman=Man_study() \nwoman=Woman_study()",
        "detail": "阶段1.week04.day01.demo2",
        "documentation": {}
    },
    {
        "label": "Woman_study",
        "kind": 6,
        "importPath": "阶段1.week04.day01.demo2",
        "description": "阶段1.week04.day01.demo2",
        "peekOfCode": "class Woman_study(Base_study):\n    def study(self): \n        super(Woman_study,self).study()\n        print(\"通过阅览新闻丰富知识\") \nman=Man_study() \nwoman=Woman_study()\nwoman.study()",
        "detail": "阶段1.week04.day01.demo2",
        "documentation": {}
    },
    {
        "label": "Vehicle",
        "kind": 6,
        "importPath": "阶段1.week04.day01.test3-3",
        "description": "阶段1.week04.day01.test3-3",
        "peekOfCode": "class Vehicle(object):\n # 自定义Vehicle类属性\n    trans_type = 'SUV'\n # 自定义实例的初始化方法\n    def __init__(self,speed,size):\n        self.speed = speed\n        self.size = size\n # 自定义实例方法show_info，打印实例的速度和体积\n    def show_info(self):\n        print(f'我的所属类型为：{self.trans_type},速度:{self.speed}km/h,体积:{self.size}')",
        "detail": "阶段1.week04.day01.test3-3",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "阶段1.week04.day01.test5-5",
        "description": "阶段1.week04.day01.test5-5",
        "peekOfCode": "class Person(object):\n# 重写实例对象的构造（初始化）方法\n    def __init__(self,name,gender):\n        self.name = name\n        self.gender = gender\n# 自定义实例方法，格式化打印实例属性name的值\n    def speak(self):\n        print(f'hello! 我是{self.name}')\n# 自定义实例方法，占位作用\n    def relation(self):",
        "detail": "阶段1.week04.day01.test5-5",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "阶段1.week04.day01.test5-5",
        "description": "阶段1.week04.day01.test5-5",
        "peekOfCode": "class Student(Person):\n# 重写实例对象的构造（初始化）方法，并调用父类实例属性的赋值\n    def __init__(self,name,gender,score,major,__stu_num='2018014002'):\n        super(Student, self).__init__(name,gender)\n        self.score = score\n        self.major = major\n        self.__stu_num = __stu_num\n# 自定义实例方法，格式化打印实例属性stu_num的\n    def speak(self):\n        print(f'hi,我是{self.name}\\n我的学号为{self.__stu_num},很高兴认识大家')",
        "detail": "阶段1.week04.day01.test5-5",
        "documentation": {}
    },
    {
        "label": "Point",
        "kind": 6,
        "importPath": "阶段1.week04.day01.test7-3",
        "description": "阶段1.week04.day01.test7-3",
        "peekOfCode": "class Point(object):\n    # 自定义Point类的构造(初始化)方法\n    def __init__(self,x,y):\n        self.x = x\n        self.y = y\n    # 自定义Point类对象的格式化输出函数(string())\n    def string(self):\n        print('{X:%s,Y:%s}' % (self.x,self.y))\nclass Circle(Point):\n    # 自定义Circle类的构造(初始化)方法",
        "detail": "阶段1.week04.day01.test7-3",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "阶段1.week04.day01.test7-3",
        "description": "阶段1.week04.day01.test7-3",
        "peekOfCode": "class Circle(Point):\n    # 自定义Circle类的构造(初始化)方法\n    def __init__(self,x,y,radius):\n        super(Circle,self).__init__(x,y)\n        self.radius = radius\n    # 自定义Circle类对象的格式化输出函数(string())\n    def string(self):\n        print('该图形初始化点为：{X:%s,Y:%s};{半径为：%s}' % (self.x,self.y,self.radius))\nclass Size(object):\n    # 自定义Size类的构造(初始化)方法",
        "detail": "阶段1.week04.day01.test7-3",
        "documentation": {}
    },
    {
        "label": "Size",
        "kind": 6,
        "importPath": "阶段1.week04.day01.test7-3",
        "description": "阶段1.week04.day01.test7-3",
        "peekOfCode": "class Size(object):\n    # 自定义Size类的构造(初始化)方法\n    def __init__(self,width,height):\n        self.width = width\n        self.height = height\n    # 自定义Size类对象的格式化输出函数(string())\n    def string(self):\n        print('{Width:%s,Height:%s}' % (self.width,self.height))\nclass Rectangle(Point, Size):\n    # 自定义Rectangle类的构造(初始化)方法，并在方法中调用父类的初始化方法以完成初",
        "detail": "阶段1.week04.day01.test7-3",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "阶段1.week04.day01.test7-3",
        "description": "阶段1.week04.day01.test7-3",
        "peekOfCode": "class Rectangle(Point, Size):\n    # 自定义Rectangle类的构造(初始化)方法，并在方法中调用父类的初始化方法以完成初\n    def __init__(self,x,y,width,height):\n        Point.__init__(self,x,y)\n        Size.__init__(self,width,height)\n    # 自定义Rectangle类对象的格式化输出函数(string()\n    def string(self):\n        print('该图形初始化点为：{X:%s,Y:%s};长宽分别为：{Width:%s,Height:%s}' % (self.x,self.y,self.width,self.height))\nif __name__ == \"__main__\":\n    # 实例化Circle对象，圆心为（5,5），半径为8",
        "detail": "阶段1.week04.day01.test7-3",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 2,
        "importPath": "阶段1.week04.day02.01.初探异常",
        "description": "阶段1.week04.day02.01.初探异常",
        "peekOfCode": "def upper(str_data):\n    new_str = ''\n    try:\n        new_str = str_data.upper()\n    except:\n        print('程序出错了')\n    return new_str\nresult = upper(1)\nprint('result:',result)\nprint('--------------------------------')",
        "detail": "阶段1.week04.day02.01.初探异常",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 2,
        "importPath": "阶段1.week04.day02.01.初探异常",
        "description": "阶段1.week04.day02.01.初探异常",
        "peekOfCode": "def upper(str_data):\n    new_str = ''\n    try:\n        new_str = str_data.upper()\n    except Exception as e:\n        print('程序出错了:{}'.format(e))\n    return new_str\nresult = upper(1)\nprint('result:',result)\nprint('--------------------------------')",
        "detail": "阶段1.week04.day02.01.初探异常",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "阶段1.week04.day02.01.初探异常",
        "description": "阶段1.week04.day02.01.初探异常",
        "peekOfCode": "def test1():\n    try:\n        print('try start')\n        print(name)\n    except (ZeroDivisionError,NameError) as e:\n        print(e) \ntest1()",
        "detail": "阶段1.week04.day02.01.初探异常",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week04.day02.01.初探异常",
        "description": "阶段1.week04.day02.01.初探异常",
        "peekOfCode": "result = upper(1)\nprint('result:',result)\nprint('--------------------------------')\n'''捕获通用异常类型'''\n# 无法确定是哪种异常的情况下使用的捕获方法\n# try:\n    # <代码块>\n# except Exception as e:\n    # <异常代码块>\ndef upper(str_data):",
        "detail": "阶段1.week04.day02.01.初探异常",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week04.day02.01.初探异常",
        "description": "阶段1.week04.day02.01.初探异常",
        "peekOfCode": "result = upper(1)\nprint('result:',result)\nprint('--------------------------------')\n'''捕获具体异常'''\n# 确定是那种异常的情况下使用的捕获方法\n# except <具体的异常类型> as e\ntry:\n    1/0\nexcept ZeroDivisionError as e:\n    print(e)",
        "detail": "阶段1.week04.day02.01.初探异常",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "阶段1.week04.day02.02.常见异常",
        "description": "阶段1.week04.day02.02.常见异常",
        "peekOfCode": "class Test(object):\n    pass\nt = Test()\ntry:\n    t.name #AttributeError\nexcept AttributeError as e:\n    print(e)\nd={'name':'xiaomu'}\ntry:\n    d['age']# KeyError",
        "detail": "阶段1.week04.day02.02.常见异常",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "阶段1.week04.day02.02.常见异常",
        "description": "阶段1.week04.day02.02.常见异常",
        "peekOfCode": "def test(a):\n    return a\ntry:\n    test()# TypeError\nexcept TypeError as e:\n    print(e)",
        "detail": "阶段1.week04.day02.02.常见异常",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "阶段1.week04.day02.02.常见异常",
        "description": "阶段1.week04.day02.02.常见异常",
        "peekOfCode": "t = Test()\ntry:\n    t.name #AttributeError\nexcept AttributeError as e:\n    print(e)\nd={'name':'xiaomu'}\ntry:\n    d['age']# KeyError\nexcept KeyError as e:\n    print('没有对应的键',e)",
        "detail": "阶段1.week04.day02.02.常见异常",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "阶段1.week04.day02.02.常见异常",
        "description": "阶段1.week04.day02.02.常见异常",
        "peekOfCode": "l = [1,2,3]\ntry:\n    l[5]# IndexError\nexcept IndexError as e:\n    print(e)\nname = 'dewei'\ntry:\n    int(name)# ValueError \nexcept ValueError as e:\n    print(e)",
        "detail": "阶段1.week04.day02.02.常见异常",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "阶段1.week04.day02.02.常见异常",
        "description": "阶段1.week04.day02.02.常见异常",
        "peekOfCode": "name = 'dewei'\ntry:\n    int(name)# ValueError \nexcept ValueError as e:\n    print(e)\ndef test(a):\n    return a\ntry:\n    test()# TypeError\nexcept TypeError as e:",
        "detail": "阶段1.week04.day02.02.常见异常",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "阶段1.week04.day02.03.异常中的finally",
        "description": "阶段1.week04.day02.03.异常中的finally",
        "peekOfCode": "def test1():\n    try:\n        1/0\n    except Exception as e:\n        print(e)\n    finally:\n        return 'finally'\nresult = test1()\nprint(result)\nprint('---------------------------------------')",
        "detail": "阶段1.week04.day02.03.异常中的finally",
        "documentation": {}
    },
    {
        "label": "test2",
        "kind": 2,
        "importPath": "阶段1.week04.day02.03.异常中的finally",
        "description": "阶段1.week04.day02.03.异常中的finally",
        "peekOfCode": "def test2():\n    try:\n        1/0\n    except Exception as e:\n        print('111')\n        return e\n    finally:\n        print('finally')\nresult = test2()\nprint(result)",
        "detail": "阶段1.week04.day02.03.异常中的finally",
        "documentation": {}
    },
    {
        "label": "test3",
        "kind": 2,
        "importPath": "阶段1.week04.day02.03.异常中的finally",
        "description": "阶段1.week04.day02.03.异常中的finally",
        "peekOfCode": "def test3():\n    try:\n        return 'try'\n    except Exception as e:\n        print(e)\n    finally:\n        print('finally test')\nresult = test3()\nprint(result)\nprint('---------------------------------------')",
        "detail": "阶段1.week04.day02.03.异常中的finally",
        "documentation": {}
    },
    {
        "label": "test4",
        "kind": 2,
        "importPath": "阶段1.week04.day02.03.异常中的finally",
        "description": "阶段1.week04.day02.03.异常中的finally",
        "peekOfCode": "def test4():\n    try:\n        1/0\n    except Exception as e:\n        return e\n    finally:\n        return 'finally'\nresult = test4()\nprint(result)\nprint('---------------------------------------')",
        "detail": "阶段1.week04.day02.03.异常中的finally",
        "documentation": {}
    },
    {
        "label": "test5",
        "kind": 2,
        "importPath": "阶段1.week04.day02.03.异常中的finally",
        "description": "阶段1.week04.day02.03.异常中的finally",
        "peekOfCode": "def test5():\n    try:\n        return 'try'\n    except Exception as e:\n        print('e')\n    finally:\n        return 'finally'\nresult = test5()\nprint(result)\nprint('---------------------------------------')",
        "detail": "阶段1.week04.day02.03.异常中的finally",
        "documentation": {}
    },
    {
        "label": "test6",
        "kind": 2,
        "importPath": "阶段1.week04.day02.03.异常中的finally",
        "description": "阶段1.week04.day02.03.异常中的finally",
        "peekOfCode": "def test6():\n    try:\n        1/0\n    finally:\n        return 'i am finally'\nresult = test6()\nprint(result)",
        "detail": "阶段1.week04.day02.03.异常中的finally",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week04.day02.03.异常中的finally",
        "description": "阶段1.week04.day02.03.异常中的finally",
        "peekOfCode": "result = test1()\nprint(result)\nprint('---------------------------------------')\ndef test2():\n    try:\n        1/0\n    except Exception as e:\n        print('111')\n        return e\n    finally:",
        "detail": "阶段1.week04.day02.03.异常中的finally",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week04.day02.03.异常中的finally",
        "description": "阶段1.week04.day02.03.异常中的finally",
        "peekOfCode": "result = test2()\nprint(result)\nprint('---------------------------------------')\ndef test3():\n    try:\n        return 'try'\n    except Exception as e:\n        print(e)\n    finally:\n        print('finally test')",
        "detail": "阶段1.week04.day02.03.异常中的finally",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week04.day02.03.异常中的finally",
        "description": "阶段1.week04.day02.03.异常中的finally",
        "peekOfCode": "result = test3()\nprint(result)\nprint('---------------------------------------')\ndef test4():\n    try:\n        1/0\n    except Exception as e:\n        return e\n    finally:\n        return 'finally'",
        "detail": "阶段1.week04.day02.03.异常中的finally",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week04.day02.03.异常中的finally",
        "description": "阶段1.week04.day02.03.异常中的finally",
        "peekOfCode": "result = test4()\nprint(result)\nprint('---------------------------------------')\ndef test5():\n    try:\n        return 'try'\n    except Exception as e:\n        print('e')\n    finally:\n        return 'finally'",
        "detail": "阶段1.week04.day02.03.异常中的finally",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week04.day02.03.异常中的finally",
        "description": "阶段1.week04.day02.03.异常中的finally",
        "peekOfCode": "result = test5()\nprint(result)\nprint('---------------------------------------')\ndef test6():\n    try:\n        1/0\n    finally:\n        return 'i am finally'\nresult = test6()\nprint(result)",
        "detail": "阶段1.week04.day02.03.异常中的finally",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week04.day02.03.异常中的finally",
        "description": "阶段1.week04.day02.03.异常中的finally",
        "peekOfCode": "result = test6()\nprint(result)",
        "detail": "阶段1.week04.day02.03.异常中的finally",
        "documentation": {}
    },
    {
        "label": "NewError",
        "kind": 6,
        "importPath": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "description": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "peekOfCode": "class NewError(Exception):\n    def __init__(self,message):\n        self.message = message\ndef test():\n    raise NewError('this is a bug')\ntry:\n    test()\nexcept Exception as e:\n    print(e)\nclass NumberLimitError(Exception):",
        "detail": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "documentation": {}
    },
    {
        "label": "NumberLimitError",
        "kind": 6,
        "importPath": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "description": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "peekOfCode": "class NumberLimitError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass NameLImitError(Exception):\n    def __init__(self,message):\n        self.message = message\ndef test5(name):\n    if name == 'dewei':\n        raise NameLImitError('名字不可以是dewei')\n    return name",
        "detail": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "documentation": {}
    },
    {
        "label": "NameLImitError",
        "kind": 6,
        "importPath": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "description": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "peekOfCode": "class NameLImitError(Exception):\n    def __init__(self,message):\n        self.message = message\ndef test5(name):\n    if name == 'dewei':\n        raise NameLImitError('名字不可以是dewei')\n    return name\ntry:\n    test5('dewei')\nexcept Exception as e:",
        "detail": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "description": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "peekOfCode": "def test(number):\n    if number == 100:\n        raise ValueError('number 不可以是100')\n    return number\ntest(50)\ndef test2(number):\n    try:\n        return test(number)\n    except ValueError as e:\n        return e",
        "detail": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "documentation": {}
    },
    {
        "label": "test2",
        "kind": 2,
        "importPath": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "description": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "peekOfCode": "def test2(number):\n    try:\n        return test(number)\n    except ValueError as e:\n        return e\nresult = test2(50)\nprint(result)\ndef  test3():\n    raise 'nihao'\n# TypeError: exceptions must derive from BaseException",
        "detail": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  test3():\n    raise 'nihao'\n# TypeError: exceptions must derive from BaseException\n# test3()\ndef test4(name):\n    if name=='dewei':\n        raise Exception('dewei不可以被填写')\n    return name\n# test4('dewei')\n'''自定义异常类'''"
        },
        "kind": 2,
        "importPath": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "description": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "peekOfCode": "def  test3():\n    raise 'nihao'\n# TypeError: exceptions must derive from BaseException\n# test3()\ndef test4(name):\n    if name=='dewei':\n        raise Exception('dewei不可以被填写')\n    return name\n# test4('dewei')\n'''自定义异常类'''",
        "detail": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "documentation": {}
    },
    {
        "label": "test4",
        "kind": 2,
        "importPath": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "description": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "peekOfCode": "def test4(name):\n    if name=='dewei':\n        raise Exception('dewei不可以被填写')\n    return name\n# test4('dewei')\n'''自定义异常类'''\n# 继承基类--Exception\n# 在构造函数中定义错误信息\nclass NewError(Exception):\n    def __init__(self,message):",
        "detail": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "description": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "peekOfCode": "def test():\n    raise NewError('this is a bug')\ntry:\n    test()\nexcept Exception as e:\n    print(e)\nclass NumberLimitError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass NameLImitError(Exception):",
        "detail": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "documentation": {}
    },
    {
        "label": "test5",
        "kind": 2,
        "importPath": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "description": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "peekOfCode": "def test5(name):\n    if name == 'dewei':\n        raise NameLImitError('名字不可以是dewei')\n    return name\ntry:\n    test5('dewei')\nexcept Exception as e:\n    print(e)   \ndef test6(number):\n    if number > 100:",
        "detail": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "documentation": {}
    },
    {
        "label": "test6",
        "kind": 2,
        "importPath": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "description": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "peekOfCode": "def test6(number):\n    if number > 100:\n        raise NumberLimitError('数字不可以大于100')\n    return number\ntry:\n    test6(101)\nexcept Exception as e:\n    print(e)",
        "detail": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "description": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "peekOfCode": "result = test2(50)\nprint(result)\ndef  test3():\n    raise 'nihao'\n# TypeError: exceptions must derive from BaseException\n# test3()\ndef test4(name):\n    if name=='dewei':\n        raise Exception('dewei不可以被填写')\n    return name",
        "detail": "阶段1.week04.day02.04.自定义异常与抛出异常",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "阶段1.week04.day02.06.如何查找程序中的bug",
        "description": "阶段1.week04.day02.06.如何查找程序中的bug",
        "peekOfCode": "def test1():\n    print(5)\ntest1()",
        "detail": "阶段1.week04.day02.06.如何查找程序中的bug",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "阶段1.week04.day02.06.如何查找程序中的bug",
        "description": "阶段1.week04.day02.06.如何查找程序中的bug",
        "peekOfCode": "a = 1\nprint(a)\nb = 2\nprint(b)\nc = 3\nprint(c)\nd = 4\nprint(d)\ndef test1():\n    print(5)",
        "detail": "阶段1.week04.day02.06.如何查找程序中的bug",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "阶段1.week04.day02.06.如何查找程序中的bug",
        "description": "阶段1.week04.day02.06.如何查找程序中的bug",
        "peekOfCode": "b = 2\nprint(b)\nc = 3\nprint(c)\nd = 4\nprint(d)\ndef test1():\n    print(5)\ntest1()",
        "detail": "阶段1.week04.day02.06.如何查找程序中的bug",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "阶段1.week04.day02.06.如何查找程序中的bug",
        "description": "阶段1.week04.day02.06.如何查找程序中的bug",
        "peekOfCode": "c = 3\nprint(c)\nd = 4\nprint(d)\ndef test1():\n    print(5)\ntest1()",
        "detail": "阶段1.week04.day02.06.如何查找程序中的bug",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "阶段1.week04.day02.06.如何查找程序中的bug",
        "description": "阶段1.week04.day02.06.如何查找程序中的bug",
        "peekOfCode": "d = 4\nprint(d)\ndef test1():\n    print(5)\ntest1()",
        "detail": "阶段1.week04.day02.06.如何查找程序中的bug",
        "documentation": {}
    },
    {
        "label": "ShortInputException",
        "kind": 6,
        "importPath": "阶段1.week04.day02.demo4-2",
        "description": "阶段1.week04.day02.demo4-2",
        "peekOfCode": "class ShortInputException(Exception): \n    # 自定义异常类 \n    def __init__(self, length, atleast):\n        self.length = length \n        self.atleast = atleast \ndef main():\n    try:\n        text = \"abc\" \n        if len(text) < 5: \n            raise ShortInputException(len(text),5) ",
        "detail": "阶段1.week04.day02.demo4-2",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "阶段1.week04.day02.demo4-2",
        "description": "阶段1.week04.day02.demo4-2",
        "peekOfCode": "def main():\n    try:\n        text = \"abc\" \n        if len(text) < 5: \n            raise ShortInputException(len(text),5) \n    except ShortInputException as result:\n        print(\"ShortInputException:输入的长度为: {},\" \"长度至少应该是：{}\".format(result.length, result.atleast)) \n    else:\n        print(\"没有异常的发生\") \n    finally: print(\"输入的字符串是{}\".format(text))   ",
        "detail": "阶段1.week04.day02.demo4-2",
        "documentation": {}
    },
    {
        "label": "NotArgError",
        "kind": 6,
        "importPath": "阶段1.week04.day02.学生信息库",
        "description": "阶段1.week04.day02.学生信息库",
        "peekOfCode": "class NotArgError(Exception):\n    def __init__(self,message):\n        self.message = message\n# 升级，使用类的形式\nclass StudentInfo(object):\n    def __init__(self,students):\n        self.students =students\n    # 通过id查询具体用户信息\n    def get_by_id(self,student_id):\n        if student_id not in self.students:",
        "detail": "阶段1.week04.day02.学生信息库",
        "documentation": {}
    },
    {
        "label": "StudentInfo",
        "kind": 6,
        "importPath": "阶段1.week04.day02.学生信息库",
        "description": "阶段1.week04.day02.学生信息库",
        "peekOfCode": "class StudentInfo(object):\n    def __init__(self,students):\n        self.students =students\n    # 通过id查询具体用户信息\n    def get_by_id(self,student_id):\n        if student_id not in self.students:\n            print('没有该学生信息')\n        else:\n            result = self.students.get(student_id)\n            print('查询信息为: 学号:{},姓名:{},年龄:{},班级:{},性别:{}'\\",
        "detail": "阶段1.week04.day02.学生信息库",
        "documentation": {}
    },
    {
        "label": "roar",
        "kind": 2,
        "importPath": "阶段1.week05.day01.animal.cat.action",
        "description": "阶段1.week05.day01.animal.cat.action",
        "peekOfCode": "def roar():\n    return 'cat roar'\ndef dump():\n    return 'cat dump'\ndef run():\n    return 'cat running'",
        "detail": "阶段1.week05.day01.animal.cat.action",
        "documentation": {}
    },
    {
        "label": "dump",
        "kind": 2,
        "importPath": "阶段1.week05.day01.animal.cat.action",
        "description": "阶段1.week05.day01.animal.cat.action",
        "peekOfCode": "def dump():\n    return 'cat dump'\ndef run():\n    return 'cat running'",
        "detail": "阶段1.week05.day01.animal.cat.action",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "阶段1.week05.day01.animal.cat.action",
        "description": "阶段1.week05.day01.animal.cat.action",
        "peekOfCode": "def run():\n    return 'cat running'",
        "detail": "阶段1.week05.day01.animal.cat.action",
        "documentation": {}
    },
    {
        "label": "cat_name",
        "kind": 5,
        "importPath": "阶段1.week05.day01.animal.cat.action",
        "description": "阶段1.week05.day01.animal.cat.action",
        "peekOfCode": "cat_name = 'dewei'\ndef roar():\n    return 'cat roar'\ndef dump():\n    return 'cat dump'\ndef run():\n    return 'cat running'",
        "detail": "阶段1.week05.day01.animal.cat.action",
        "documentation": {}
    },
    {
        "label": "roar",
        "kind": 2,
        "importPath": "阶段1.week05.day01.animal.dog.action",
        "description": "阶段1.week05.day01.animal.dog.action",
        "peekOfCode": "def roar():\n    return 'dog roar'\ndef dump():\n    return 'dog dump'\ndef run():\n    return 'dog running'",
        "detail": "阶段1.week05.day01.animal.dog.action",
        "documentation": {}
    },
    {
        "label": "dump",
        "kind": 2,
        "importPath": "阶段1.week05.day01.animal.dog.action",
        "description": "阶段1.week05.day01.animal.dog.action",
        "peekOfCode": "def dump():\n    return 'dog dump'\ndef run():\n    return 'dog running'",
        "detail": "阶段1.week05.day01.animal.dog.action",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "阶段1.week05.day01.animal.dog.action",
        "description": "阶段1.week05.day01.animal.dog.action",
        "peekOfCode": "def run():\n    return 'dog running'",
        "detail": "阶段1.week05.day01.animal.dog.action",
        "documentation": {}
    },
    {
        "label": "animal",
        "kind": 2,
        "importPath": "阶段1.week05.day01.animal.main",
        "description": "阶段1.week05.day01.animal.main",
        "peekOfCode": "def animal():\n    return 'i am animal module function'",
        "detail": "阶段1.week05.day01.animal.main",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "阶段1.week05.day01.05.python中的时间包datetime",
        "description": "阶段1.week05.day01.05.python中的时间包datetime",
        "peekOfCode": "now = datetime.now()\n# datetime.datetime(2021, 12, 13, 17, 21, 41, 170994)\nprint(now,type(now))\n# 2021-12-13 17:22:21.427537 <class 'datetime.datetime'>\n# 获取时间间隔\n# from datetime import datetime\nfrom datetime import timedelta\n# 使用方法\n# 间隔天数   间隔秒数     间隔毫秒数     间隔微秒数    间隔分钟   间隔小时   间隔周数\none_day = timedelta(days=1)",
        "detail": "阶段1.week05.day01.05.python中的时间包datetime",
        "documentation": {}
    },
    {
        "label": "one_day",
        "kind": 5,
        "importPath": "阶段1.week05.day01.05.python中的时间包datetime",
        "description": "阶段1.week05.day01.05.python中的时间包datetime",
        "peekOfCode": "one_day = timedelta(days=1)\n# 昨天的这个时候，用减\nyestoday = datetime.now() - one_day\n# 后天就可以相加\nprint(yestoday)\n# 将时间对象转换为时间字符串\n# 获取时间\n# from datetime import datetime\n# now = datetime.now()\n# 时间转字符串",
        "detail": "阶段1.week05.day01.05.python中的时间包datetime",
        "documentation": {}
    },
    {
        "label": "yestoday",
        "kind": 5,
        "importPath": "阶段1.week05.day01.05.python中的时间包datetime",
        "description": "阶段1.week05.day01.05.python中的时间包datetime",
        "peekOfCode": "yestoday = datetime.now() - one_day\n# 后天就可以相加\nprint(yestoday)\n# 将时间对象转换为时间字符串\n# 获取时间\n# from datetime import datetime\n# now = datetime.now()\n# 时间转字符串\ndate_str = now.strftime('%Y-%m-%d %H:%M:%S')\nprint(date_str,type(date_str))",
        "detail": "阶段1.week05.day01.05.python中的时间包datetime",
        "documentation": {}
    },
    {
        "label": "date_str",
        "kind": 5,
        "importPath": "阶段1.week05.day01.05.python中的时间包datetime",
        "description": "阶段1.week05.day01.05.python中的时间包datetime",
        "peekOfCode": "date_str = now.strftime('%Y-%m-%d %H:%M:%S')\nprint(date_str,type(date_str))\n# 2021-12-13 17:44:50 <class 'str'>\n# 将时间字符串转为时间类型\nstr_date = '2021-10-10 13:13:13'\n# 这里时间格式要一样\ndate_obj = datetime.strptime(str_date,'%Y-%m-%d %H:%M:%S')\nprint(date_obj,type(date_obj))\n# 2021-10-10 13:13:13 <class 'datetime.datetime'>\n'''datetime中生成时间戳函数'''",
        "detail": "阶段1.week05.day01.05.python中的时间包datetime",
        "documentation": {}
    },
    {
        "label": "str_date",
        "kind": 5,
        "importPath": "阶段1.week05.day01.05.python中的时间包datetime",
        "description": "阶段1.week05.day01.05.python中的时间包datetime",
        "peekOfCode": "str_date = '2021-10-10 13:13:13'\n# 这里时间格式要一样\ndate_obj = datetime.strptime(str_date,'%Y-%m-%d %H:%M:%S')\nprint(date_obj,type(date_obj))\n# 2021-10-10 13:13:13 <class 'datetime.datetime'>\n'''datetime中生成时间戳函数'''\n# from datetime import datetime\n# 使用方法\nnow = datetime.now()\nnow_timestamp =  datetime.timestamp(now)",
        "detail": "阶段1.week05.day01.05.python中的时间包datetime",
        "documentation": {}
    },
    {
        "label": "date_obj",
        "kind": 5,
        "importPath": "阶段1.week05.day01.05.python中的时间包datetime",
        "description": "阶段1.week05.day01.05.python中的时间包datetime",
        "peekOfCode": "date_obj = datetime.strptime(str_date,'%Y-%m-%d %H:%M:%S')\nprint(date_obj,type(date_obj))\n# 2021-10-10 13:13:13 <class 'datetime.datetime'>\n'''datetime中生成时间戳函数'''\n# from datetime import datetime\n# 使用方法\nnow = datetime.now()\nnow_timestamp =  datetime.timestamp(now)\nprint(now_timestamp)\n# now: datetime类型时间对象",
        "detail": "阶段1.week05.day01.05.python中的时间包datetime",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "阶段1.week05.day01.05.python中的时间包datetime",
        "description": "阶段1.week05.day01.05.python中的时间包datetime",
        "peekOfCode": "now = datetime.now()\nnow_timestamp =  datetime.timestamp(now)\nprint(now_timestamp)\n# now: datetime类型时间对象\n'''datetime时间戳转时间对象'''\n# from datetime import datetime\n# 使用方法\n# datetime.fromtimestamp(timestamp)\n# tomestamp: 时间戳\ndatetime_obj = datetime.fromtimestamp(now_timestamp)",
        "detail": "阶段1.week05.day01.05.python中的时间包datetime",
        "documentation": {}
    },
    {
        "label": "now_timestamp",
        "kind": 5,
        "importPath": "阶段1.week05.day01.05.python中的时间包datetime",
        "description": "阶段1.week05.day01.05.python中的时间包datetime",
        "peekOfCode": "now_timestamp =  datetime.timestamp(now)\nprint(now_timestamp)\n# now: datetime类型时间对象\n'''datetime时间戳转时间对象'''\n# from datetime import datetime\n# 使用方法\n# datetime.fromtimestamp(timestamp)\n# tomestamp: 时间戳\ndatetime_obj = datetime.fromtimestamp(now_timestamp)\nprint(datetime_obj)",
        "detail": "阶段1.week05.day01.05.python中的时间包datetime",
        "documentation": {}
    },
    {
        "label": "datetime_obj",
        "kind": 5,
        "importPath": "阶段1.week05.day01.05.python中的时间包datetime",
        "description": "阶段1.week05.day01.05.python中的时间包datetime",
        "peekOfCode": "datetime_obj = datetime.fromtimestamp(now_timestamp)\nprint(datetime_obj)",
        "detail": "阶段1.week05.day01.05.python中的时间包datetime",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "阶段1.week05.day01.06.时间包time",
        "description": "阶段1.week05.day01.06.时间包time",
        "peekOfCode": "now = time.time()\nprint(now)\n'''获取本地时间localtime'''\n# 导入包\n# import time\n# 使用方法\n# time.localtime(timestamp)\n# 参数：timestamp：时间戳（可不传）\n# import time\n# 不传参数是指当前时间",
        "detail": "阶段1.week05.day01.06.时间包time",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "阶段1.week05.day01.06.时间包time",
        "description": "阶段1.week05.day01.06.时间包time",
        "peekOfCode": "t = time.localtime(now)\nprint(t)\n# time.struct_time(tm_year=2021, tm_mon=12, tm_mday=13\n# , tm_hour=18, tm_min=22, tm_sec=39, tm_wday=0, tm_yday=347\n# , tm_isdst=0)\n'''\nlocaltime对应参数介绍\n属性名      介绍            取值范围\ntm_year     四位数年\ntm_mon      月              1-12",
        "detail": "阶段1.week05.day01.06.时间包time",
        "documentation": {}
    },
    {
        "label": "str_time",
        "kind": 5,
        "importPath": "阶段1.week05.day01.06.时间包time",
        "description": "阶段1.week05.day01.06.时间包time",
        "peekOfCode": "str_time = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime())\nprint(str_time,type(str_time))\n# strptime()将字符串对象变成时间对象\n# import time\n# 使用方法\n# time.strptime(time_str,format)\n# time_str: 符合时间格式的字符串\n# format：确保与time_str一致的格式化标准\ntime_obj = time.strptime('2010-12-12','%Y-%m-%d')\nprint(time_obj)",
        "detail": "阶段1.week05.day01.06.时间包time",
        "documentation": {}
    },
    {
        "label": "time_obj",
        "kind": 5,
        "importPath": "阶段1.week05.day01.06.时间包time",
        "description": "阶段1.week05.day01.06.时间包time",
        "peekOfCode": "time_obj = time.strptime('2010-12-12','%Y-%m-%d')\nprint(time_obj)",
        "detail": "阶段1.week05.day01.06.时间包time",
        "documentation": {}
    },
    {
        "label": "current_path",
        "kind": 5,
        "importPath": "阶段1.week05.day01.07.python中os包",
        "description": "阶段1.week05.day01.07.python中os包",
        "peekOfCode": "current_path = os.getcwd()\nprint(current_path)\nnew_path = '%s/test1/abc' % current_path\n# 创建文件夹\n# os.makedirs(new_path)\n# 列出当前路径里的文件\ndata = os.listdir(current_path)\nprint(data) \n# 删除文件夹\n# os.removedirs('test1/abc')",
        "detail": "阶段1.week05.day01.07.python中os包",
        "documentation": {}
    },
    {
        "label": "new_path",
        "kind": 5,
        "importPath": "阶段1.week05.day01.07.python中os包",
        "description": "阶段1.week05.day01.07.python中os包",
        "peekOfCode": "new_path = '%s/test1/abc' % current_path\n# 创建文件夹\n# os.makedirs(new_path)\n# 列出当前路径里的文件\ndata = os.listdir(current_path)\nprint(data) \n# 删除文件夹\n# os.removedirs('test1/abc')\n# 修改文件夹名字\n# os.rename('test1','test_new')",
        "detail": "阶段1.week05.day01.07.python中os包",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "阶段1.week05.day01.07.python中os包",
        "description": "阶段1.week05.day01.07.python中os包",
        "peekOfCode": "data = os.listdir(current_path)\nprint(data) \n# 删除文件夹\n# os.removedirs('test1/abc')\n# 修改文件夹名字\n# os.rename('test1','test_new')\n# 修改文件名字\n# os.rename('test_new/wenjian.txt','test_new/文件.txt')\n# 删除空文件夹\nos.rmdir('test_new/abc')",
        "detail": "阶段1.week05.day01.07.python中os包",
        "documentation": {}
    },
    {
        "label": "current_path",
        "kind": 5,
        "importPath": "阶段1.week05.day01.08.os.path模块常用方法",
        "description": "阶段1.week05.day01.08.os.path模块常用方法",
        "peekOfCode": "current_path = os.getcwd()\nprint(current_path)\nprint(os.path.isabs(current_path))\nprint(os.path.isabs('animal'))\nnew_path = '%s/test1' % current_path\n# 创建文件夹\nif not os.path.exists(new_path):\n    os.makedirs(new_path)\nnew_path2 = os.path.join(current_path,'test2','abc')\nif not os.path.exists(new_path2):",
        "detail": "阶段1.week05.day01.08.os.path模块常用方法",
        "documentation": {}
    },
    {
        "label": "new_path",
        "kind": 5,
        "importPath": "阶段1.week05.day01.08.os.path模块常用方法",
        "description": "阶段1.week05.day01.08.os.path模块常用方法",
        "peekOfCode": "new_path = '%s/test1' % current_path\n# 创建文件夹\nif not os.path.exists(new_path):\n    os.makedirs(new_path)\nnew_path2 = os.path.join(current_path,'test2','abc')\nif not os.path.exists(new_path2):\n    os.makedirs(new_path2)\nif not os.path.exists('test3'):\n    os.makedirs('test3')\n# if os.path.exists('test2/abc'):",
        "detail": "阶段1.week05.day01.08.os.path模块常用方法",
        "documentation": {}
    },
    {
        "label": "new_path2",
        "kind": 5,
        "importPath": "阶段1.week05.day01.08.os.path模块常用方法",
        "description": "阶段1.week05.day01.08.os.path模块常用方法",
        "peekOfCode": "new_path2 = os.path.join(current_path,'test2','abc')\nif not os.path.exists(new_path2):\n    os.makedirs(new_path2)\nif not os.path.exists('test3'):\n    os.makedirs('test3')\n# if os.path.exists('test2/abc'):\n#     os.removedirs('test2/abc')\n# if os.path.exists('test3'):\n#     os.rename('test3','test3_new')\n# if os.path.exists('%s/test3_new' % current_path):",
        "detail": "阶段1.week05.day01.08.os.path模块常用方法",
        "documentation": {}
    },
    {
        "label": "command",
        "kind": 5,
        "importPath": "阶段1.week05.day01.09.python中的sys模块",
        "description": "阶段1.week05.day01.09.python中的sys模块",
        "peekOfCode": "command = sys.argv[1]\nif command == 'modules':\n    modules = sys.modules\n    print(modules)\nelif command == 'path':\n    print('-------------------------------------------------------------------------------------')\n# sys.exit(1)\n    path = sys.path\n    print(path)\nelif command == 'encoding':",
        "detail": "阶段1.week05.day01.09.python中的sys模块",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "阶段1.week05.day01.test1",
        "description": "阶段1.week05.day01.test1",
        "peekOfCode": "def test1():\n    return 'test1'",
        "detail": "阶段1.week05.day01.test1",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 5,
        "importPath": "阶段1.week05.day02.01.文件的创建与写入",
        "description": "阶段1.week05.day02.01.文件的创建与写入",
        "peekOfCode": "f1 = open('b.txt','ab')\nmessage = 'python很有意思'\n# 有中文不能直接转成比特类型\n# 需要下面的形式\n_message = message.encode('utf-8')\nf1.write(_message)\nf1.close()\nl = ['\\n今天天气很好\\n','很适合学习python\\n','python是非常简单的编程语言\\n']\nf2 = open('b.txt','a',encoding='utf-8')\nf2.writelines(l)",
        "detail": "阶段1.week05.day02.01.文件的创建与写入",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "阶段1.week05.day02.01.文件的创建与写入",
        "description": "阶段1.week05.day02.01.文件的创建与写入",
        "peekOfCode": "message = 'python很有意思'\n# 有中文不能直接转成比特类型\n# 需要下面的形式\n_message = message.encode('utf-8')\nf1.write(_message)\nf1.close()\nl = ['\\n今天天气很好\\n','很适合学习python\\n','python是非常简单的编程语言\\n']\nf2 = open('b.txt','a',encoding='utf-8')\nf2.writelines(l)\nf2.close()",
        "detail": "阶段1.week05.day02.01.文件的创建与写入",
        "documentation": {}
    },
    {
        "label": "_message",
        "kind": 5,
        "importPath": "阶段1.week05.day02.01.文件的创建与写入",
        "description": "阶段1.week05.day02.01.文件的创建与写入",
        "peekOfCode": "_message = message.encode('utf-8')\nf1.write(_message)\nf1.close()\nl = ['\\n今天天气很好\\n','很适合学习python\\n','python是非常简单的编程语言\\n']\nf2 = open('b.txt','a',encoding='utf-8')\nf2.writelines(l)\nf2.close()",
        "detail": "阶段1.week05.day02.01.文件的创建与写入",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "阶段1.week05.day02.01.文件的创建与写入",
        "description": "阶段1.week05.day02.01.文件的创建与写入",
        "peekOfCode": "l = ['\\n今天天气很好\\n','很适合学习python\\n','python是非常简单的编程语言\\n']\nf2 = open('b.txt','a',encoding='utf-8')\nf2.writelines(l)\nf2.close()",
        "detail": "阶段1.week05.day02.01.文件的创建与写入",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 5,
        "importPath": "阶段1.week05.day02.01.文件的创建与写入",
        "description": "阶段1.week05.day02.01.文件的创建与写入",
        "peekOfCode": "f2 = open('b.txt','a',encoding='utf-8')\nf2.writelines(l)\nf2.close()",
        "detail": "阶段1.week05.day02.01.文件的创建与写入",
        "documentation": {}
    },
    {
        "label": "Open",
        "kind": 6,
        "importPath": "阶段1.week05.day02.02.创建、写入、读取的练习",
        "description": "阶段1.week05.day02.02.创建、写入、读取的练习",
        "peekOfCode": "class Open(object):\n    def __init__(self,path,mode = 'w',is_return =True):\n        self.path =path\n        self.mode = mode\n        self.is_return = is_return\n    def write(self,message):\n        f = open(self.path,self.mode,encoding='utf-8')\n        if self.is_return:\n            if not message.endswith('\\n'):\n                message = '%s\\n' % message",
        "detail": "阶段1.week05.day02.02.创建、写入、读取的练习",
        "documentation": {}
    },
    {
        "label": "create_package",
        "kind": 2,
        "importPath": "阶段1.week05.day02.02.创建、写入、读取的练习",
        "description": "阶段1.week05.day02.02.创建、写入、读取的练习",
        "peekOfCode": "def create_package(path):\n    if os.path.exists(path):\n        raise Exception('%s 已经存在不可创建' % path)\n    os.makedirs(path)\n    init_path = os.path.join(path,'__init__.py')\n    f = open(init_path,'w')\n    f.write('#coding:utf-8\\n')\n    f.close()\nclass Open(object):\n    def __init__(self,path,mode = 'w',is_return =True):",
        "detail": "阶段1.week05.day02.02.创建、写入、读取的练习",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "阶段1.week05.day02.03.文件的读操作",
        "description": "阶段1.week05.day02.03.文件的读操作",
        "peekOfCode": "f = open('b.txt','r',encoding='utf-8')\n# 返回整个文档,字符串类型\n# data = f.read()\n# 返回一个列表\n# data = f.readlines()\n# ['python很有意思python很有意思今天天气很好很适合学习pythonpython是非常简单的编程语言python很有意思\\n',\n# '今天天气很好\\n', '很适合学习python\\n', \n# 'python是非常简单的编程语言\\n']\n# _data = []\n# for item in data:",
        "detail": "阶段1.week05.day02.03.文件的读操作",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "阶段1.week05.day02.03.文件的读操作",
        "description": "阶段1.week05.day02.03.文件的读操作",
        "peekOfCode": "data = f.readline()\nprint('打开文件的模式',f.mode)\nprint('文件的名字',f.name)\nprint('文件是否已经关闭',f.closed)\nf.close()\nprint('文件是否已经关闭',f.closed)\nprint(data)",
        "detail": "阶段1.week05.day02.03.文件的读操作",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "阶段1.week05.day02.04.序列化",
        "description": "阶段1.week05.day02.04.序列化",
        "peekOfCode": "a = 1\nb ='str'\nc = [1,2,3]\nd = (4,5,6)\ne = {'name':'xiaomu'}\n# 序列化\na_json = json.dumps(a)\nb_json = json.dumps(b)\nc_json = json.dumps(c)\nd_json = json.dumps(d)",
        "detail": "阶段1.week05.day02.04.序列化",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "阶段1.week05.day02.04.序列化",
        "description": "阶段1.week05.day02.04.序列化",
        "peekOfCode": "c = [1,2,3]\nd = (4,5,6)\ne = {'name':'xiaomu'}\n# 序列化\na_json = json.dumps(a)\nb_json = json.dumps(b)\nc_json = json.dumps(c)\nd_json = json.dumps(d)\ne_json = json.dumps(e)\nprint('------------------------')",
        "detail": "阶段1.week05.day02.04.序列化",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "阶段1.week05.day02.04.序列化",
        "description": "阶段1.week05.day02.04.序列化",
        "peekOfCode": "d = (4,5,6)\ne = {'name':'xiaomu'}\n# 序列化\na_json = json.dumps(a)\nb_json = json.dumps(b)\nc_json = json.dumps(c)\nd_json = json.dumps(d)\ne_json = json.dumps(e)\nprint('------------------------')\nprint(a_json,type(a_json))",
        "detail": "阶段1.week05.day02.04.序列化",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "阶段1.week05.day02.04.序列化",
        "description": "阶段1.week05.day02.04.序列化",
        "peekOfCode": "e = {'name':'xiaomu'}\n# 序列化\na_json = json.dumps(a)\nb_json = json.dumps(b)\nc_json = json.dumps(c)\nd_json = json.dumps(d)\ne_json = json.dumps(e)\nprint('------------------------')\nprint(a_json,type(a_json))\nprint(b_json,type(b_json))",
        "detail": "阶段1.week05.day02.04.序列化",
        "documentation": {}
    },
    {
        "label": "a_json",
        "kind": 5,
        "importPath": "阶段1.week05.day02.04.序列化",
        "description": "阶段1.week05.day02.04.序列化",
        "peekOfCode": "a_json = json.dumps(a)\nb_json = json.dumps(b)\nc_json = json.dumps(c)\nd_json = json.dumps(d)\ne_json = json.dumps(e)\nprint('------------------------')\nprint(a_json,type(a_json))\nprint(b_json,type(b_json))\nprint(c_json,type(c_json))\nprint(d_json,type(d_json))",
        "detail": "阶段1.week05.day02.04.序列化",
        "documentation": {}
    },
    {
        "label": "b_json",
        "kind": 5,
        "importPath": "阶段1.week05.day02.04.序列化",
        "description": "阶段1.week05.day02.04.序列化",
        "peekOfCode": "b_json = json.dumps(b)\nc_json = json.dumps(c)\nd_json = json.dumps(d)\ne_json = json.dumps(e)\nprint('------------------------')\nprint(a_json,type(a_json))\nprint(b_json,type(b_json))\nprint(c_json,type(c_json))\nprint(d_json,type(d_json))\nprint(e_json,type(e_json))",
        "detail": "阶段1.week05.day02.04.序列化",
        "documentation": {}
    },
    {
        "label": "c_json",
        "kind": 5,
        "importPath": "阶段1.week05.day02.04.序列化",
        "description": "阶段1.week05.day02.04.序列化",
        "peekOfCode": "c_json = json.dumps(c)\nd_json = json.dumps(d)\ne_json = json.dumps(e)\nprint('------------------------')\nprint(a_json,type(a_json))\nprint(b_json,type(b_json))\nprint(c_json,type(c_json))\nprint(d_json,type(d_json))\nprint(e_json,type(e_json))\nprint(json.dumps(True),type(json.dumps(True)))",
        "detail": "阶段1.week05.day02.04.序列化",
        "documentation": {}
    },
    {
        "label": "d_json",
        "kind": 5,
        "importPath": "阶段1.week05.day02.04.序列化",
        "description": "阶段1.week05.day02.04.序列化",
        "peekOfCode": "d_json = json.dumps(d)\ne_json = json.dumps(e)\nprint('------------------------')\nprint(a_json,type(a_json))\nprint(b_json,type(b_json))\nprint(c_json,type(c_json))\nprint(d_json,type(d_json))\nprint(e_json,type(e_json))\nprint(json.dumps(True),type(json.dumps(True)))\nprint(json.dumps(None),type(json.dumps(None)))",
        "detail": "阶段1.week05.day02.04.序列化",
        "documentation": {}
    },
    {
        "label": "e_json",
        "kind": 5,
        "importPath": "阶段1.week05.day02.04.序列化",
        "description": "阶段1.week05.day02.04.序列化",
        "peekOfCode": "e_json = json.dumps(e)\nprint('------------------------')\nprint(a_json,type(a_json))\nprint(b_json,type(b_json))\nprint(c_json,type(c_json))\nprint(d_json,type(d_json))\nprint(e_json,type(e_json))\nprint(json.dumps(True),type(json.dumps(True)))\nprint(json.dumps(None),type(json.dumps(None)))\nprint('------------------------')",
        "detail": "阶段1.week05.day02.04.序列化",
        "documentation": {}
    },
    {
        "label": "read",
        "kind": 2,
        "importPath": "阶段1.week05.day02.05.序列化练习",
        "description": "阶段1.week05.day02.05.序列化练习",
        "peekOfCode": "def read(path):\n    with open(path,'r') as f:\n        _data = f.read()\n        # 反序列化\n        data = json.loads(_data)\n    return data\ndef write(path,data):\n    with open(path,'w') as f:\n        if isinstance(data,dict):\n            # 序列化",
        "detail": "阶段1.week05.day02.05.序列化练习",
        "documentation": {}
    },
    {
        "label": "write",
        "kind": 2,
        "importPath": "阶段1.week05.day02.05.序列化练习",
        "description": "阶段1.week05.day02.05.序列化练习",
        "peekOfCode": "def write(path,data):\n    with open(path,'w') as f:\n        if isinstance(data,dict):\n            # 序列化\n            _data = json.dumps(data)\n            f.write(_data)\n        else:\n            raise TypeError('data is dict')\n    return True\ndata = {",
        "detail": "阶段1.week05.day02.05.序列化练习",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "阶段1.week05.day02.05.序列化练习",
        "description": "阶段1.week05.day02.05.序列化练习",
        "peekOfCode": "data = {\n    'name':'小慕',\n    'age':18,\n    'top':176\n}\nif __name__ == '__main__':\n    # write('test.json',data)\n    result = read('test.json')\n    print(result)\n    result['sex'] = 'boy'",
        "detail": "阶段1.week05.day02.05.序列化练习",
        "documentation": {}
    },
    {
        "label": "read",
        "kind": 2,
        "importPath": "阶段1.week05.day02.06.yaml文件的读取",
        "description": "阶段1.week05.day02.06.yaml文件的读取",
        "peekOfCode": "def read(path):\n    with open(path,'r',encoding='utf-8') as f:\n        data = f.read()\n    # 三种方法选择一种即可\n    # result = yaml.load(data,Loader=yaml.FullLoader)\n    # result = yaml.load(data,Loader=yaml.CLoader)\n    result = yaml.safe_load(data)\n    f.close()\n    return result\nif __name__ == '__main__':",
        "detail": "阶段1.week05.day02.06.yaml文件的读取",
        "documentation": {}
    },
    {
        "label": "Open",
        "kind": 6,
        "importPath": "阶段1.week05.day02.package_open",
        "description": "阶段1.week05.day02.package_open",
        "peekOfCode": "class Open(object):\n    def __init__(self, path, mode='w', is_return=True):\n        self.path = path\n        self.mode = mode\n        self.is_return = is_return\n    def write(self, message):\n        f = open(self.path, mode=self.mode)\n        if self.is_return:\n            message = '%s\\n' % message\n        f.write(message)",
        "detail": "阶段1.week05.day02.package_open",
        "documentation": {}
    },
    {
        "label": "create_package",
        "kind": 2,
        "importPath": "阶段1.week05.day02.package_open",
        "description": "阶段1.week05.day02.package_open",
        "peekOfCode": "def create_package(path):\n    if os.path.exists(path):\n        raise Exception('%s 已经存在不可创建' % path)\n    os.makedirs(path)\n    init_path = os.path.join(path, '__init__.py')\n    f = open(init_path, 'w')\n    f.write('# coding:utf-8\\n')\n    f.close()\nclass Open(object):\n    def __init__(self, path, mode='w', is_return=True):",
        "detail": "阶段1.week05.day02.package_open",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "description": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "description": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "description": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "description": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "description": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "description": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "description": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "description": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "阶段1.week05.day03.env3.8.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "custom",
        "kind": 2,
        "importPath": "阶段1.week05.day03.01.加密模块hashlib",
        "description": "阶段1.week05.day03.01.加密模块hashlib",
        "peekOfCode": "def custom():\n    # 时间戳\n    a_timestamp = int(time.time())\n    #客户端计算的token \n    _token = '%s%s' % (base_sign,a_timestamp)\n    # print(_token)\n    # 转比特类型\n    hashobj = hashlib.sha1(_token.encode('utf-8'))\n    # 客户端加密后的token\n    a_token = hashobj.hexdigest()",
        "detail": "阶段1.week05.day03.01.加密模块hashlib",
        "documentation": {}
    },
    {
        "label": "b_service_check",
        "kind": 2,
        "importPath": "阶段1.week05.day03.01.加密模块hashlib",
        "description": "阶段1.week05.day03.01.加密模块hashlib",
        "peekOfCode": "def b_service_check(token,timestamp):\n    # 利用共识与a的时间戳 \n    # 服务端自己计算的token\n    _token = '%s%s' % (base_sign,timestamp)\n    # 服务端加密后的token\n    b_token = hashlib.sha1(_token.encode('utf-8')).hexdigest()\n    # 进行比对\n    if token == b_token:\n        return True\n    else:",
        "detail": "阶段1.week05.day03.01.加密模块hashlib",
        "documentation": {}
    },
    {
        "label": "hashobj",
        "kind": 5,
        "importPath": "阶段1.week05.day03.01.加密模块hashlib",
        "description": "阶段1.week05.day03.01.加密模块hashlib",
        "peekOfCode": "hashobj = hashlib.md5(b'hello')\n# 将加密对象按照16进制生成加密字符串\nresult = hashobj.hexdigest()\nprint(result)\n# 5d41402abc4b2a76b9719d911017c592\n# 使用场景\nimport time\n# 共识，也叫公钥\nbase_sign = 'muke'\ndef custom():",
        "detail": "阶段1.week05.day03.01.加密模块hashlib",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week05.day03.01.加密模块hashlib",
        "description": "阶段1.week05.day03.01.加密模块hashlib",
        "peekOfCode": "result = hashobj.hexdigest()\nprint(result)\n# 5d41402abc4b2a76b9719d911017c592\n# 使用场景\nimport time\n# 共识，也叫公钥\nbase_sign = 'muke'\ndef custom():\n    # 时间戳\n    a_timestamp = int(time.time())",
        "detail": "阶段1.week05.day03.01.加密模块hashlib",
        "documentation": {}
    },
    {
        "label": "base_sign",
        "kind": 5,
        "importPath": "阶段1.week05.day03.01.加密模块hashlib",
        "description": "阶段1.week05.day03.01.加密模块hashlib",
        "peekOfCode": "base_sign = 'muke'\ndef custom():\n    # 时间戳\n    a_timestamp = int(time.time())\n    #客户端计算的token \n    _token = '%s%s' % (base_sign,a_timestamp)\n    # print(_token)\n    # 转比特类型\n    hashobj = hashlib.sha1(_token.encode('utf-8'))\n    # 客户端加密后的token",
        "detail": "阶段1.week05.day03.01.加密模块hashlib",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 2,
        "importPath": "阶段1.week05.day03.02.base64模块",
        "description": "阶段1.week05.day03.02.base64模块",
        "peekOfCode": "def encode(data):\n    if isinstance(data,str):\n        # 转byte\n        data = data.encode('utf-8')\n    elif isinstance(data,bytes):\n        data = data\n    else:\n        raise TypeError('data need bytes or str')\n    # 加密后的字符串是byte型，但是字符串操作方便，所以转换成字符串类型\n    # return base64.encodebytes(data).decode('utf-8')",
        "detail": "阶段1.week05.day03.02.base64模块",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "阶段1.week05.day03.02.base64模块",
        "description": "阶段1.week05.day03.02.base64模块",
        "peekOfCode": "def decode(data):\n    if not isinstance(data,bytes):\n        raise TypeError('data need bytes')\n    # 优化\n    replace_one_b = replace_one.encode('utf-8')\n    replace_two_b = replace_two.encode('utf-8')\n    data = data.replace(replace_one_b,b'a').replace(replace_two_b,b'2')\n    # 对加密后的比特数据解密，然后转成字符串\n    return base64.decodebytes(data).decode('utf-8')\nif __name__ == '__main__':",
        "detail": "阶段1.week05.day03.02.base64模块",
        "documentation": {}
    },
    {
        "label": "replace_one",
        "kind": 5,
        "importPath": "阶段1.week05.day03.02.base64模块",
        "description": "阶段1.week05.day03.02.base64模块",
        "peekOfCode": "replace_one = '%'\nreplace_two = '$'\n# 封装encode\ndef encode(data):\n    if isinstance(data,str):\n        # 转byte\n        data = data.encode('utf-8')\n    elif isinstance(data,bytes):\n        data = data\n    else:",
        "detail": "阶段1.week05.day03.02.base64模块",
        "documentation": {}
    },
    {
        "label": "replace_two",
        "kind": 5,
        "importPath": "阶段1.week05.day03.02.base64模块",
        "description": "阶段1.week05.day03.02.base64模块",
        "peekOfCode": "replace_two = '$'\n# 封装encode\ndef encode(data):\n    if isinstance(data,str):\n        # 转byte\n        data = data.encode('utf-8')\n    elif isinstance(data,bytes):\n        data = data\n    else:\n        raise TypeError('data need bytes or str')",
        "detail": "阶段1.week05.day03.02.base64模块",
        "documentation": {}
    },
    {
        "label": "init_log",
        "kind": 2,
        "importPath": "阶段1.week05.day03.03.日志模块",
        "description": "阶段1.week05.day03.03.日志模块",
        "peekOfCode": "def init_log(path):\n    if os.path.exists(path):\n        # 存在就追加\n        mode = 'a'\n    else:\n        # 不存在就创建\n        mode = 'w'\n    file = open(path,mode,encoding='utf-8')\n    logging.basicConfig(level=logging.INFO,\n                    format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',",
        "detail": "阶段1.week05.day03.03.日志模块",
        "documentation": {}
    },
    {
        "label": "current_path",
        "kind": 5,
        "importPath": "阶段1.week05.day03.03.日志模块",
        "description": "阶段1.week05.day03.03.日志模块",
        "peekOfCode": "current_path = os.getcwd()\npath = os.path.join(current_path,'new_back.log')\nlog,file = init_log(path)\nlog.info('这是第一个记录的日志信息')\nlog.warning('这是一个警告')\nlog.error('这是一个重大的错误信息')\nfile.close()",
        "detail": "阶段1.week05.day03.03.日志模块",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "阶段1.week05.day03.03.日志模块",
        "description": "阶段1.week05.day03.03.日志模块",
        "peekOfCode": "path = os.path.join(current_path,'new_back.log')\nlog,file = init_log(path)\nlog.info('这是第一个记录的日志信息')\nlog.warning('这是一个警告')\nlog.error('这是一个重大的错误信息')\nfile.close()",
        "detail": "阶段1.week05.day03.03.日志模块",
        "documentation": {}
    },
    {
        "label": "log,file",
        "kind": 5,
        "importPath": "阶段1.week05.day03.03.日志模块",
        "description": "阶段1.week05.day03.03.日志模块",
        "peekOfCode": "log,file = init_log(path)\nlog.info('这是第一个记录的日志信息')\nlog.warning('这是一个警告')\nlog.error('这是一个重大的错误信息')\nfile.close()",
        "detail": "阶段1.week05.day03.03.日志模块",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "阶段1.week05.day03.05.python的内置函数总结",
        "description": "阶段1.week05.day03.05.python的内置函数总结",
        "peekOfCode": "class Test(object):\n    a=1\n    b=2\n    def __init__(self):\n        self.a = self.a\n        self.b = self.b\ntest = Test()\nresult = vars(test)\nprint(result)\n# True",
        "detail": "阶段1.week05.day03.05.python的内置函数总结",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "阶段1.week05.day03.05.python的内置函数总结",
        "description": "阶段1.week05.day03.05.python的内置函数总结",
        "peekOfCode": "test = Test()\nresult = vars(test)\nprint(result)\n# True\nprint(hasattr(test,'a'))\n# False\nprint(hasattr(test,'c'))\nsetattr(test,'c',3)\nprint(test.c)\nif hasattr(list,'append'):",
        "detail": "阶段1.week05.day03.05.python的内置函数总结",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week05.day03.05.python的内置函数总结",
        "description": "阶段1.week05.day03.05.python的内置函数总结",
        "peekOfCode": "result = vars(test)\nprint(result)\n# True\nprint(hasattr(test,'a'))\n# False\nprint(hasattr(test,'c'))\nsetattr(test,'c',3)\nprint(test.c)\nif hasattr(list,'append'):\n    print(getattr(list,'append'))",
        "detail": "阶段1.week05.day03.05.python的内置函数总结",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "阶段1.week05.day03.05.python的内置函数总结",
        "description": "阶段1.week05.day03.05.python的内置函数总结",
        "peekOfCode": "a = ['',None,True,0]\nprint(any(a))\n# True",
        "detail": "阶段1.week05.day03.05.python的内置函数总结",
        "documentation": {}
    },
    {
        "label": "chioce_gifts",
        "kind": 2,
        "importPath": "阶段1.week05.day03.07.random练习",
        "description": "阶段1.week05.day03.07.random练习",
        "peekOfCode": "def chioce_gifts():\n    gift = random.choice(gifts)\n    print(f'你得到了{gift}')\n# 这个函数增加了中奖的概率\ndef chioce_gift_new():\n    # 在0-99随机返回一个数字\n    count = random.randrange(0,100,1) \n    if  0< count <= 50:  # 50%\n        print('你中了一个iPhone')\n    elif count <= 70: # 20%",
        "detail": "阶段1.week05.day03.07.random练习",
        "documentation": {}
    },
    {
        "label": "chioce_gift_new",
        "kind": 2,
        "importPath": "阶段1.week05.day03.07.random练习",
        "description": "阶段1.week05.day03.07.random练习",
        "peekOfCode": "def chioce_gift_new():\n    # 在0-99随机返回一个数字\n    count = random.randrange(0,100,1) \n    if  0< count <= 50:  # 50%\n        print('你中了一个iPhone')\n    elif count <= 70: # 20%\n        print('你中了一个ipad')\n    elif count <= 90: # 20%\n        print('你中了一个tv电视')\n    else: # 10%",
        "detail": "阶段1.week05.day03.07.random练习",
        "documentation": {}
    },
    {
        "label": "gifts",
        "kind": 5,
        "importPath": "阶段1.week05.day03.07.random练习",
        "description": "阶段1.week05.day03.07.random练习",
        "peekOfCode": "gifts = ['iphone','ipad','car','tv']\ndef chioce_gifts():\n    gift = random.choice(gifts)\n    print(f'你得到了{gift}')\n# 这个函数增加了中奖的概率\ndef chioce_gift_new():\n    # 在0-99随机返回一个数字\n    count = random.randrange(0,100,1) \n    if  0< count <= 50:  # 50%\n        print('你中了一个iPhone')",
        "detail": "阶段1.week05.day03.07.random练习",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "阶段1.week05.day03.08.迭代器",
        "description": "阶段1.week05.day03.08.迭代器",
        "peekOfCode": "def test():\n    for i in range(10):\n        # 把每次生成的i放入内存中\n        yield i \nres = test()\n# 只有调用next()函数的时候 for循环才会通过 yield把数据放入内存中\nprint(next(res))\nprint(next(res))\nprint(next(res))\nprint(next(res))",
        "detail": "阶段1.week05.day03.08.迭代器",
        "documentation": {}
    },
    {
        "label": "iter_obj",
        "kind": 5,
        "importPath": "阶段1.week05.day03.08.迭代器",
        "description": "阶段1.week05.day03.08.迭代器",
        "peekOfCode": "iter_obj = iter([1,2,3])\n# print(next(iter_obj))\n# print(next(iter_obj))\n# print(next(iter_obj))\n# # 超出的会报StopIteration\n# print(next(iter_obj))\n# 通过for循环得到迭代器的数据\nfor i in iter_obj:\n    print(i)\nprint('-----------------------') ",
        "detail": "阶段1.week05.day03.08.迭代器",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "阶段1.week05.day03.08.迭代器",
        "description": "阶段1.week05.day03.08.迭代器",
        "peekOfCode": "res = test()\n# 只有调用next()函数的时候 for循环才会通过 yield把数据放入内存中\nprint(next(res))\nprint(next(res))\nprint(next(res))\nprint(next(res))\nprint(next(res))\n# ...\nprint('-----------------------') \n# 2.例子",
        "detail": "阶段1.week05.day03.08.迭代器",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "阶段1.week05.day03.08.迭代器",
        "description": "阶段1.week05.day03.08.迭代器",
        "peekOfCode": "res = (i for i in [1,2,3])\nprint(next(res))\nprint(next(res))\nprint(next(res))\nprint('-----------------------') \n'''迭代器常用方法之for循环获取'''\n# 不会报错\n# 例子\nres = ( i for i in [1,2,3])\nfor item in res:",
        "detail": "阶段1.week05.day03.08.迭代器",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "阶段1.week05.day03.08.迭代器",
        "description": "阶段1.week05.day03.08.迭代器",
        "peekOfCode": "res = ( i for i in [1,2,3])\nfor item in res:\n    print(item)",
        "detail": "阶段1.week05.day03.08.迭代器",
        "documentation": {}
    },
    {
        "label": "make_iter",
        "kind": 2,
        "importPath": "阶段1.week05.day03.09.迭代器练习",
        "description": "阶段1.week05.day03.09.迭代器练习",
        "peekOfCode": "def make_iter():\n    # 通过yield制作迭代器\n    for i in range(10):\n        yield i\niter_obj = make_iter()\nprint(type(iter_obj))\n# <class 'generator'>\nfor i in iter_obj:\n    print(i)\n# 迭代器把数据放在内存中，每一次被读取后都会被释放",
        "detail": "阶段1.week05.day03.09.迭代器练习",
        "documentation": {}
    },
    {
        "label": "iter_obj",
        "kind": 5,
        "importPath": "阶段1.week05.day03.09.迭代器练习",
        "description": "阶段1.week05.day03.09.迭代器练习",
        "peekOfCode": "iter_obj = iter((1,2,3))\ndef _next(iter_obj):\n    try:\n        return next(iter_obj)\n    except StopIteration:\n        return None\n# print(_next(iter_obj))\n# print(_next(iter_obj))\n# print(_next(iter_obj))\n# print(_next(iter_obj))",
        "detail": "阶段1.week05.day03.09.迭代器练习",
        "documentation": {}
    },
    {
        "label": "iter_obj",
        "kind": 5,
        "importPath": "阶段1.week05.day03.09.迭代器练习",
        "description": "阶段1.week05.day03.09.迭代器练习",
        "peekOfCode": "iter_obj = make_iter()\nprint(type(iter_obj))\n# <class 'generator'>\nfor i in iter_obj:\n    print(i)\n# 迭代器把数据放在内存中，每一次被读取后都会被释放\n# 所以下面的迭代不会执行\nprint('-----------------------')\nfor i in iter_obj:\n    print(i)",
        "detail": "阶段1.week05.day03.09.迭代器练习",
        "documentation": {}
    },
    {
        "label": "iter_obj",
        "kind": 5,
        "importPath": "阶段1.week05.day03.09.迭代器练习",
        "description": "阶段1.week05.day03.09.迭代器练习",
        "peekOfCode": "iter_obj = (i for i in range(10))\nfor i in iter_obj:\n    print(i)",
        "detail": "阶段1.week05.day03.09.迭代器练习",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "阶段1.week05.day03.10.python中的高阶函数",
        "description": "阶段1.week05.day03.10.python中的高阶函数",
        "peekOfCode": "res = filter(lambda x: x > 1,[0,1,2])\nprint(res)\n# 返回值\n# <filter object at 0x063672B0>\nfor i in res:\n    print(i)\nprint('-------------------------------')\n'''map的功能'''\n# 对列表中的每个成员是否满足条件返回对应的True与False\n'''map使用方法'''",
        "detail": "阶段1.week05.day03.10.python中的高阶函数",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "阶段1.week05.day03.10.python中的高阶函数",
        "description": "阶段1.week05.day03.10.python中的高阶函数",
        "peekOfCode": "res = map(lambda x: x > 1,[0,1,2])\nprint(res)\n# 返回值\n# <map object at 0x06367808>\nfor i in res:\n    print(i)\nprint('-------------------------------')\n'''reduce的功能'''\n# 对循环前后两个数据进行累加\n# 返回的不是迭代器",
        "detail": "阶段1.week05.day03.10.python中的高阶函数",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "阶段1.week05.day03.10.python中的高阶函数",
        "description": "阶段1.week05.day03.10.python中的高阶函数",
        "peekOfCode": "res = reduce(lambda x,y: x+y,[0,1,2])\nprint(res)\n# 返回值\nfor i in res:\n    print(i)",
        "detail": "阶段1.week05.day03.10.python中的高阶函数",
        "documentation": {}
    },
    {
        "label": "filter_func",
        "kind": 2,
        "importPath": "阶段1.week05.day03.11.高阶函数练习",
        "description": "阶段1.week05.day03.11.高阶函数练习",
        "peekOfCode": "def filter_func(item):\n    if 'e' in item:\n        return True\nfilter_result = filter(filter_func,friuts)\nfor i in filter_result:\n    print(i)\nmap_result = map(filter_func,friuts)\nprint(list(map_result))\n# [True, None, True]\n# 由于第二个不含e",
        "detail": "阶段1.week05.day03.11.高阶函数练习",
        "documentation": {}
    },
    {
        "label": "friuts",
        "kind": 5,
        "importPath": "阶段1.week05.day03.11.高阶函数练习",
        "description": "阶段1.week05.day03.11.高阶函数练习",
        "peekOfCode": "friuts = ['apple','banana','orange']\n#result是一个可迭代的对象 \nresult = filter(lambda x: 'e' in x,friuts)\nprint(list(result))\n# 上面使用过了，在内存中就会销毁，所以下面的不会执行\nfor i in result:\n    print(i)\nprint('-----------------------')\ndef filter_func(item):\n    if 'e' in item:",
        "detail": "阶段1.week05.day03.11.高阶函数练习",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week05.day03.11.高阶函数练习",
        "description": "阶段1.week05.day03.11.高阶函数练习",
        "peekOfCode": "result = filter(lambda x: 'e' in x,friuts)\nprint(list(result))\n# 上面使用过了，在内存中就会销毁，所以下面的不会执行\nfor i in result:\n    print(i)\nprint('-----------------------')\ndef filter_func(item):\n    if 'e' in item:\n        return True\nfilter_result = filter(filter_func,friuts)",
        "detail": "阶段1.week05.day03.11.高阶函数练习",
        "documentation": {}
    },
    {
        "label": "filter_result",
        "kind": 5,
        "importPath": "阶段1.week05.day03.11.高阶函数练习",
        "description": "阶段1.week05.day03.11.高阶函数练习",
        "peekOfCode": "filter_result = filter(filter_func,friuts)\nfor i in filter_result:\n    print(i)\nmap_result = map(filter_func,friuts)\nprint(list(map_result))\n# [True, None, True]\n# 由于第二个不含e\nfrom functools import reduce\n# 累加\nadd_result = reduce(lambda x,y:x+y,[0,1,2,3,4,5])",
        "detail": "阶段1.week05.day03.11.高阶函数练习",
        "documentation": {}
    },
    {
        "label": "map_result",
        "kind": 5,
        "importPath": "阶段1.week05.day03.11.高阶函数练习",
        "description": "阶段1.week05.day03.11.高阶函数练习",
        "peekOfCode": "map_result = map(filter_func,friuts)\nprint(list(map_result))\n# [True, None, True]\n# 由于第二个不含e\nfrom functools import reduce\n# 累加\nadd_result = reduce(lambda x,y:x+y,[0,1,2,3,4,5])\n# 累乘\nmultip_result = reduce(lambda x,y:x*y,[1,2,3,4,5])\nprint(add_result) # 15",
        "detail": "阶段1.week05.day03.11.高阶函数练习",
        "documentation": {}
    },
    {
        "label": "add_result",
        "kind": 5,
        "importPath": "阶段1.week05.day03.11.高阶函数练习",
        "description": "阶段1.week05.day03.11.高阶函数练习",
        "peekOfCode": "add_result = reduce(lambda x,y:x+y,[0,1,2,3,4,5])\n# 累乘\nmultip_result = reduce(lambda x,y:x*y,[1,2,3,4,5])\nprint(add_result) # 15\nprint(multip_result)\n# 字符串累加\nadd_result_str = reduce(lambda x,y:x+y,friuts)\n# 字符串累乘 报错\n# multip_result_str = reduce(lambda x,y:x*y,friuts)\n# print(multip_result_str)",
        "detail": "阶段1.week05.day03.11.高阶函数练习",
        "documentation": {}
    },
    {
        "label": "multip_result",
        "kind": 5,
        "importPath": "阶段1.week05.day03.11.高阶函数练习",
        "description": "阶段1.week05.day03.11.高阶函数练习",
        "peekOfCode": "multip_result = reduce(lambda x,y:x*y,[1,2,3,4,5])\nprint(add_result) # 15\nprint(multip_result)\n# 字符串累加\nadd_result_str = reduce(lambda x,y:x+y,friuts)\n# 字符串累乘 报错\n# multip_result_str = reduce(lambda x,y:x*y,friuts)\n# print(multip_result_str)",
        "detail": "阶段1.week05.day03.11.高阶函数练习",
        "documentation": {}
    },
    {
        "label": "add_result_str",
        "kind": 5,
        "importPath": "阶段1.week05.day03.11.高阶函数练习",
        "description": "阶段1.week05.day03.11.高阶函数练习",
        "peekOfCode": "add_result_str = reduce(lambda x,y:x+y,friuts)\n# 字符串累乘 报错\n# multip_result_str = reduce(lambda x,y:x*y,friuts)\n# print(multip_result_str)",
        "detail": "阶段1.week05.day03.11.高阶函数练习",
        "documentation": {}
    },
    {
        "label": "work_a",
        "kind": 2,
        "importPath": "阶段1.week06.day01.03.创建多进程",
        "description": "阶段1.week06.day01.03.创建多进程",
        "peekOfCode": "def work_a():\n    for i in range(10):\n        # os.getpid() 返回当前函数执行到的位置，进程号码\n        print(i,'a',os.getpid())\n        time.sleep(1)\ndef work_b():\n    for i in range(10):\n        print(i,'b', os.getpid())\n        time.sleep(1)\nif __name__ == '__main__':",
        "detail": "阶段1.week06.day01.03.创建多进程",
        "documentation": {}
    },
    {
        "label": "work_b",
        "kind": 2,
        "importPath": "阶段1.week06.day01.03.创建多进程",
        "description": "阶段1.week06.day01.03.创建多进程",
        "peekOfCode": "def work_b():\n    for i in range(10):\n        print(i,'b', os.getpid())\n        time.sleep(1)\nif __name__ == '__main__':\n    start = time.time() # *主进程\n    # 情况1.\n    # 是同一个进程id\n    # 说明在同一个进程在执行\n    # work_a() # *主进程",
        "detail": "阶段1.week06.day01.03.创建多进程",
        "documentation": {}
    },
    {
        "label": "work",
        "kind": 2,
        "importPath": "阶段1.week06.day01.04.进程池与进程锁",
        "description": "阶段1.week06.day01.04.进程池与进程锁",
        "peekOfCode": "def work(count,lock):\n    # 进程加锁\n    # 进程加锁后每次只执行一个进程\n    lock.acquire()\n    print(count,os.getpid())\n    time.sleep(5)\n    # 进程解锁\n    lock.release()\n    # 通过进程模块执行的函数无法获取返回值\n    # 但是我们可以通过异步函数apply_async获得",
        "detail": "阶段1.week06.day01.04.进程池与进程锁",
        "documentation": {}
    },
    {
        "label": "Work",
        "kind": 6,
        "importPath": "阶段1.week06.day01.05.进程的通信",
        "description": "阶段1.week06.day01.05.进程的通信",
        "peekOfCode": "class Work(object):\n    # q是传入的队列对象\n    def __init__(self,q):\n        self.q = q\n    # 发送信息\n    def send(self,message):\n        if not isinstance(message,str):\n            # 序列化\n            message = json.dumps(message)\n        self.q.put(message)",
        "detail": "阶段1.week06.day01.05.进程的通信",
        "documentation": {}
    },
    {
        "label": "work",
        "kind": 2,
        "importPath": "阶段1.week06.day01.06.线程的创建",
        "description": "阶段1.week06.day01.06.线程的创建",
        "peekOfCode": "def work():\n    if len(lists) ==0:\n        return\n    data = random.choice(lists)\n    lists.remove(data)\n    new_data = '%s_new' % data\n    new_list.append(new_data)\n    time.sleep(1)\nif __name__ == '__main__':\n    start = time.time()",
        "detail": "阶段1.week06.day01.06.线程的创建",
        "documentation": {}
    },
    {
        "label": "lists",
        "kind": 5,
        "importPath": "阶段1.week06.day01.06.线程的创建",
        "description": "阶段1.week06.day01.06.线程的创建",
        "peekOfCode": "lists = ['python','django','tornado','flask','bs5','uvloop']\nnew_list = []\ndef work():\n    if len(lists) ==0:\n        return\n    data = random.choice(lists)\n    lists.remove(data)\n    new_data = '%s_new' % data\n    new_list.append(new_data)\n    time.sleep(1)",
        "detail": "阶段1.week06.day01.06.线程的创建",
        "documentation": {}
    },
    {
        "label": "new_list",
        "kind": 5,
        "importPath": "阶段1.week06.day01.06.线程的创建",
        "description": "阶段1.week06.day01.06.线程的创建",
        "peekOfCode": "new_list = []\ndef work():\n    if len(lists) ==0:\n        return\n    data = random.choice(lists)\n    lists.remove(data)\n    new_data = '%s_new' % data\n    new_list.append(new_data)\n    time.sleep(1)\nif __name__ == '__main__':",
        "detail": "阶段1.week06.day01.06.线程的创建",
        "documentation": {}
    },
    {
        "label": "work",
        "kind": 2,
        "importPath": "阶段1.week06.day01.07.线程池的创建",
        "description": "阶段1.week06.day01.07.线程池的创建",
        "peekOfCode": "def work(i):\n    # 线程所上锁\n    # lock.acquire()\n    print(i,os.getpid())\n    time.sleep(1)\n    # 线程锁开锁\n    # lock.release()\n    return 'result %s' % i\nif __name__ == '__main__':\n    # 打印主进程的id",
        "detail": "阶段1.week06.day01.07.线程池的创建",
        "documentation": {}
    },
    {
        "label": "lock",
        "kind": 5,
        "importPath": "阶段1.week06.day01.07.线程池的创建",
        "description": "阶段1.week06.day01.07.线程池的创建",
        "peekOfCode": "lock = threading.Lock()\n# 线程不用把锁传入函数中，而进程需要\ndef work(i):\n    # 线程所上锁\n    # lock.acquire()\n    print(i,os.getpid())\n    time.sleep(1)\n    # 线程锁开锁\n    # lock.release()\n    return 'result %s' % i",
        "detail": "阶段1.week06.day01.07.线程池的创建",
        "documentation": {}
    },
    {
        "label": "gevent_a",
        "kind": 2,
        "importPath": "阶段1.week06.day01.11.gevent包异步练习",
        "description": "阶段1.week06.day01.11.gevent包异步练习",
        "peekOfCode": "def gevent_a():\n    for i in range(10):\n        print(i,'a gevent',os.getpid())\n        # 这里不能使用time级别的sleep，因为这是cpu级别的\n        # 我们应该使用asyncio里面的sleep\n        gevent.sleep(random.random() * 2)\n    return 'a gevent function'\ndef gevent_b():\n    for i in range(10):\n        print(i,'b gevent',os.getpid())",
        "detail": "阶段1.week06.day01.11.gevent包异步练习",
        "documentation": {}
    },
    {
        "label": "gevent_b",
        "kind": 2,
        "importPath": "阶段1.week06.day01.11.gevent包异步练习",
        "description": "阶段1.week06.day01.11.gevent包异步练习",
        "peekOfCode": "def gevent_b():\n    for i in range(10):\n        print(i,'b gevent',os.getpid())\n        # 这里不能使用time级别的sleep，因为这是cpu级别的\n        # 我们应该使用asyncio里面的sleep\n        gevent.sleep(random.random() * 2)\n    return 'b gevent function'\n# async def main():\n#     result = await asyncio.gather(\n#         a(), b()",
        "detail": "阶段1.week06.day01.11.gevent包异步练习",
        "documentation": {}
    },
    {
        "label": "str_data",
        "kind": 5,
        "importPath": "阶段1.week07.day01.01.正则表达式",
        "description": "阶段1.week07.day01.01.正则表达式",
        "peekOfCode": "str_data = 'hello xiaomu,this is a good day!'\n# search函数只能匹配一次\n# (匹配规则，匹配字符串)\nresult = re.search('h([a-zA-Z])s',str_data)\n# this\nprint(result.groups())\nstr_data = '本期彩票结果是:10,20,1,5,7,21,12'\n# 匹配所有\nresult = re.findall('(\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+)',str_data)\nprint(result)",
        "detail": "阶段1.week07.day01.01.正则表达式",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week07.day01.01.正则表达式",
        "description": "阶段1.week07.day01.01.正则表达式",
        "peekOfCode": "result = re.search('h([a-zA-Z])s',str_data)\n# this\nprint(result.groups())\nstr_data = '本期彩票结果是:10,20,1,5,7,21,12'\n# 匹配所有\nresult = re.findall('(\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+)',str_data)\nprint(result)\n'''匹配字符串的需要条件'''\n# 正则表达式模块--re\n# 匹配的规则",
        "detail": "阶段1.week07.day01.01.正则表达式",
        "documentation": {}
    },
    {
        "label": "str_data",
        "kind": 5,
        "importPath": "阶段1.week07.day01.01.正则表达式",
        "description": "阶段1.week07.day01.01.正则表达式",
        "peekOfCode": "str_data = '本期彩票结果是:10,20,1,5,7,21,12'\n# 匹配所有\nresult = re.findall('(\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+)',str_data)\nprint(result)\n'''匹配字符串的需要条件'''\n# 正则表达式模块--re\n# 匹配的规则\n# 字符串",
        "detail": "阶段1.week07.day01.01.正则表达式",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week07.day01.01.正则表达式",
        "description": "阶段1.week07.day01.01.正则表达式",
        "peekOfCode": "result = re.findall('(\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+)',str_data)\nprint(result)\n'''匹配字符串的需要条件'''\n# 正则表达式模块--re\n# 匹配的规则\n# 字符串",
        "detail": "阶段1.week07.day01.01.正则表达式",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "阶段1.week07.day01.02.匹配规则",
        "description": "阶段1.week07.day01.02.匹配规则",
        "peekOfCode": "data = 'hello dewei you are 33 age old'\n# findall()匹配所有\n# ? 匹配任意十进制数字，与[0.9]一致\nprint(re.findall('\\d',data)) #['3', '3']\n# ? 匹配任何空格字符，与[\\n\\t\\r\\v\\f]\nprint(re.findall('\\s',data)) #[' ', ' ', ' ', ' ', ' ', ' ']\ndata = 'i am dewei, i am 33'\n# ? 匹配任何字母数字下滑线字符\nprint(re.findall('\\w',data)) \n#['i', 'a', 'm', 'd', 'e', 'w', 'e', 'i', 'i', 'a', 'm', '3', '3']",
        "detail": "阶段1.week07.day01.02.匹配规则",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "阶段1.week07.day01.02.匹配规则",
        "description": "阶段1.week07.day01.02.匹配规则",
        "peekOfCode": "data = 'i am dewei, i am 33'\n# ? 匹配任何字母数字下滑线字符\nprint(re.findall('\\w',data)) \n#['i', 'a', 'm', 'd', 'e', 'w', 'e', 'i', 'i', 'a', 'm', '3', '3']\ndata = 'hello dewei you are 33 age old'\n# ? 匹配开头\nprint(re.findall('\\Ahello',data))# ['hello']\nprint(re.findall('\\Aheools',data))# []\n# ? 匹配结尾\nprint(re.findall('old\\Z',data))# ['old']",
        "detail": "阶段1.week07.day01.02.匹配规则",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "阶段1.week07.day01.02.匹配规则",
        "description": "阶段1.week07.day01.02.匹配规则",
        "peekOfCode": "data = 'hello dewei you are 33 age old'\n# ? 匹配开头\nprint(re.findall('\\Ahello',data))# ['hello']\nprint(re.findall('\\Aheools',data))# []\n# ? 匹配结尾\nprint(re.findall('old\\Z',data))# ['old']\nprint(re.findall('aold\\Z',data))# []\n# ? 匹配任何字符\ndata = 'i am dewei'\nprint(re.findall('.',data))",
        "detail": "阶段1.week07.day01.02.匹配规则",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "阶段1.week07.day01.02.匹配规则",
        "description": "阶段1.week07.day01.02.匹配规则",
        "peekOfCode": "data = 'i am dewei'\nprint(re.findall('.',data))\n# ['i', ' ', 'a', 'm', ' ', 'd', 'e', 'w', 'e', 'i']",
        "detail": "阶段1.week07.day01.02.匹配规则",
        "documentation": {}
    },
    {
        "label": "had_numbers",
        "kind": 2,
        "importPath": "阶段1.week07.day01.03.匹配规则练习",
        "description": "阶段1.week07.day01.03.匹配规则练习",
        "peekOfCode": "def had_numbers(data):\n    result = re.findall('\\d',data)\n    print(result)\n    if len(result) != 0:\n        return True\n    else: \n        return False\ndef remove_numbers(data):\n    # 匹配非数字\n    result = re.findall('\\D',data)",
        "detail": "阶段1.week07.day01.03.匹配规则练习",
        "documentation": {}
    },
    {
        "label": "remove_numbers",
        "kind": 2,
        "importPath": "阶段1.week07.day01.03.匹配规则练习",
        "description": "阶段1.week07.day01.03.匹配规则练习",
        "peekOfCode": "def remove_numbers(data):\n    # 匹配非数字\n    result = re.findall('\\D',data)\n    print(result)\n    return ''.join(result)\ndef startswith(sub,data):\n    _sub = '\\A'+sub\n    result = re.findall(_sub,data)\n    # 如果列表里有值，就会进行循环，没有值就会返回False\n    for i in result:",
        "detail": "阶段1.week07.day01.03.匹配规则练习",
        "documentation": {}
    },
    {
        "label": "startswith",
        "kind": 2,
        "importPath": "阶段1.week07.day01.03.匹配规则练习",
        "description": "阶段1.week07.day01.03.匹配规则练习",
        "peekOfCode": "def startswith(sub,data):\n    _sub = '\\A'+sub\n    result = re.findall(_sub,data)\n    # 如果列表里有值，就会进行循环，没有值就会返回False\n    for i in result:\n        return True\n    else:\n        return False\ndef endswith(sub,data):\n    _sub = sub + '\\Z'",
        "detail": "阶段1.week07.day01.03.匹配规则练习",
        "documentation": {}
    },
    {
        "label": "endswith",
        "kind": 2,
        "importPath": "阶段1.week07.day01.03.匹配规则练习",
        "description": "阶段1.week07.day01.03.匹配规则练习",
        "peekOfCode": "def endswith(sub,data):\n    _sub = sub + '\\Z'\n    result = re.findall(_sub,data)\n    if len(result) != 0:\n        return True\n    else: \n        return False\n# 去除空格后的长度\ndef real_len(data):\n    result = re.findall('\\S',data)",
        "detail": "阶段1.week07.day01.03.匹配规则练习",
        "documentation": {}
    },
    {
        "label": "real_len",
        "kind": 2,
        "importPath": "阶段1.week07.day01.03.匹配规则练习",
        "description": "阶段1.week07.day01.03.匹配规则练习",
        "peekOfCode": "def real_len(data):\n    result = re.findall('\\S',data)\n    print(result)\n    return len(result)\nif __name__ == '__main__':\n    data = 'i am dewei, i am 33'\n    result = had_numbers(data)\n    print(result)\n    result = remove_numbers(data)\n    print(result)",
        "detail": "阶段1.week07.day01.03.匹配规则练习",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "阶段1.week07.day01.04.量词符号与组",
        "description": "阶段1.week07.day01.04.量词符号与组",
        "peekOfCode": "data = 'dewei@imooc.com'\n#  |或的关系，只要存在就能捕获\n# 匹配道德数据只按字符串顺序返回，而不是按照匹配规则返回\nprint(re.findall('dewei|com|imooc',data))\n# ['dewei', 'imooc', 'com']\n# ? '^'等同于\\A\nprint(re.findall('^dewei',data))# ['dewei']\nprint(re.findall('^haha',data))# []\n# ? '$'等同于\\Z\nprint(re.findall('com$',data))# ['com']",
        "detail": "阶段1.week07.day01.04.量词符号与组",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "阶段1.week07.day01.04.量词符号与组",
        "description": "阶段1.week07.day01.04.量词符号与组",
        "peekOfCode": "test = 'hello my name is dewei'\nresult = re.search('hello (.*) name is (.*)',test)\nprint(result.groups())\n# ('my', 'dewei')\nprint(result.group(1))\n# my\nprint(result.group(2))\n# dewei\n'''贪婪与非贪婪'''\n# 0次或多次属于贪婪模式",
        "detail": "阶段1.week07.day01.04.量词符号与组",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week07.day01.04.量词符号与组",
        "description": "阶段1.week07.day01.04.量词符号与组",
        "peekOfCode": "result = re.search('hello (.*) name is (.*)',test)\nprint(result.groups())\n# ('my', 'dewei')\nprint(result.group(1))\n# my\nprint(result.group(2))\n# dewei\n'''贪婪与非贪婪'''\n# 0次或多次属于贪婪模式\n# 通过?组合变成非贪婪模式",
        "detail": "阶段1.week07.day01.04.量词符号与组",
        "documentation": {}
    },
    {
        "label": "check_url",
        "kind": 2,
        "importPath": "阶段1.week07.day01.05.正则表达式练习",
        "description": "阶段1.week07.day01.05.正则表达式练习",
        "peekOfCode": "def check_url(url):\n    # \\.表示普通的.\n    result = re.findall('[a-zA-Z]{4,5}://\\w*\\.*\\w+\\.\\w+/',url)\n    if len(result) != 0 :\n        return True\n    else:\n        return False\ndef get_url(url):\n    # 我们只想要这一部分，所以可以使用组\n    result = re.findall('[a-zA-Z]{4,5}://(\\w*\\.*\\w+\\.\\w+)/',url)",
        "detail": "阶段1.week07.day01.05.正则表达式练习",
        "documentation": {}
    },
    {
        "label": "get_url",
        "kind": 2,
        "importPath": "阶段1.week07.day01.05.正则表达式练习",
        "description": "阶段1.week07.day01.05.正则表达式练习",
        "peekOfCode": "def get_url(url):\n    # 我们只想要这一部分，所以可以使用组\n    result = re.findall('[a-zA-Z]{4,5}://(\\w*\\.*\\w+\\.\\w+)/',url)\n    if len(result)!=0:\n        return result[0]\n    else:\n        return ''\ndef get_email(email):\n    result = re.findall('[a-zA-Z0-9_]+@[a-zA-Z0-9]+\\.[a-zA-Z]+',email)\n    return result",
        "detail": "阶段1.week07.day01.05.正则表达式练习",
        "documentation": {}
    },
    {
        "label": "get_email",
        "kind": 2,
        "importPath": "阶段1.week07.day01.05.正则表达式练习",
        "description": "阶段1.week07.day01.05.正则表达式练习",
        "peekOfCode": "def get_email(email):\n    result = re.findall('[a-zA-Z0-9_]+@[a-zA-Z0-9]+\\.[a-zA-Z]+',email)\n    return result\nhtml = ('<div class=\"s-top-nav\" style=\"display:none;\">'\n        '</div><div class=\"s-center-box\"></div>')\ndef get_html_data(html):\n    result = re.findall('style=\"(.*?)\"',html)\n    return result  \ndef get_all_data(html):\n    result = re.findall('=\"(.+?)\"',html)",
        "detail": "阶段1.week07.day01.05.正则表达式练习",
        "documentation": {}
    },
    {
        "label": "get_html_data",
        "kind": 2,
        "importPath": "阶段1.week07.day01.05.正则表达式练习",
        "description": "阶段1.week07.day01.05.正则表达式练习",
        "peekOfCode": "def get_html_data(html):\n    result = re.findall('style=\"(.*?)\"',html)\n    return result  \ndef get_all_data(html):\n    result = re.findall('=\"(.+?)\"',html)\n    return result\nif __name__ == '__main__':\n    url = 'https://www.imooc.com/'\n    result = check_url(url)\n    print(result)",
        "detail": "阶段1.week07.day01.05.正则表达式练习",
        "documentation": {}
    },
    {
        "label": "get_all_data",
        "kind": 2,
        "importPath": "阶段1.week07.day01.05.正则表达式练习",
        "description": "阶段1.week07.day01.05.正则表达式练习",
        "peekOfCode": "def get_all_data(html):\n    result = re.findall('=\"(.+?)\"',html)\n    return result\nif __name__ == '__main__':\n    url = 'https://www.imooc.com/'\n    result = check_url(url)\n    print(result)\n    print(get_url(url))\n    email = 'dewei@imooc.com'\n    result = get_email(email)",
        "detail": "阶段1.week07.day01.05.正则表达式练习",
        "documentation": {}
    },
    {
        "label": "html",
        "kind": 5,
        "importPath": "阶段1.week07.day01.05.正则表达式练习",
        "description": "阶段1.week07.day01.05.正则表达式练习",
        "peekOfCode": "html = ('<div class=\"s-top-nav\" style=\"display:none;\">'\n        '</div><div class=\"s-center-box\"></div>')\ndef get_html_data(html):\n    result = re.findall('style=\"(.*?)\"',html)\n    return result  \ndef get_all_data(html):\n    result = re.findall('=\"(.+?)\"',html)\n    return result\nif __name__ == '__main__':\n    url = 'https://www.imooc.com/'",
        "detail": "阶段1.week07.day01.05.正则表达式练习",
        "documentation": {}
    },
    {
        "label": "check_url",
        "kind": 2,
        "importPath": "阶段1.week07.day01.06.正则表达式模块",
        "description": "阶段1.week07.day01.06.正则表达式模块",
        "peekOfCode": "def check_url(url):\n    re_g = re.compile('[a-zA-Z]{4,5}://\\w*\\.*\\w+\\.\\w+/')\n    # \\.表示普通的.\n    result = re_g.findall(url)\n    if len(result) != 0 :\n        return True\n    else:\n        return False\ndef get_url(url):\n    # 我们只想要这一部分，所以可以使用组",
        "detail": "阶段1.week07.day01.06.正则表达式模块",
        "documentation": {}
    },
    {
        "label": "get_url",
        "kind": 2,
        "importPath": "阶段1.week07.day01.06.正则表达式模块",
        "description": "阶段1.week07.day01.06.正则表达式模块",
        "peekOfCode": "def get_url(url):\n    # 我们只想要这一部分，所以可以使用组\n    re_g = re.compile('[a-zA-Z]{4,5}://(\\w*\\.*\\w+\\.\\w+)/')\n    result = re_g.findall(url)\n    if len(result)!=0:\n        return result[0]\n    else:\n        return ''\ndef get_email(email):\n    re_g = re.compile('[a-zA-Z0-9_]+@[a-zA-Z0-9]+\\.[a-zA-Z]+')",
        "detail": "阶段1.week07.day01.06.正则表达式模块",
        "documentation": {}
    },
    {
        "label": "get_email",
        "kind": 2,
        "importPath": "阶段1.week07.day01.06.正则表达式模块",
        "description": "阶段1.week07.day01.06.正则表达式模块",
        "peekOfCode": "def get_email(email):\n    re_g = re.compile('[a-zA-Z0-9_]+@[a-zA-Z0-9]+\\.[a-zA-Z]+')\n    result = re_g.findall(email)\n    return result\nhtml = ('<div class=\"s-top-nav\" style=\"display:none;\">'\n        '</div><div class=\"s-center-box\"></div>')\ndef get_html_data(html):\n    re_g = re.compile('style=\"(.*?)\"')\n    result = re_g.findall(html)\n    return result  ",
        "detail": "阶段1.week07.day01.06.正则表达式模块",
        "documentation": {}
    },
    {
        "label": "get_html_data",
        "kind": 2,
        "importPath": "阶段1.week07.day01.06.正则表达式模块",
        "description": "阶段1.week07.day01.06.正则表达式模块",
        "peekOfCode": "def get_html_data(html):\n    re_g = re.compile('style=\"(.*?)\"')\n    result = re_g.findall(html)\n    return result  \ndef get_all_data(html):\n    re_g = re.compile('=\"(.+?)\"')\n    result = re_g.findall(html)\n    return result\nif __name__ == '__main__':\n    url = 'https://www.imooc.com/'",
        "detail": "阶段1.week07.day01.06.正则表达式模块",
        "documentation": {}
    },
    {
        "label": "get_all_data",
        "kind": 2,
        "importPath": "阶段1.week07.day01.06.正则表达式模块",
        "description": "阶段1.week07.day01.06.正则表达式模块",
        "peekOfCode": "def get_all_data(html):\n    re_g = re.compile('=\"(.+?)\"')\n    result = re_g.findall(html)\n    return result\nif __name__ == '__main__':\n    url = 'https://www.imooc.com/'\n    result = check_url(url)\n    print(result)\n    print(get_url(url))\n    email = 'dewei@imooc.com'",
        "detail": "阶段1.week07.day01.06.正则表达式模块",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week07.day01.06.正则表达式模块",
        "description": "阶段1.week07.day01.06.正则表达式模块",
        "peekOfCode": "result = re.search('hello (.*) name is (.*)',test)\nprint(result.groups())\nprint(result.group(1))\nprint(result.group(2))\n# ('my', 'dewei')\n# my\n# dewei\n'''split()正则替换'''\n# split(pattern,string,max=0)\n# 根据正则表达式的模式分割符，split函数将字符串分割为列表，",
        "detail": "阶段1.week07.day01.06.正则表达式模块",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "阶段1.week07.day01.06.正则表达式模块",
        "description": "阶段1.week07.day01.06.正则表达式模块",
        "peekOfCode": "data = 'hello world'\n# 按照非字母数字下滑线分割\nprint(re.split('\\W',data))\n# ['hello', 'world']\n'''match()'''\n# match(pattern,string,flags=0)\n# 尝试使用带有可选的标记的正则表达式的模式来匹配字符串。\n# 如果匹配成功，就返回匹配对象;如果失败，就返回None\nresult = re.match('hello',data)\nprint(result.group())",
        "detail": "阶段1.week07.day01.06.正则表达式模块",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week07.day01.06.正则表达式模块",
        "description": "阶段1.week07.day01.06.正则表达式模块",
        "peekOfCode": "result = re.match('hello',data)\nprint(result.group())\n# hello\n'''compile()'''\n# compile(pattern,flags=0)\n# 定义一个匹配规则的对象\ndata = 'hello my email is dewei@imooc.com i like python'\nre_obj = re.compile('email is (.*?) i')\nresult = re_obj.findall(data)\nprint(result)",
        "detail": "阶段1.week07.day01.06.正则表达式模块",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "阶段1.week07.day01.06.正则表达式模块",
        "description": "阶段1.week07.day01.06.正则表达式模块",
        "peekOfCode": "data = 'hello my email is dewei@imooc.com i like python'\nre_obj = re.compile('email is (.*?) i')\nresult = re_obj.findall(data)\nprint(result)\n# ['dewei@imooc.com']\n'''re的额外匹配要求\n属性                    描述\nre.I、re.TGNORECASE     不区分大小写的匹配\nre.L、re.LOCALE         根据所使用的本地语言环境通过\\w.\\W,\\s,\\S实现匹配(unicode_python2时代，可以理解为通用模式，类似utf-8)\nre.M、re.MULTILINE      ^和$分别匹配目标字符串中行的起始和结尾，而不是严格匹配整个字符串本身的起始",
        "detail": "阶段1.week07.day01.06.正则表达式模块",
        "documentation": {}
    },
    {
        "label": "re_obj",
        "kind": 5,
        "importPath": "阶段1.week07.day01.06.正则表达式模块",
        "description": "阶段1.week07.day01.06.正则表达式模块",
        "peekOfCode": "re_obj = re.compile('email is (.*?) i')\nresult = re_obj.findall(data)\nprint(result)\n# ['dewei@imooc.com']\n'''re的额外匹配要求\n属性                    描述\nre.I、re.TGNORECASE     不区分大小写的匹配\nre.L、re.LOCALE         根据所使用的本地语言环境通过\\w.\\W,\\s,\\S实现匹配(unicode_python2时代，可以理解为通用模式，类似utf-8)\nre.M、re.MULTILINE      ^和$分别匹配目标字符串中行的起始和结尾，而不是严格匹配整个字符串本身的起始\nre.S、re.DOTALL         “.”通常匹配除了\\n之外的所有单个字符；该标记表示“.”能够匹配全部字符",
        "detail": "阶段1.week07.day01.06.正则表达式模块",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段1.week07.day01.06.正则表达式模块",
        "description": "阶段1.week07.day01.06.正则表达式模块",
        "peekOfCode": "result = re_obj.findall(data)\nprint(result)\n# ['dewei@imooc.com']\n'''re的额外匹配要求\n属性                    描述\nre.I、re.TGNORECASE     不区分大小写的匹配\nre.L、re.LOCALE         根据所使用的本地语言环境通过\\w.\\W,\\s,\\S实现匹配(unicode_python2时代，可以理解为通用模式，类似utf-8)\nre.M、re.MULTILINE      ^和$分别匹配目标字符串中行的起始和结尾，而不是严格匹配整个字符串本身的起始\nre.S、re.DOTALL         “.”通常匹配除了\\n之外的所有单个字符；该标记表示“.”能够匹配全部字符\nre.X、re.VERBOSE        忽略规则表达式中的空白和注释",
        "detail": "阶段1.week07.day01.06.正则表达式模块",
        "documentation": {}
    },
    {
        "label": "html",
        "kind": 5,
        "importPath": "阶段1.week07.day01.06.正则表达式模块",
        "description": "阶段1.week07.day01.06.正则表达式模块",
        "peekOfCode": "html = ('<div class=\"s-top-nav\" style=\"display:none;\">'\n        '</div><div class=\"s-center-box\"></div>')\ndef get_html_data(html):\n    re_g = re.compile('style=\"(.*?)\"')\n    result = re_g.findall(html)\n    return result  \ndef get_all_data(html):\n    re_g = re.compile('=\"(.+?)\"')\n    result = re_g.findall(html)\n    return result",
        "detail": "阶段1.week07.day01.06.正则表达式模块",
        "documentation": {}
    },
    {
        "label": "ROLES",
        "kind": 5,
        "importPath": "阶段1.week07.day02.gift.common.consts",
        "description": "阶段1.week07.day02.gift.common.consts",
        "peekOfCode": "ROLES = ['admin','normal']\n# 礼品登记固定常量\nFIRSTLEVELS = ['level1','level2','level3','level4']\nSECONDLEVELS = ['level1','level2','level3']",
        "detail": "阶段1.week07.day02.gift.common.consts",
        "documentation": {}
    },
    {
        "label": "FIRSTLEVELS",
        "kind": 5,
        "importPath": "阶段1.week07.day02.gift.common.consts",
        "description": "阶段1.week07.day02.gift.common.consts",
        "peekOfCode": "FIRSTLEVELS = ['level1','level2','level3','level4']\nSECONDLEVELS = ['level1','level2','level3']",
        "detail": "阶段1.week07.day02.gift.common.consts",
        "documentation": {}
    },
    {
        "label": "SECONDLEVELS",
        "kind": 5,
        "importPath": "阶段1.week07.day02.gift.common.consts",
        "description": "阶段1.week07.day02.gift.common.consts",
        "peekOfCode": "SECONDLEVELS = ['level1','level2','level3']",
        "detail": "阶段1.week07.day02.gift.common.consts",
        "documentation": {}
    },
    {
        "label": "NotPathError",
        "kind": 6,
        "importPath": "阶段1.week07.day02.gift.common.error",
        "description": "阶段1.week07.day02.gift.common.error",
        "peekOfCode": "class NotPathError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass FormatError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass NotFileError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass UserExitsError(Exception):",
        "detail": "阶段1.week07.day02.gift.common.error",
        "documentation": {}
    },
    {
        "label": "FormatError",
        "kind": 6,
        "importPath": "阶段1.week07.day02.gift.common.error",
        "description": "阶段1.week07.day02.gift.common.error",
        "peekOfCode": "class FormatError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass NotFileError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass UserExitsError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass RoleError(Exception):",
        "detail": "阶段1.week07.day02.gift.common.error",
        "documentation": {}
    },
    {
        "label": "NotFileError",
        "kind": 6,
        "importPath": "阶段1.week07.day02.gift.common.error",
        "description": "阶段1.week07.day02.gift.common.error",
        "peekOfCode": "class NotFileError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass UserExitsError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass RoleError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass LevelError(Exception):",
        "detail": "阶段1.week07.day02.gift.common.error",
        "documentation": {}
    },
    {
        "label": "UserExitsError",
        "kind": 6,
        "importPath": "阶段1.week07.day02.gift.common.error",
        "description": "阶段1.week07.day02.gift.common.error",
        "peekOfCode": "class UserExitsError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass RoleError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass LevelError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass NagativeNumberError(Exception):",
        "detail": "阶段1.week07.day02.gift.common.error",
        "documentation": {}
    },
    {
        "label": "RoleError",
        "kind": 6,
        "importPath": "阶段1.week07.day02.gift.common.error",
        "description": "阶段1.week07.day02.gift.common.error",
        "peekOfCode": "class RoleError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass LevelError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass NagativeNumberError(Exception):\n     def __init__(self,message):\n        self.message = message\nclass NotUserError(Exception):",
        "detail": "阶段1.week07.day02.gift.common.error",
        "documentation": {}
    },
    {
        "label": "LevelError",
        "kind": 6,
        "importPath": "阶段1.week07.day02.gift.common.error",
        "description": "阶段1.week07.day02.gift.common.error",
        "peekOfCode": "class LevelError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass NagativeNumberError(Exception):\n     def __init__(self,message):\n        self.message = message\nclass NotUserError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass UserActiveError(Exception):",
        "detail": "阶段1.week07.day02.gift.common.error",
        "documentation": {}
    },
    {
        "label": "NagativeNumberError",
        "kind": 6,
        "importPath": "阶段1.week07.day02.gift.common.error",
        "description": "阶段1.week07.day02.gift.common.error",
        "peekOfCode": "class NagativeNumberError(Exception):\n     def __init__(self,message):\n        self.message = message\nclass NotUserError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass UserActiveError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass CountError(Exception):",
        "detail": "阶段1.week07.day02.gift.common.error",
        "documentation": {}
    },
    {
        "label": "NotUserError",
        "kind": 6,
        "importPath": "阶段1.week07.day02.gift.common.error",
        "description": "阶段1.week07.day02.gift.common.error",
        "peekOfCode": "class NotUserError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass UserActiveError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass CountError(Exception):\n    def __init__(self,message):\n        self.message = message",
        "detail": "阶段1.week07.day02.gift.common.error",
        "documentation": {}
    },
    {
        "label": "UserActiveError",
        "kind": 6,
        "importPath": "阶段1.week07.day02.gift.common.error",
        "description": "阶段1.week07.day02.gift.common.error",
        "peekOfCode": "class UserActiveError(Exception):\n    def __init__(self,message):\n        self.message = message\nclass CountError(Exception):\n    def __init__(self,message):\n        self.message = message",
        "detail": "阶段1.week07.day02.gift.common.error",
        "documentation": {}
    },
    {
        "label": "CountError",
        "kind": 6,
        "importPath": "阶段1.week07.day02.gift.common.error",
        "description": "阶段1.week07.day02.gift.common.error",
        "peekOfCode": "class CountError(Exception):\n    def __init__(self,message):\n        self.message = message",
        "detail": "阶段1.week07.day02.gift.common.error",
        "documentation": {}
    },
    {
        "label": "check_file",
        "kind": 2,
        "importPath": "阶段1.week07.day02.gift.common.utils",
        "description": "阶段1.week07.day02.gift.common.utils",
        "peekOfCode": "def check_file(path):\n    if not os.path.exists(path):\n        raise NotPathError('not found %s' % path)\n    if not path.endswith('.json'):\n        raise FormatError('need json format')\n    if not os.path.isfile(path):\n        raise NotFileError('this is a not file')\ndef timestamp_to_string(timestamp):\n    # 将时间戳转变为时间对象\n   time_obj = time.localtime(timestamp)",
        "detail": "阶段1.week07.day02.gift.common.utils",
        "documentation": {}
    },
    {
        "label": "timestamp_to_string",
        "kind": 2,
        "importPath": "阶段1.week07.day02.gift.common.utils",
        "description": "阶段1.week07.day02.gift.common.utils",
        "peekOfCode": "def timestamp_to_string(timestamp):\n    # 将时间戳转变为时间对象\n   time_obj = time.localtime(timestamp)\n   time_str = time.strftime('%Y-%m-%d %H:%M:%S',time_obj)\n   return time_str",
        "detail": "阶段1.week07.day02.gift.common.utils",
        "documentation": {}
    },
    {
        "label": "Admin",
        "kind": 6,
        "importPath": "阶段1.week07.day02.gift.admin",
        "description": "阶段1.week07.day02.gift.admin",
        "peekOfCode": "class Admin(Base):\n    def __init__(self,username,user_json,gift_json):\n        self.username = username\n        # 执行父类的构造函数\n        super(Admin,self).__init__(user_json,gift_json)\n        self.get_user()\n    # 得到所有用户\n    def get_user(self):\n        # 调用父类的这个函数,获得用户数据\n        users = self._Base__read_users()",
        "detail": "阶段1.week07.day02.gift.admin",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "阶段1.week07.day02.gift.base",
        "description": "阶段1.week07.day02.gift.base",
        "peekOfCode": "class Base(object):\n    def __init__(self,user_json,gift_json):\n        self.user_json = user_json\n        self.gift_json = gift_json\n        # 调用__check_user_json\n        # 检测文件是否存在\n        self.__check_user_json()\n        self.__check_gift_json()\n        # 初始化礼物\n        self.__init_gifts()",
        "detail": "阶段1.week07.day02.gift.base",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "阶段1.week07.day02.gift.user",
        "description": "阶段1.week07.day02.gift.user",
        "peekOfCode": "class User(Base):\n    def __init__(self,username,user_json,gift_json):\n        self.username = username\n        self.gift_random = list(range(1,101))\n        super(User, self).__init__(user_json,gift_json)\n        self.get_user()\n    def get_user(self):\n        users = self._Base__read_users()\n        if self.username not in users:\n            raise NotUserError('not user %s' % self.username)",
        "detail": "阶段1.week07.day02.gift.user",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "阶段2.mongoengine.main",
        "description": "阶段2.mongoengine.main",
        "peekOfCode": "def setup():\n    mongoengine.register_connection(\n        alias='core',\n        db='demo',\n        host='127.0.0.1',\n        port=27017,\n        # 验证\n        username=\"zhou\",\n        password=\"1234\"\n    )",
        "detail": "阶段2.mongoengine.main",
        "documentation": {}
    },
    {
        "label": "print_header",
        "kind": 2,
        "importPath": "阶段2.mongoengine.main",
        "description": "阶段2.mongoengine.main",
        "peekOfCode": "def print_header():\n    print('----------------------------------------------')\n    print('|                                             |')\n    print('|           User Management v.02              |')\n    print('|               demo edition                  |')\n    print('|                                             |')\n    print('----------------------------------------------')\n    print()\ndef user_loop():\n    while True:",
        "detail": "阶段2.mongoengine.main",
        "documentation": {}
    },
    {
        "label": "user_loop",
        "kind": 2,
        "importPath": "阶段2.mongoengine.main",
        "description": "阶段2.mongoengine.main",
        "peekOfCode": "def user_loop():\n    while True:\n        print(\"Available actions:\")\n        print(\" * [a]dd user\")\n        print(\" * [l]ist users\")\n        print(\" * [u]pdate password\")\n        print(\" * [d]elete user\")\n        print(\" * e[x]it\")\n        print()\n        ch = input(\"> \").strip().lower()",
        "detail": "阶段2.mongoengine.main",
        "documentation": {}
    },
    {
        "label": "add_user",
        "kind": 2,
        "importPath": "阶段2.mongoengine.main",
        "description": "阶段2.mongoengine.main",
        "peekOfCode": "def add_user():\n    username = input(\"username = \")\n    password = input(\"password = \")\n    email = input(\"email = \")\n    age = input(\"age = \")\n    # 嵌套Document的实现 对象形式\n    city = input(\"city = \")\n    zip_code = input(\"zip code =\")\n    # 实例化User对象，为其赋值\n    user = User()",
        "detail": "阶段2.mongoengine.main",
        "documentation": {}
    },
    {
        "label": "list_users",
        "kind": 2,
        "importPath": "阶段2.mongoengine.main",
        "description": "阶段2.mongoengine.main",
        "peekOfCode": "def list_users():\n    # User.objects()获取users集合的所有数据，返回一个可迭代的结果\n    users = User.objects()\n    for u in users:\n        print('username={},password={},age={}'.format(u.username,u.password, u.age))\n    '''普通字段过滤查询'''\n    # 但是如果我们想对结果进行过滤该如何操作,\n    # 会返回username=\"zhou\"的一条对象\n    # users = User.objects(username=\"zhou\")\n    # for u in users:",
        "detail": "阶段2.mongoengine.main",
        "documentation": {}
    },
    {
        "label": "update_users",
        "kind": 2,
        "importPath": "阶段2.mongoengine.main",
        "description": "阶段2.mongoengine.main",
        "peekOfCode": "def update_users():\n    username = input('username = ')\n    # 通过用户名查找用户,取第一个用户\n    user = User.objects(username=username).first();\n    if not user:\n        print('user %s not exist'.format(username))\n        return\n    else:\n        password = input('new password =')\n        user.password = password",
        "detail": "阶段2.mongoengine.main",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "kind": 2,
        "importPath": "阶段2.mongoengine.main",
        "description": "阶段2.mongoengine.main",
        "peekOfCode": "def delete_user():\n    username = input('username = ')\n    # 通过用户名查找用户,取第一个用户\n    user = User.objects(username=username).first();\n    if not user:\n        print('user %s not exist'.format(username))\n        return\n    else:\n        # 在数据库删除用户\n        user.delete()",
        "detail": "阶段2.mongoengine.main",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "阶段2.mongoengine.user",
        "description": "阶段2.mongoengine.user",
        "peekOfCode": "class Address(mongoengine.EmbeddedDocument):\n    city = mongoengine.StringField(required=True)\n    zip_code = mongoengine.IntField(required=True)\n    # 这里我们没必要用meta\n    # 因为这个Address只是User的一个字段值\n# 嵌入式Document 对象形式\nclass Hobby(mongoengine.EmbeddedDocument):\n    type = mongoengine.StringField(required=True)\n    rating = mongoengine.IntField(default=8)\nclass User(mongoengine.Document):",
        "detail": "阶段2.mongoengine.user",
        "documentation": {}
    },
    {
        "label": "Hobby",
        "kind": 6,
        "importPath": "阶段2.mongoengine.user",
        "description": "阶段2.mongoengine.user",
        "peekOfCode": "class Hobby(mongoengine.EmbeddedDocument):\n    type = mongoengine.StringField(required=True)\n    rating = mongoengine.IntField(default=8)\nclass User(mongoengine.Document):\n    # StringField()字符串类型\n        # max_length最大长度\n        # required = True 表示为必填字段\n    username = mongoengine.StringField(max_length=10,min_length=4,required=True)\n    password = mongoengine.StringField(max_length=20,min_length=4,required=True)\n    email = mongoengine.EmailField(required=True)",
        "detail": "阶段2.mongoengine.user",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "阶段2.mongoengine.user",
        "description": "阶段2.mongoengine.user",
        "peekOfCode": "class User(mongoengine.Document):\n    # StringField()字符串类型\n        # max_length最大长度\n        # required = True 表示为必填字段\n    username = mongoengine.StringField(max_length=10,min_length=4,required=True)\n    password = mongoengine.StringField(max_length=20,min_length=4,required=True)\n    email = mongoengine.EmailField(required=True)\n    age = mongoengine.IntField(required=True)\n    # 时间类型 default默认值\n    created_at = mongoengine.DateTimeField(default=datetime.utcnow)",
        "detail": "阶段2.mongoengine.user",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "阶段2.mongoengine_demo.main",
        "description": "阶段2.mongoengine_demo.main",
        "peekOfCode": "def setup():\n    mongoengine.register_connection(\n        alias='core',\n        db='demo',\n        host='127.0.0.1',\n        port=27017\n    )\ndef print_header():\n    print('----------------------------------------------')\n    print('|                                             |')",
        "detail": "阶段2.mongoengine_demo.main",
        "documentation": {}
    },
    {
        "label": "print_header",
        "kind": 2,
        "importPath": "阶段2.mongoengine_demo.main",
        "description": "阶段2.mongoengine_demo.main",
        "peekOfCode": "def print_header():\n    print('----------------------------------------------')\n    print('|                                             |')\n    print('|           User Management v.02              |')\n    print('|               demo edition                  |')\n    print('|                                             |')\n    print('----------------------------------------------')\n    print()\ndef user_loop():\n    while True:",
        "detail": "阶段2.mongoengine_demo.main",
        "documentation": {}
    },
    {
        "label": "user_loop",
        "kind": 2,
        "importPath": "阶段2.mongoengine_demo.main",
        "description": "阶段2.mongoengine_demo.main",
        "peekOfCode": "def user_loop():\n    while True:\n        print(\"Available actions:\")\n        print(\" * [a]dd user\")\n        print(\" * [l]ist users\")\n        print(\" * [u]pdate password\")\n        print(\" * [d]elete user\")\n        print(\" * e[x]it\")\n        print()\n        ch = input(\"> \").strip().lower()",
        "detail": "阶段2.mongoengine_demo.main",
        "documentation": {}
    },
    {
        "label": "add_user",
        "kind": 2,
        "importPath": "阶段2.mongoengine_demo.main",
        "description": "阶段2.mongoengine_demo.main",
        "peekOfCode": "def add_user():\n    username = input(\"username = \")\n    password = input(\"password = \")\n    email = input(\"email = \")\n    age = input(\"age = \")\n    city = input(\"city = \")\n    zip_code = input(\"zip code = \")\n    # 实例化User对象，为其赋值\n    user = User()\n    user.username = username",
        "detail": "阶段2.mongoengine_demo.main",
        "documentation": {}
    },
    {
        "label": "list_users",
        "kind": 2,
        "importPath": "阶段2.mongoengine_demo.main",
        "description": "阶段2.mongoengine_demo.main",
        "peekOfCode": "def list_users():\n    # users = User.objects(age__in=[25, 28])\n    # users = User.objects(address__city=\"ShangHai\")\n    # users = User.objects(hobbies__match={'type': 'reading'})\n    # users = User.objects()[2:4]\n    users = User.objects()\n    for user in users:\n        print('username={}, passwd={}, age={}'.format(\n            user.username, user.password, user.age))\ndef update_users():",
        "detail": "阶段2.mongoengine_demo.main",
        "documentation": {}
    },
    {
        "label": "update_users",
        "kind": 2,
        "importPath": "阶段2.mongoengine_demo.main",
        "description": "阶段2.mongoengine_demo.main",
        "peekOfCode": "def update_users():\n    username = input('username = ')\n    user = User.objects(username=username).first()\n    if not user:\n        print('user does not exist')\n        return\n    password = input('new password = ')\n    user.password = password\n    user.save()\ndef delete_users():",
        "detail": "阶段2.mongoengine_demo.main",
        "documentation": {}
    },
    {
        "label": "delete_users",
        "kind": 2,
        "importPath": "阶段2.mongoengine_demo.main",
        "description": "阶段2.mongoengine_demo.main",
        "peekOfCode": "def delete_users():\n    username = input('username = ')\n    user = User.objects(username=username).first()\n    if not user:\n        print('user does not exist')\n        return\n    user.delete()   \nif __name__ == \"__main__\":\n    setup()\n    print_header()",
        "detail": "阶段2.mongoengine_demo.main",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "阶段2.mongoengine_demo.user",
        "description": "阶段2.mongoengine_demo.user",
        "peekOfCode": "class Address(mongoengine.EmbeddedDocument):\n    city = mongoengine.StringField(required=True)\n    zip_code = mongoengine.IntField(required=True)\nclass Hobby(mongoengine.EmbeddedDocument):\n    type = mongoengine.StringField(required=True)\n    rating = mongoengine.IntField(default=8)\nclass User(mongoengine.Document):\n    # 字符串类型\n    username = mongoengine.StringField(\n        max_length=10, min_length=4, required=True)",
        "detail": "阶段2.mongoengine_demo.user",
        "documentation": {}
    },
    {
        "label": "Hobby",
        "kind": 6,
        "importPath": "阶段2.mongoengine_demo.user",
        "description": "阶段2.mongoengine_demo.user",
        "peekOfCode": "class Hobby(mongoengine.EmbeddedDocument):\n    type = mongoengine.StringField(required=True)\n    rating = mongoengine.IntField(default=8)\nclass User(mongoengine.Document):\n    # 字符串类型\n    username = mongoengine.StringField(\n        max_length=10, min_length=4, required=True)\n    password = mongoengine.StringField(\n        max_length=20, min_length=4, required=True)\n    email = mongoengine.EmailField(required=True)",
        "detail": "阶段2.mongoengine_demo.user",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "阶段2.mongoengine_demo.user",
        "description": "阶段2.mongoengine_demo.user",
        "peekOfCode": "class User(mongoengine.Document):\n    # 字符串类型\n    username = mongoengine.StringField(\n        max_length=10, min_length=4, required=True)\n    password = mongoengine.StringField(\n        max_length=20, min_length=4, required=True)\n    email = mongoengine.EmailField(required=True)\n    age = mongoengine.IntField(required=True)\n    # 时间类型\n    created_at = mongoengine.DateTimeField(default=datetime.utcnow)",
        "detail": "阶段2.mongoengine_demo.user",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo.01.Mongodb的基本连接",
        "description": "阶段2.pymongo.01.Mongodb的基本连接",
        "peekOfCode": "client = MongoClient(host = '127.0.0.1',port=27017)\n# 打印数据库信息\nprint(client.server_info())\n# 使用demo数据库\n# use demo\n# 代表连接到demo数据库\n# 现在知识初始化，还没有真正连接\ndb = client.demo\n# 验证\ndb.authenticate('zhou','1234')",
        "detail": "阶段2.pymongo.01.Mongodb的基本连接",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo.01.Mongodb的基本连接",
        "description": "阶段2.pymongo.01.Mongodb的基本连接",
        "peekOfCode": "db = client.demo\n# 验证\ndb.authenticate('zhou','1234')\nprint(db)\n# Database(MongoClient(host=['127.0.0.1:27017'], \n# document_class=dict,\n# tz_aware=False, connect=True), 'demo')\n# 代表连接到demo数据库下的movie集合\n# 以下两种方法都行\ncollection = db.movie",
        "detail": "阶段2.pymongo.01.Mongodb的基本连接",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo.01.Mongodb的基本连接",
        "description": "阶段2.pymongo.01.Mongodb的基本连接",
        "peekOfCode": "collection = db.movie\n# collection = db['movie']\nprint(collection)\n# Collection(Database(MongoClient(host=['127.0.0.1:27017'], \n# document_class=dict, tz_aware=False, connect=True), 'demo'), 'movie')",
        "detail": "阶段2.pymongo.01.Mongodb的基本连接",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo.02.collection数据的插入",
        "description": "阶段2.pymongo.02.collection数据的插入",
        "peekOfCode": "client = MongoClient(host='127.0.0.1', port=27017)\n# 打印数据库信息\n# print(client.server_info())\n# 使用demo数据库\n# use demo\n# 代表连接到demo数据库\n# 现在知识初始化，还没有真正连接\ndb = client.demo\n# 验证\ndb.authenticate('zhou','1234')",
        "detail": "阶段2.pymongo.02.collection数据的插入",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo.02.collection数据的插入",
        "description": "阶段2.pymongo.02.collection数据的插入",
        "peekOfCode": "db = client.demo\n# 验证\ndb.authenticate('zhou','1234')\n# print(dir(db))\n# print(db)\n# Database(MongoClient(host=['127.0.0.1:27017'], \n# document_class=dict,\n# tz_aware=False, connect=True), 'demo')\n# 代表连接到demo数据库下的movie集合\n# 以下两种方法都行",
        "detail": "阶段2.pymongo.02.collection数据的插入",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo.02.collection数据的插入",
        "description": "阶段2.pymongo.02.collection数据的插入",
        "peekOfCode": "collection = db.movie\n# collection = db['movie']\n# print(collection)\n# Collection(Database(MongoClient(host=['127.0.0.1:27017'], \n# document_class=dict, tz_aware=False, connect=True), 'demo'), 'movie')\n# 数据插入\n# data insert\n# insert_one()表示插入一个数据\n# collection.insert_one({\n#     # 如果不加“_id”字段，mongodb会自动创建一个",
        "detail": "阶段2.pymongo.02.collection数据的插入",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo.03.练习",
        "description": "阶段2.pymongo.03.练习",
        "peekOfCode": "client = MongoClient(host='127.0.0.1', port=27017)\ndb = client.demo\ndb.authenticate('zhou','1234')\ncollection = db.movie\nwith open('./movie.json','r') as f:\n    data = json.loads(f.read())\nprint(type(data))\n# print(data)\ncollection.insert_many(data)\nclient.close()",
        "detail": "阶段2.pymongo.03.练习",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo.03.练习",
        "description": "阶段2.pymongo.03.练习",
        "peekOfCode": "db = client.demo\ndb.authenticate('zhou','1234')\ncollection = db.movie\nwith open('./movie.json','r') as f:\n    data = json.loads(f.read())\nprint(type(data))\n# print(data)\ncollection.insert_many(data)\nclient.close()",
        "detail": "阶段2.pymongo.03.练习",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo.03.练习",
        "description": "阶段2.pymongo.03.练习",
        "peekOfCode": "collection = db.movie\nwith open('./movie.json','r') as f:\n    data = json.loads(f.read())\nprint(type(data))\n# print(data)\ncollection.insert_many(data)\nclient.close()",
        "detail": "阶段2.pymongo.03.练习",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo.04.查询find，find_one",
        "description": "阶段2.pymongo.04.查询find，find_one",
        "peekOfCode": "client = MongoClient(host='127.0.0.1', port=27017)\ndb = client.demo\ndb.authenticate('zhou','1234')\ncollection = db.movie\n# 数据库查找find_one() 返回一个字典\n# 不指定参数默认返回第一条数据\nm = collection.find_one()\nprint(m)\nprint(m.get('title'))\n# 当指定参数时返回匹配条件的第一条数据",
        "detail": "阶段2.pymongo.04.查询find，find_one",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo.04.查询find，find_one",
        "description": "阶段2.pymongo.04.查询find，find_one",
        "peekOfCode": "db = client.demo\ndb.authenticate('zhou','1234')\ncollection = db.movie\n# 数据库查找find_one() 返回一个字典\n# 不指定参数默认返回第一条数据\nm = collection.find_one()\nprint(m)\nprint(m.get('title'))\n# 当指定参数时返回匹配条件的第一条数据\nm = collection.find_one({'title_year':2015})",
        "detail": "阶段2.pymongo.04.查询find，find_one",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo.04.查询find，find_one",
        "description": "阶段2.pymongo.04.查询find，find_one",
        "peekOfCode": "collection = db.movie\n# 数据库查找find_one() 返回一个字典\n# 不指定参数默认返回第一条数据\nm = collection.find_one()\nprint(m)\nprint(m.get('title'))\n# 当指定参数时返回匹配条件的第一条数据\nm = collection.find_one({'title_year':2015})\nprint(m)\n# 数据库查找find(),返回一个可迭代的对象",
        "detail": "阶段2.pymongo.04.查询find，find_one",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "阶段2.pymongo.04.查询find，find_one",
        "description": "阶段2.pymongo.04.查询find，find_one",
        "peekOfCode": "m = collection.find_one()\nprint(m)\nprint(m.get('title'))\n# 当指定参数时返回匹配条件的第一条数据\nm = collection.find_one({'title_year':2015})\nprint(m)\n# 数据库查找find(),返回一个可迭代的对象\n# ms = collection.find()\n# # print(ms)\n# for m in ms:",
        "detail": "阶段2.pymongo.04.查询find，find_one",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "阶段2.pymongo.04.查询find，find_one",
        "description": "阶段2.pymongo.04.查询find，find_one",
        "peekOfCode": "m = collection.find_one({'title_year':2015})\nprint(m)\n# 数据库查找find(),返回一个可迭代的对象\n# ms = collection.find()\n# # print(ms)\n# for m in ms:\n#     print(m)\n# 指定参数就返回所有title_year:2015的数据\nms = collection.find({'title_year':2015})\n# print(ms)",
        "detail": "阶段2.pymongo.04.查询find，find_one",
        "documentation": {}
    },
    {
        "label": "ms",
        "kind": 5,
        "importPath": "阶段2.pymongo.04.查询find，find_one",
        "description": "阶段2.pymongo.04.查询find，find_one",
        "peekOfCode": "ms = collection.find({'title_year':2015})\n# print(ms)\nfor m in ms:\n    print(m)\n# 还可以多级过滤\n\"\"\"  \n    假设在mongodb里有这样几条数据\n    a={\n        \"a\":{\"key\":1},\n        \"b\":1",
        "detail": "阶段2.pymongo.04.查询find，find_one",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo.05.通过projection控制返回的字段",
        "description": "阶段2.pymongo.05.通过projection控制返回的字段",
        "peekOfCode": "client = MongoClient(host='127.0.0.1', port=27017)\ndb = client.demo\ndb.authenticate('zhou','1234')\ncollection = db.movie\n# 数据库查找find_one() 返回一个字典\n# 不指定参数默认返回第一条数据\nm = collection.find_one(projection={\"title\":True,\"director_name\":True})\nprint(m)\nprint(m.get('title'))\n\"\"\" 通过projection控制返回的字段 \"\"\"",
        "detail": "阶段2.pymongo.05.通过projection控制返回的字段",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo.05.通过projection控制返回的字段",
        "description": "阶段2.pymongo.05.通过projection控制返回的字段",
        "peekOfCode": "db = client.demo\ndb.authenticate('zhou','1234')\ncollection = db.movie\n# 数据库查找find_one() 返回一个字典\n# 不指定参数默认返回第一条数据\nm = collection.find_one(projection={\"title\":True,\"director_name\":True})\nprint(m)\nprint(m.get('title'))\n\"\"\" 通过projection控制返回的字段 \"\"\"\n# 当指定参数时返回匹配条件的第一条数据",
        "detail": "阶段2.pymongo.05.通过projection控制返回的字段",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo.05.通过projection控制返回的字段",
        "description": "阶段2.pymongo.05.通过projection控制返回的字段",
        "peekOfCode": "collection = db.movie\n# 数据库查找find_one() 返回一个字典\n# 不指定参数默认返回第一条数据\nm = collection.find_one(projection={\"title\":True,\"director_name\":True})\nprint(m)\nprint(m.get('title'))\n\"\"\" 通过projection控制返回的字段 \"\"\"\n# 当指定参数时返回匹配条件的第一条数据\n# {\"title\":True,\"director_name\":True}\n# 表示只返回这两个字段的值",
        "detail": "阶段2.pymongo.05.通过projection控制返回的字段",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "阶段2.pymongo.05.通过projection控制返回的字段",
        "description": "阶段2.pymongo.05.通过projection控制返回的字段",
        "peekOfCode": "m = collection.find_one(projection={\"title\":True,\"director_name\":True})\nprint(m)\nprint(m.get('title'))\n\"\"\" 通过projection控制返回的字段 \"\"\"\n# 当指定参数时返回匹配条件的第一条数据\n# {\"title\":True,\"director_name\":True}\n# 表示只返回这两个字段的值\n# _id字段会默认返回\n# 如果不想要_id字段，我们可以指明\nm = collection.find_one({'title_year':2015},projection={\"title\":True,\"director_name\":True})",
        "detail": "阶段2.pymongo.05.通过projection控制返回的字段",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "阶段2.pymongo.05.通过projection控制返回的字段",
        "description": "阶段2.pymongo.05.通过projection控制返回的字段",
        "peekOfCode": "m = collection.find_one({'title_year':2015},projection={\"title\":True,\"director_name\":True})\nprint(m)\n# {'_id': ObjectId('61bf303a65163952340c0dfa'), 'title': 'Spectre', 'director_name': 'Sam Mendes'}\nm = collection.find_one({'title_year':2015},projection={\"title\":True,\"director_name\":True,\"_id\":False})\nprint(m)\n# {'title': 'Spectre', 'director_name': 'Sam Mendes'}",
        "detail": "阶段2.pymongo.05.通过projection控制返回的字段",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "阶段2.pymongo.05.通过projection控制返回的字段",
        "description": "阶段2.pymongo.05.通过projection控制返回的字段",
        "peekOfCode": "m = collection.find_one({'title_year':2015},projection={\"title\":True,\"director_name\":True,\"_id\":False})\nprint(m)\n# {'title': 'Spectre', 'director_name': 'Sam Mendes'}",
        "detail": "阶段2.pymongo.05.通过projection控制返回的字段",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo.06.sort.limit.skip",
        "description": "阶段2.pymongo.06.sort.limit.skip",
        "peekOfCode": "client = MongoClient(host='127.0.0.1', port=27017)\n# 指定连接数据库\ndb = client.demo\n# 验证用户信息\ndb.authenticate('zhou','1234')\n# 指定连接集合\ncollection = db.movie\n\"\"\" sort排序   limit限制返回结果   skip 跳过多少条数据 \"\"\"\n# 返回所有结果，是一个可迭代的数据\nmovies = collection.find()",
        "detail": "阶段2.pymongo.06.sort.limit.skip",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo.06.sort.limit.skip",
        "description": "阶段2.pymongo.06.sort.limit.skip",
        "peekOfCode": "db = client.demo\n# 验证用户信息\ndb.authenticate('zhou','1234')\n# 指定连接集合\ncollection = db.movie\n\"\"\" sort排序   limit限制返回结果   skip 跳过多少条数据 \"\"\"\n# 返回所有结果，是一个可迭代的数据\nmovies = collection.find()\n# 按照title_year排序,默认升序，\n# 如果指定direction = DESCENDING，则为降序排列",
        "detail": "阶段2.pymongo.06.sort.limit.skip",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo.06.sort.limit.skip",
        "description": "阶段2.pymongo.06.sort.limit.skip",
        "peekOfCode": "collection = db.movie\n\"\"\" sort排序   limit限制返回结果   skip 跳过多少条数据 \"\"\"\n# 返回所有结果，是一个可迭代的数据\nmovies = collection.find()\n# 按照title_year排序,默认升序，\n# 如果指定direction = DESCENDING，则为降序排列\n# 这个DESCENDING需要从pymongo里面导入\n# for m in movies.sort(\"title_year\",direction=DESCENDING):\n#     print(m)\n# 按照imdb_score排序，",
        "detail": "阶段2.pymongo.06.sort.limit.skip",
        "documentation": {}
    },
    {
        "label": "movies",
        "kind": 5,
        "importPath": "阶段2.pymongo.06.sort.limit.skip",
        "description": "阶段2.pymongo.06.sort.limit.skip",
        "peekOfCode": "movies = collection.find()\n# 按照title_year排序,默认升序，\n# 如果指定direction = DESCENDING，则为降序排列\n# 这个DESCENDING需要从pymongo里面导入\n# for m in movies.sort(\"title_year\",direction=DESCENDING):\n#     print(m)\n# 按照imdb_score排序，\n# 降序排列\n# 然后通过limit()方法限制返回结果\n# for m in movies.sort(\"imdb_score\",DESCENDING).limit(10):",
        "detail": "阶段2.pymongo.06.sort.limit.skip",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo.07.count和distinct",
        "description": "阶段2.pymongo.07.count和distinct",
        "peekOfCode": "client = MongoClient(host='127.0.0.1', port=27017)\n# 指定连接数据库\ndb = client.demo\n# 验证用户信息\ndb.authenticate('zhou','1234')\n# 指定连接集合\ncollection = db.movie\n'''count()计算结果的数量'''\n# ! count is deprecated. Use Collection.count_documents instead.\n# count()方法已经被替代了，使用count_documents()",
        "detail": "阶段2.pymongo.07.count和distinct",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo.07.count和distinct",
        "description": "阶段2.pymongo.07.count和distinct",
        "peekOfCode": "db = client.demo\n# 验证用户信息\ndb.authenticate('zhou','1234')\n# 指定连接集合\ncollection = db.movie\n'''count()计算结果的数量'''\n# ! count is deprecated. Use Collection.count_documents instead.\n# count()方法已经被替代了，使用count_documents()\nprint(collection.find().count())\n# 需要有一个过滤参数，没有过滤参数也需要填一个空大括号",
        "detail": "阶段2.pymongo.07.count和distinct",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo.07.count和distinct",
        "description": "阶段2.pymongo.07.count和distinct",
        "peekOfCode": "collection = db.movie\n'''count()计算结果的数量'''\n# ! count is deprecated. Use Collection.count_documents instead.\n# count()方法已经被替代了，使用count_documents()\nprint(collection.find().count())\n# 需要有一个过滤参数，没有过滤参数也需要填一个空大括号\nprint(collection.count_documents({\"title_year\":2015}))\nprint(collection.count_documents({}))\n'''distinct() 判断某一个字段有多少不同值 返回一个列表'''\nprint(collection.find().distinct('director_name'))",
        "detail": "阶段2.pymongo.07.count和distinct",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo.08.关于大小的条件判断",
        "description": "阶段2.pymongo.08.关于大小的条件判断",
        "peekOfCode": "client = MongoClient(host='127.0.0.1', port=27017)\n# 指定连接数据库\ndb = client.demo\n# 验证用户信息\ndb.authenticate('zhou','1234')\n# 指定连接集合\ncollection = db.movie\n'''$lt小于 $gt大于 $lte小于等于 $gte大于等于'''\n# 查找评分是7分的\nm_list = collection.find({\"imdb_score\":7})",
        "detail": "阶段2.pymongo.08.关于大小的条件判断",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo.08.关于大小的条件判断",
        "description": "阶段2.pymongo.08.关于大小的条件判断",
        "peekOfCode": "db = client.demo\n# 验证用户信息\ndb.authenticate('zhou','1234')\n# 指定连接集合\ncollection = db.movie\n'''$lt小于 $gt大于 $lte小于等于 $gte大于等于'''\n# 查找评分是7分的\nm_list = collection.find({\"imdb_score\":7})\nfor i in m_list:\n    print(i)",
        "detail": "阶段2.pymongo.08.关于大小的条件判断",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo.08.关于大小的条件判断",
        "description": "阶段2.pymongo.08.关于大小的条件判断",
        "peekOfCode": "collection = db.movie\n'''$lt小于 $gt大于 $lte小于等于 $gte大于等于'''\n# 查找评分是7分的\nm_list = collection.find({\"imdb_score\":7})\nfor i in m_list:\n    print(i)\n#查找评分小于等于7分的 {\"imdb_score\":{\"$lte\":7}}\nm_list = collection.find({\"imdb_score\":{\"$lte\":7}})\nfor m in m_list:\n    print(m)",
        "detail": "阶段2.pymongo.08.关于大小的条件判断",
        "documentation": {}
    },
    {
        "label": "m_list",
        "kind": 5,
        "importPath": "阶段2.pymongo.08.关于大小的条件判断",
        "description": "阶段2.pymongo.08.关于大小的条件判断",
        "peekOfCode": "m_list = collection.find({\"imdb_score\":7})\nfor i in m_list:\n    print(i)\n#查找评分小于等于7分的 {\"imdb_score\":{\"$lte\":7}}\nm_list = collection.find({\"imdb_score\":{\"$lte\":7}})\nfor m in m_list:\n    print(m)",
        "detail": "阶段2.pymongo.08.关于大小的条件判断",
        "documentation": {}
    },
    {
        "label": "m_list",
        "kind": 5,
        "importPath": "阶段2.pymongo.08.关于大小的条件判断",
        "description": "阶段2.pymongo.08.关于大小的条件判断",
        "peekOfCode": "m_list = collection.find({\"imdb_score\":{\"$lte\":7}})\nfor m in m_list:\n    print(m)",
        "detail": "阶段2.pymongo.08.关于大小的条件判断",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo.09.关于包含的条件判断",
        "description": "阶段2.pymongo.09.关于包含的条件判断",
        "peekOfCode": "client = MongoClient(host='127.0.0.1', port=27017)\n# 指定连接数据库\ndb = client.demo\n# 验证用户信息\ndb.authenticate('zhou','1234')\n# 指定连接集合\ncollection = db.movie\n''' $ne（not equal）不等于  $in包含  $nin（not in）不包含'''\n# 查询国家不等于USA的国家\n# m_list =  collection.find({'country':{\"$ne\":\"USA\"}})",
        "detail": "阶段2.pymongo.09.关于包含的条件判断",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo.09.关于包含的条件判断",
        "description": "阶段2.pymongo.09.关于包含的条件判断",
        "peekOfCode": "db = client.demo\n# 验证用户信息\ndb.authenticate('zhou','1234')\n# 指定连接集合\ncollection = db.movie\n''' $ne（not equal）不等于  $in包含  $nin（not in）不包含'''\n# 查询国家不等于USA的国家\n# m_list =  collection.find({'country':{\"$ne\":\"USA\"}})\n# for m in m_list:\n#     print(m)",
        "detail": "阶段2.pymongo.09.关于包含的条件判断",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo.09.关于包含的条件判断",
        "description": "阶段2.pymongo.09.关于包含的条件判断",
        "peekOfCode": "collection = db.movie\n''' $ne（not equal）不等于  $in包含  $nin（not in）不包含'''\n# 查询国家不等于USA的国家\n# m_list =  collection.find({'country':{\"$ne\":\"USA\"}})\n# for m in m_list:\n#     print(m)\n# 国家不在usa范围内的\n# m_list = collection.find({'country':{\"nin\":[\"USA\"]}})\n# for m in m_list:\n#     print(m)",
        "detail": "阶段2.pymongo.09.关于包含的条件判断",
        "documentation": {}
    },
    {
        "label": "m_list",
        "kind": 5,
        "importPath": "阶段2.pymongo.09.关于包含的条件判断",
        "description": "阶段2.pymongo.09.关于包含的条件判断",
        "peekOfCode": "m_list = collection.find({'country':{\"$in\":[\"USA\",\"UK\"]}})\nfor m in m_list:\n    print(m)",
        "detail": "阶段2.pymongo.09.关于包含的条件判断",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo.10.数据更新udate",
        "description": "阶段2.pymongo.10.数据更新udate",
        "peekOfCode": "client = MongoClient(host='127.0.0.1', port=27017)\n# 指定连接数据库\ndb = client.demo\n# 验证用户信息\ndb.authenticate('zhou','1234')\n# 指定连接集合\ncollection = db.test\n# 插入多条数据\n# collection.insert_many([\n#     {\"x\":1,\"y\":1},",
        "detail": "阶段2.pymongo.10.数据更新udate",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo.10.数据更新udate",
        "description": "阶段2.pymongo.10.数据更新udate",
        "peekOfCode": "db = client.demo\n# 验证用户信息\ndb.authenticate('zhou','1234')\n# 指定连接集合\ncollection = db.test\n# 插入多条数据\n# collection.insert_many([\n#     {\"x\":1,\"y\":1},\n#     {\"x\":2,\"y\":2},\n#     {\"x\":3,\"y\":3},",
        "detail": "阶段2.pymongo.10.数据更新udate",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo.10.数据更新udate",
        "description": "阶段2.pymongo.10.数据更新udate",
        "peekOfCode": "collection = db.test\n# 插入多条数据\n# collection.insert_many([\n#     {\"x\":1,\"y\":1},\n#     {\"x\":2,\"y\":2},\n#     {\"x\":3,\"y\":3},\n#     {\"x\":4,\"y\":4},\n#     {\"x\":5,\"y\":5},\n# ])\n'''update_one()更新一条数据'''",
        "detail": "阶段2.pymongo.10.数据更新udate",
        "documentation": {}
    },
    {
        "label": "collection.update_many({\"x\":12},{\"$set\":{\"y\":100}},upsert",
        "kind": 5,
        "importPath": "阶段2.pymongo.10.数据更新udate",
        "description": "阶段2.pymongo.10.数据更新udate",
        "peekOfCode": "collection.update_many({\"x\":12},{\"$set\":{\"y\":100}},upsert = True)",
        "detail": "阶段2.pymongo.10.数据更新udate",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo.11.数据的删除",
        "description": "阶段2.pymongo.11.数据的删除",
        "peekOfCode": "client = MongoClient(host='127.0.0.1', port=27017)\n# 指定连接数据库\ndb = client.demo\n# 验证用户信息\ndb.authenticate('zhou','1234')\n# 指定连接集合\ncollection = db.test\n# 如果test集合里面有数据会把里面的数据删除掉\ncollection.drop()\n# 插入多条数据",
        "detail": "阶段2.pymongo.11.数据的删除",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo.11.数据的删除",
        "description": "阶段2.pymongo.11.数据的删除",
        "peekOfCode": "db = client.demo\n# 验证用户信息\ndb.authenticate('zhou','1234')\n# 指定连接集合\ncollection = db.test\n# 如果test集合里面有数据会把里面的数据删除掉\ncollection.drop()\n# 插入多条数据\ncollection.insert_many([\n    {\"x\":1,\"y\":1},",
        "detail": "阶段2.pymongo.11.数据的删除",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo.11.数据的删除",
        "description": "阶段2.pymongo.11.数据的删除",
        "peekOfCode": "collection = db.test\n# 如果test集合里面有数据会把里面的数据删除掉\ncollection.drop()\n# 插入多条数据\ncollection.insert_many([\n    {\"x\":1,\"y\":1},\n    {\"x\":2,\"y\":2},\n    {\"x\":3,\"y\":3},\n    {\"x\":4,\"y\":4},\n    {\"x\":5,\"y\":5},",
        "detail": "阶段2.pymongo.11.数据的删除",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "阶段2.pymongo.11.数据的删除",
        "description": "阶段2.pymongo.11.数据的删除",
        "peekOfCode": "result = collection.delete_many({\"x\":{\"$in\": [1,2,3]}})\nprint(result.deleted_count)\nfor item in collection.find():\n    print(item)",
        "detail": "阶段2.pymongo.11.数据的删除",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.homework.answer",
        "description": "阶段2.pymongo_demo.homework.answer",
        "peekOfCode": "client = MongoClient(host='127.0.0.1', port=27017)\ndb = client.demo\ncollection = db['movie']\nwith open('movie.json') as f:\n    movie_list = json.load(f)\n    collection.insert_many(movie_list)\nclient.close()",
        "detail": "阶段2.pymongo_demo.homework.answer",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.homework.answer",
        "description": "阶段2.pymongo_demo.homework.answer",
        "peekOfCode": "db = client.demo\ncollection = db['movie']\nwith open('movie.json') as f:\n    movie_list = json.load(f)\n    collection.insert_many(movie_list)\nclient.close()",
        "detail": "阶段2.pymongo_demo.homework.answer",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.homework.answer",
        "description": "阶段2.pymongo_demo.homework.answer",
        "peekOfCode": "collection = db['movie']\nwith open('movie.json') as f:\n    movie_list = json.load(f)\n    collection.insert_many(movie_list)\nclient.close()",
        "detail": "阶段2.pymongo_demo.homework.answer",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.basic",
        "description": "阶段2.pymongo_demo.basic",
        "peekOfCode": "client = MongoClient(host='127.0.0.1', port=27017)\nprint(client.server_info())\n# use demo\ndb = client.demo\nprint(db)\n# collection = db.movie\ncollection = db['movie']\nprint(collection)\n# data insert\n# collection.insert_one(",
        "detail": "阶段2.pymongo_demo.basic",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.basic",
        "description": "阶段2.pymongo_demo.basic",
        "peekOfCode": "db = client.demo\nprint(db)\n# collection = db.movie\ncollection = db['movie']\nprint(collection)\n# data insert\n# collection.insert_one(\n#     {\n#         \"_id\": '123456',\n#         \"A\": [1, 2, 3 ],",
        "detail": "阶段2.pymongo_demo.basic",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.basic",
        "description": "阶段2.pymongo_demo.basic",
        "peekOfCode": "collection = db['movie']\nprint(collection)\n# data insert\n# collection.insert_one(\n#     {\n#         \"_id\": '123456',\n#         \"A\": [1, 2, 3 ],\n#         \"B\": {\n#             \"X\": 1,\n#             \"Y\": 2,",
        "detail": "阶段2.pymongo_demo.basic",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.condition",
        "description": "阶段2.pymongo_demo.condition",
        "peekOfCode": "client = MongoClient(host='127.0.0.1', port=27017)\ndb = client.demo\ncollection = db['movie']\n# Using the $lt, $gt, $lte, and $gte Operators\n# m_list = collection.find({'imdb_score': {'$gt': 7}})\n# for m in m_list:\n#     print(m)\n# $ne, $in, $nin\n# m_list = collection.find({'country': {'$ne': \"USA\"}})\n# for m in m_list:",
        "detail": "阶段2.pymongo_demo.condition",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.condition",
        "description": "阶段2.pymongo_demo.condition",
        "peekOfCode": "db = client.demo\ncollection = db['movie']\n# Using the $lt, $gt, $lte, and $gte Operators\n# m_list = collection.find({'imdb_score': {'$gt': 7}})\n# for m in m_list:\n#     print(m)\n# $ne, $in, $nin\n# m_list = collection.find({'country': {'$ne': \"USA\"}})\n# for m in m_list:\n#     print(m)",
        "detail": "阶段2.pymongo_demo.condition",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.condition",
        "description": "阶段2.pymongo_demo.condition",
        "peekOfCode": "collection = db['movie']\n# Using the $lt, $gt, $lte, and $gte Operators\n# m_list = collection.find({'imdb_score': {'$gt': 7}})\n# for m in m_list:\n#     print(m)\n# $ne, $in, $nin\n# m_list = collection.find({'country': {'$ne': \"USA\"}})\n# for m in m_list:\n#     print(m)\nm_list = collection.find({\"country\": {'$in': [\"UK\", \"Australia\"]}})",
        "detail": "阶段2.pymongo_demo.condition",
        "documentation": {}
    },
    {
        "label": "m_list",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.condition",
        "description": "阶段2.pymongo_demo.condition",
        "peekOfCode": "m_list = collection.find({\"country\": {'$in': [\"UK\", \"Australia\"]}})\nfor m in m_list:\n    print(m)",
        "detail": "阶段2.pymongo_demo.condition",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.delete",
        "description": "阶段2.pymongo_demo.delete",
        "peekOfCode": "client = MongoClient(host='127.0.0.1', port=27017)\ndb = client.demo\ncollection = db['test']\ncollection.drop()\n# insert some test data\ncollection.insert_many(\n    [\n        {\"x\": 1, \"y\": 1},\n        {\"x\": 2, \"y\": 2},\n        {\"x\": 3, \"y\": 3},",
        "detail": "阶段2.pymongo_demo.delete",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.delete",
        "description": "阶段2.pymongo_demo.delete",
        "peekOfCode": "db = client.demo\ncollection = db['test']\ncollection.drop()\n# insert some test data\ncollection.insert_many(\n    [\n        {\"x\": 1, \"y\": 1},\n        {\"x\": 2, \"y\": 2},\n        {\"x\": 3, \"y\": 3},\n        {\"x\": 4, \"y\": 4},",
        "detail": "阶段2.pymongo_demo.delete",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.delete",
        "description": "阶段2.pymongo_demo.delete",
        "peekOfCode": "collection = db['test']\ncollection.drop()\n# insert some test data\ncollection.insert_many(\n    [\n        {\"x\": 1, \"y\": 1},\n        {\"x\": 2, \"y\": 2},\n        {\"x\": 3, \"y\": 3},\n        {\"x\": 4, \"y\": 4},\n        {\"x\": 5, \"y\": 5}",
        "detail": "阶段2.pymongo_demo.delete",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.delete",
        "description": "阶段2.pymongo_demo.delete",
        "peekOfCode": "a = collection.delete_many({'x': {'$in': [1, 2, 3]}})\nprint(a.deleted_count)",
        "detail": "阶段2.pymongo_demo.delete",
        "documentation": {}
    },
    {
        "label": "movie",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.document",
        "description": "阶段2.pymongo_demo.document",
        "peekOfCode": "movie = {\n    \"title\": \"Avatar\",\n    \"title_year\": 2009,\n    \"director_name\": \"James Cameron\",\n    \"actor_1_name\": \"CCH Pounder\",\n    \"actor_2_name\": \"Joel David Moore\",\n    \"duration\": 178,\n    \"country\": \"USA\",\n    \"content_rating\": \"PG-13\",\n    \"gross\": 760505847,",
        "detail": "阶段2.pymongo_demo.document",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.find",
        "description": "阶段2.pymongo_demo.find",
        "peekOfCode": "client = MongoClient(host='127.0.0.1', port=27017)\ndb = client.demo\ncollection = db['movie']\n# m = collection.find_one({'title_year': 2020})\n# print(m)\n# for m in collection.find({'title_year': 2015}, projection={\"_id\": False, \"title\": True, \"director_name\": True}):\n#     print(m)\n\"\"\"\na = {\n    \"a\": {\"key\": 1},",
        "detail": "阶段2.pymongo_demo.find",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.find",
        "description": "阶段2.pymongo_demo.find",
        "peekOfCode": "db = client.demo\ncollection = db['movie']\n# m = collection.find_one({'title_year': 2020})\n# print(m)\n# for m in collection.find({'title_year': 2015}, projection={\"_id\": False, \"title\": True, \"director_name\": True}):\n#     print(m)\n\"\"\"\na = {\n    \"a\": {\"key\": 1},\n    \"b\": 1",
        "detail": "阶段2.pymongo_demo.find",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.find",
        "description": "阶段2.pymongo_demo.find",
        "peekOfCode": "collection = db['movie']\n# m = collection.find_one({'title_year': 2020})\n# print(m)\n# for m in collection.find({'title_year': 2015}, projection={\"_id\": False, \"title\": True, \"director_name\": True}):\n#     print(m)\n\"\"\"\na = {\n    \"a\": {\"key\": 1},\n    \"b\": 1\n}",
        "detail": "阶段2.pymongo_demo.find",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.find",
        "description": "阶段2.pymongo_demo.find",
        "peekOfCode": "a = {\n    \"a\": {\"key\": 1},\n    \"b\": 1\n}\nb = {\n    \"a\": {\"key\":2}\n}\nc = {\n    \"a\": {\"key\": 1, \"v\":2}\n}",
        "detail": "阶段2.pymongo_demo.find",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.find",
        "description": "阶段2.pymongo_demo.find",
        "peekOfCode": "b = {\n    \"a\": {\"key\":2}\n}\nc = {\n    \"a\": {\"key\": 1, \"v\":2}\n}\ncollection.find({'a.key': 1})\n\"\"\"\n# sort, limit, skip\n# for m in collection.find(",
        "detail": "阶段2.pymongo_demo.find",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.find",
        "description": "阶段2.pymongo_demo.find",
        "peekOfCode": "c = {\n    \"a\": {\"key\": 1, \"v\":2}\n}\ncollection.find({'a.key': 1})\n\"\"\"\n# sort, limit, skip\n# for m in collection.find(\n#     projection={\"_id\": False, \"title\": True, \"imdb_score\": True}).sort(\"imdb_score\", DESCENDING).skip(20).limit(10):\n#     print(m)\n# count , distinct",
        "detail": "阶段2.pymongo_demo.find",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.update",
        "description": "阶段2.pymongo_demo.update",
        "peekOfCode": "client = MongoClient(host='127.0.0.1', port=27017)\ndb = client.demo\ncollection = db['test']\n# insert some test data\n# collection.insert_many(\n#     [\n#         {\"x\": 1, \"y\": 1},\n#         {\"x\": 2, \"y\": 2},\n#         {\"x\": 3, \"y\": 3},\n#         {\"x\": 4, \"y\": 4},",
        "detail": "阶段2.pymongo_demo.update",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.update",
        "description": "阶段2.pymongo_demo.update",
        "peekOfCode": "db = client.demo\ncollection = db['test']\n# insert some test data\n# collection.insert_many(\n#     [\n#         {\"x\": 1, \"y\": 1},\n#         {\"x\": 2, \"y\": 2},\n#         {\"x\": 3, \"y\": 3},\n#         {\"x\": 4, \"y\": 4},\n#         {\"x\": 5, \"y\": 5}",
        "detail": "阶段2.pymongo_demo.update",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "阶段2.pymongo_demo.update",
        "description": "阶段2.pymongo_demo.update",
        "peekOfCode": "collection = db['test']\n# insert some test data\n# collection.insert_many(\n#     [\n#         {\"x\": 1, \"y\": 1},\n#         {\"x\": 2, \"y\": 2},\n#         {\"x\": 3, \"y\": 3},\n#         {\"x\": 4, \"y\": 4},\n#         {\"x\": 5, \"y\": 5}\n#     ]",
        "detail": "阶段2.pymongo_demo.update",
        "documentation": {}
    },
    {
        "label": "HelloConfig",
        "kind": 6,
        "importPath": "阶段3.day01.my_project.hello.apps",
        "description": "阶段3.day01.my_project.hello.apps",
        "peekOfCode": "class HelloConfig(AppConfig):\n    name = 'hello'",
        "detail": "阶段3.day01.my_project.hello.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.hello.urls",
        "description": "阶段3.day01.my_project.hello.urls",
        "peekOfCode": "urlpatterns = [\n    path('world/',hello_word,name='hello_word'),\n    path('china/',hello_china,name='hello_china'),\n    # 固定的类型，字符串\n    # /hello\n    # 指定参数类型\n    # /article/<int>\n    # /article/50002\n    # 使用正则表达式\n    # 响应html内容",
        "detail": "阶段3.day01.my_project.hello.urls",
        "documentation": {}
    },
    {
        "label": "hello_word",
        "kind": 2,
        "importPath": "阶段3.day01.my_project.hello.views",
        "description": "阶段3.day01.my_project.hello.views",
        "peekOfCode": "def hello_word(request):\n    # url逆向解析 通过函数名找到url # /hello/world/\n    print(reverse('hello_word'))\n    return HttpResponse('hello world')\ndef hello_china(request):\n    return HttpResponse('hello china')\n# 响应html内容\ndef hello_html(request):\n    html='<html><body style=\"color:#f00\">hello world.</body></html>'\n    return HttpResponse(html)",
        "detail": "阶段3.day01.my_project.hello.views",
        "documentation": {}
    },
    {
        "label": "hello_china",
        "kind": 2,
        "importPath": "阶段3.day01.my_project.hello.views",
        "description": "阶段3.day01.my_project.hello.views",
        "peekOfCode": "def hello_china(request):\n    return HttpResponse('hello china')\n# 响应html内容\ndef hello_html(request):\n    html='<html><body style=\"color:#f00\">hello world.</body></html>'\n    return HttpResponse(html)\n# 获取url参数\ndef article_list(request,month):\n    \"\"\" \n    :param month: 今年某一个月的文章",
        "detail": "阶段3.day01.my_project.hello.views",
        "documentation": {}
    },
    {
        "label": "hello_html",
        "kind": 2,
        "importPath": "阶段3.day01.my_project.hello.views",
        "description": "阶段3.day01.my_project.hello.views",
        "peekOfCode": "def hello_html(request):\n    html='<html><body style=\"color:#f00\">hello world.</body></html>'\n    return HttpResponse(html)\n# 获取url参数\ndef article_list(request,month):\n    \"\"\" \n    :param month: 今年某一个月的文章\n    \"\"\"\n    return HttpResponse(\"article:{}\".format(month))\n#获取get请求参数",
        "detail": "阶段3.day01.my_project.hello.views",
        "documentation": {}
    },
    {
        "label": "article_list",
        "kind": 2,
        "importPath": "阶段3.day01.my_project.hello.views",
        "description": "阶段3.day01.my_project.hello.views",
        "peekOfCode": "def article_list(request,month):\n    \"\"\" \n    :param month: 今年某一个月的文章\n    \"\"\"\n    return HttpResponse(\"article:{}\".format(month))\n#获取get请求参数\ndef search(request):\n    \"\"\" \n    GET参数的获取\n    \"\"\"",
        "detail": "阶段3.day01.my_project.hello.views",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "阶段3.day01.my_project.hello.views",
        "description": "阶段3.day01.my_project.hello.views",
        "peekOfCode": "def search(request):\n    \"\"\" \n    GET参数的获取\n    \"\"\"\n    # 获取name参数，表示没有的或给一个空值\n    name = request.GET.get('name','')\n    print('参数:',name)\n    return HttpResponse('查询成功')\ndef render_str(request):\n    html = render_to_string()",
        "detail": "阶段3.day01.my_project.hello.views",
        "documentation": {}
    },
    {
        "label": "render_str",
        "kind": 2,
        "importPath": "阶段3.day01.my_project.hello.views",
        "description": "阶段3.day01.my_project.hello.views",
        "peekOfCode": "def render_str(request):\n    html = render_to_string()",
        "detail": "阶段3.day01.my_project.hello.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.asgi",
        "description": "阶段3.day01.my_project.my_project.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "阶段3.day01.my_project.my_project.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'ih9-sg-5kh=k5%!dh@j#4!_5zby4d@d!8gt_9qy&gsyms+3)-r'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"192.168.1.197\",'127.0.0.1']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "SECRET_KEY = 'ih9-sg-5kh=k5%!dh@j#4!_5zby4d@d!8gt_9qy&gsyms+3)-r'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"192.168.1.197\",'127.0.0.1']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = [\"192.168.1.197\",'127.0.0.1']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"192.168.1.197\",'127.0.0.1']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'my_project.urls'",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "ROOT_URLCONF = 'my_project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "WSGI_APPLICATION = 'my_project.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n# Password validation",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.settings",
        "description": "阶段3.day01.my_project.my_project.settings",
        "peekOfCode": "STATIC_URL = '/static/'",
        "detail": "阶段3.day01.my_project.my_project.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.urls",
        "description": "阶段3.day01.my_project.my_project.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    # 把根路径与子路径整合在一起\n    # include('hello.urls')子模块下的路径\n    path('hello/',include('hello.urls'))\n    # 固定的类型，字符串\n    # /hello\n    # 指定参数类型\n    # /article/<int>\n    # /article/50002",
        "detail": "阶段3.day01.my_project.my_project.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "阶段3.day01.my_project.my_project.wsgi",
        "description": "阶段3.day01.my_project.my_project.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "阶段3.day01.my_project.my_project.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "阶段3.day01.my_project.manage",
        "description": "阶段3.day01.my_project.manage",
        "peekOfCode": "def main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc",
        "detail": "阶段3.day01.my_project.manage",
        "documentation": {}
    }
]